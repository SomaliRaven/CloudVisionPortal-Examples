- service: arista.studio.v1.StudioConfigService
  method: Set
  body:
    value:
      key:
        studio_id: 6b017dc8-3b3e-4fb7-bd19-48efbc3e6bd6
        workspace_id: 51ae07a0-7bf2-4c07-8923-9c5a48f82eac
      display_name: WAN Services
      description: 'ver. 1.8.1 Define and configure network services for MPLS networks including EVPN, VPWS, and L3VPN. Required tags: router_bgp.as:"number", router_bgp.router_id:"ip address".'
      template:
        type: TEMPLATE_TYPE_MAKO
        body: |
          <%
          import sys, os, json, ipaddress, re
          from collections import OrderedDict
          import tagsearch_python.tagsearch_pb2_grpc as tsgr
          import tagsearch_python.tagsearch_pb2 as tspb
          from arista.tag.v2.tag_pb2 import Tag, TagKey, TagAssignment, TagAssignmentKey, TagAssignmentConfig

          workspace_id = ctx.studio.workspaceId
          my_device = ctx.getDevice()
          my_device_id = my_device.id
          VIP = ""

          def convert(text):
              return int(text) if text.isdigit() else text.lower()

          def alphanum_key(key):
              return [convert(c) for c in re.split('([0-9]+)', str(key))]

          def natural_sort(iterable):
              if iterable is None:
                  return list()
              return sorted(iterable, key=alphanum_key)

          def string_to_list(string_to_convert):
              numbers = []
              segments = [ segment.strip() for segment in string_to_convert.split(",") ]
              for segment in segments:
                  if "-" in segment:
                      for i in range(int(segment.split("-")[0]), int(segment.split("-")[1]) + 1):
                          numbers.append(i)
                  else:
                      numbers.append(int(segment))
              return numbers

          from itertools import count, groupby
          def list_compress(list_to_compress):
              if not isinstance(list_to_compress, list):
                  raise TypeError('value must be of type list, got %s' % type(list_to_compress))
              G = (list(x) for y, x in groupby(sorted(list_to_compress), lambda x, c=count(): next(c) - x))
              return (",".join("-".join(map(str, (g[0], g[-1])[:len(g)])) for g in G))

          def get_tag_values_applied_to_device(tag_assignment_key):
              label = tag_assignment_key.label.value
              value = tag_assignment_key.value.value
              device_id = tag_assignment_key.device_id.value
              workspace_id = tag_assignment_key.workspace_id.value
              tsclient = ctx.getApiClient(tsgr.TagSearchStub)

              matching_tags = []

              tvsr = tspb.TagValueSearchRequest(label=label, workspace_id=workspace_id, topology_studio_request=True)
              for tag in tsclient.GetTagValueSuggestions(tvsr).tags:
                  if not tag.value:
                      continue
                  query= "{}:\"{}\" AND device:{}".format(tag.label, tag.value, device_id)
                  tagmr = tspb.TagMatchRequestV2(query=query, workspace_id=workspace_id, topology_studio_request=True)
                  tagmresp =  tsclient.GetTagMatchesV2(tagmr)
                  for match in tagmresp.matches:
                      if match.device.device_id == device_id:
                          matching_tags.append(tag)

              return matching_tags

          class SwitchDetails:
              def __init__(self):
                  self.id = None
                  self.model = None #Model tag
                  self.eos_version = None #Eos version tag
                  self.hostname = None #hostname tag
                  self.config = {
                      "vlans": {},
                      "vrfs": {},
                      "patch_panels": {},
                      "evpn_multihoming": {},
                      "port_channel_interfaces": {},
                      "loopback_interfaces": {},
                      "vlan_interfaces": {},
                      "router_bgp":{
                          "as": None,
                          "router_id": None,
                          "vrfs": {},
                          "vlans": {},
                          "vlan_aware_bundles": {}
                      },
                  }

              def set_config_params_via_tags(self):
                  self.config["router_bgp"]["as"] = self.get_bgp_asn()
                  self.config["router_bgp"]["router_id"] = self.get_bgp_router_id()
                  mlag_peer_link = self.get_mlag_peer_link()
                  if mlag_peer_link is not None:
                      self.config["port_channel_interfaces"][mlag_peer_link] = {"trunk_groups": [] }

              def check_config_parameters(self):
                  assert self.config["router_bgp"]["as"] is not None, "{} is not set.  Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                          "BGP ASN", "router_bgp.as", self.hostname
                      )
                  assert self.config["router_bgp"]["router_id"] is not None, "{} is not set.  Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                          "BGP Router ID", "router_bgp.router_id", self.hostname
                      )
                  if self.check_mlag_role() is not None:
                      assert self.get_mlag_peer_link() is not None, "{} is not set.  Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                              "MLAG Peer Link", "mlag_configuration.peer_link", self.hostname
                          )

              def get_bgp_asn(self):
                  tag_assignment_key = TagAssignmentKey()
                  tag_assignment_key.workspace_id.value = workspace_id
                  tag_assignment_key.element_type = 1
                  tag_assignment_key.label.value = "router_bgp.as"
                  tag_assignment_key.device_id.value = self.id
                  tags = get_tag_values_applied_to_device(tag_assignment_key)
                  for tag in tags:
                      return tag.value
                  assert False, "{} is not set. Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                      "BGP ASN Tag", tag_assignment_key.label.value, self.hostname
                  )

              def get_bgp_router_id(self):
                  tag_assignment_key = TagAssignmentKey()
                  tag_assignment_key.workspace_id.value = workspace_id
                  tag_assignment_key.element_type = 1
                  tag_assignment_key.label.value = "router_bgp.router_id"
                  tag_assignment_key.device_id.value = self.id
                  tags = get_tag_values_applied_to_device(tag_assignment_key)
                  for tag in tags:
                      return tag.value
                  assert False, "{} is not set. Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                      "BGP Router ID Tag", tag_assignment_key.label.value, self.hostname
                  )

              def get_mlag_peer_link(self):
                  if self.check_mlag_role() is None:
                      return None
                  tag_assignment_key = TagAssignmentKey()
                  tag_assignment_key.workspace_id.value = workspace_id
                  tag_assignment_key.element_type = 1
                  tag_assignment_key.label.value = "mlag_configuration.peer_link"
                  tag_assignment_key.device_id.value = self.id
                  tags = get_tag_values_applied_to_device(tag_assignment_key)
                  for tag in tags:
                      return tag.value

                  assert False, "{} is not set.  Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                          "MLAG Peer Link", "mlag_configuration.peer_link", self.hostname
                      )

              def check_mlag_role(self):
                  '''
                  Returns 'Primary', 'Secondary', or None if no MLAG neighbor present
                  '''
                  mlag_peer = None

                  tsclient = ctx.getApiClient(tsgr.TagSearchStub)
                  try:
                      query = "DC:\"{}\" AND DC-POD:\"{}\" AND Leaf-Domain:\"{}\"".format(self.dc, self.dc_pod, self.leaf_domain)

                      tagmr = tspb.TagMatchRequestV2(query=query, workspace_id=workspace_id, topology_studio_request=True)
                      tagmresp =  tsclient.GetTagMatchesV2(tagmr)
                      for m in tagmresp.matches:
                          if m.device.device_id != my_device_id:
                              mlag_peer = m.device.device_id

                      if mlag_peer is None:
                          return

                      tvsr = tspb.TagValueSearchRequest(label="Leaf-Number", workspace_id=workspace_id, topology_studio_request=True)
                      tags = tsclient.GetTagValueSuggestions(tvsr).tags
                      for tag in tags:
                          tagmr = tspb.TagMatchRequestV2(query="{}:\"{}\"".format(tag.label, tag.value), workspace_id=workspace_id, topology_studio_request=True)
                          tagmresp =  tsclient.GetTagMatchesV2(tagmr)
                          for m in tagmresp.matches:
                              if m.device.device_id == mlag_peer:
                                  mlag_peer_leaf_number = int(tag.value)
                                  break

                      if int(self.leaf_number) < int(mlag_peer_leaf_number):
                          return "Primary"
                      else:
                          return "Secondary"
                  except:
                      return

              def configure_evpnvrfs(self, vrfs):
                  ip_vrf_admin_field_key_words = {
                      "VLAN": "vrf_details['vlan']",
                      "SEQ": "vrf_details['rdrt']",
                      "ASN": "self.config['router_bgp']['as']",
                      "Router-ID": "self.config['router_bgp']['router_id']"
                  }
                  for vrf, vrf_details in vrfs.items():
                      self.config["vrfs"][vrf] = {
                          "description": None,
                          "vni": vrf_details["vni"],
                          "ip_routing": True
                      }
                      switch_rd = []
                      for rd_segment in vrf_details["route_distinguisher"].split(":"):
                          if ip_vrf_admin_field_key_words.get(rd_segment):
                              switch_rd.append(  str(eval(ip_vrf_admin_field_key_words[rd_segment])) )
                          else:
                              switch_rd.append(rd_segment)
                      switch_rd = ":".join(switch_rd)
                      switch_rt = []
                      for rt_segment in vrf_details["route_target"].split(":"):
                          if ip_vrf_admin_field_key_words.get(rt_segment):
                              switch_rt.append(  str(eval(ip_vrf_admin_field_key_words[rt_segment])) )
                          else:
                              switch_rt.append(rt_segment)
                      switch_rt = ":".join(switch_rt)
                      self.config["router_bgp"]["vrfs"][vrf] = {
                          "l3vpn": vrf_details["l3vpn"],
                          "vpws": vrf_details["vpws"],
                          "rd": switch_rd,
                          "route_targets": {
                              "import": {
                                  "evpn": [switch_rt]
                              },
                              "export": {
                                  "evpn": [switch_rt]
                              }
                          },
                          "router_id": self.config["router_bgp"]["router_id"],
                          "redistribute_routes": {
                              "connected":{},
                              "static":{}
                          }
                      }

              def configure_l3vrfs(self, vrfs):
                  ip_vrf_admin_field_key_words = {
                      "VLAN": "vrf_details['vlan']",
                      "SEQ": "vrf_details['rdrt']",
                      "ASN": "self.config['router_bgp']['as']",
                      "Router-ID": "self.config['router_bgp']['router_id']"
                  }
                  for vrf, vrf_details in vrfs.items():
                      self.config["vrfs"][vrf] = {
                          "description": None,
                          "vni": "",
                          "ip_routing": True
                      }
                      switch_rd = []
                      for rd_segment in vrf_details["route_distinguisher"].split(":"):
                          if ip_vrf_admin_field_key_words.get(rd_segment):
                              switch_rd.append(  str(eval(ip_vrf_admin_field_key_words[rd_segment])) )
                          else:
                              switch_rd.append(rd_segment)
                      switch_rd = ":".join(switch_rd)
                      switch_rt = []
                      for rt_segment in vrf_details["route_target"].split(":"):
                          if ip_vrf_admin_field_key_words.get(rt_segment):
                              switch_rt.append(  str(eval(ip_vrf_admin_field_key_words[rt_segment])) )
                          else:
                              switch_rt.append(rt_segment)
                      switch_rt = ":".join(switch_rt)
                      self.config["router_bgp"]["vrfs"][vrf] = {
                          "l3vpn": vrf_details["l3vpn"],
                          "vpws": vrf_details["vpws"],
                          "rd": switch_rd,
                          "route_targets": {
                              "import": {
                                  "vpn-ipv4": [switch_rt]
                              },
                              "export": {
                                  "vpn-ipv4": [switch_rt]
                              }
                          },
                          "router_id": self.config["router_bgp"]["router_id"],
                          "redistribute_routes": {
                              "connected":{},
                              "static":{}
                          }
                      }

              def configure_vpwsvrfs(self, vrfs):
                  ip_vrf_admin_field_key_words = {
                      "SEQ": "vrf_details['rdrt']",
                      "ASN": "self.config['router_bgp']['as']",
                      "Router-ID": "self.config['router_bgp']['router_id']"
                  }
                  for vrf, vrf_details in vrfs.items():
                      self.config["vrfs"][vrf] = {
                          "description": None,
                          "vni": "",
                          "ip_routing": False
                      }
                      switch_rd = []
                      for rd_segment in vrf_details["route_distinguisher"].split(":"):
                          if ip_vrf_admin_field_key_words.get(rd_segment):
                              switch_rd.append(  str(eval(ip_vrf_admin_field_key_words[rd_segment])) )
                          else:
                              switch_rd.append(rd_segment)
                      switch_rd = ":".join(switch_rd)
                      switch_rt = []
                      for rt_segment in vrf_details["route_target"].split(":"):
                          if ip_vrf_admin_field_key_words.get(rt_segment):
                              switch_rt.append(  str(eval(ip_vrf_admin_field_key_words[rt_segment])) )
                          else:
                              switch_rt.append(rt_segment)
                      switch_rt = ":".join(switch_rt)
                      self.config["router_bgp"]["vrfs"][vrf] = {
                          "l3vpn": vrf_details["l3vpn"],
                          "vpws": vrf_details["vpws"],
                          "rd": switch_rd,
                          "route_targets": {
                              "import": {
                                  "evpn": [switch_rt]
                              },
                              "export": {
                                  "evpn": [switch_rt]
                              }
                          },
                          "router_id": self.config["router_bgp"]["router_id"]
                      }


              def configure_evpnvlans(self, vlans, vlan_aware_bundles):
                  vlan_based_mac_vrf_admin_field_key_words = {
                      "VLAN": "vlan",
                      "ASN": "self.config['router_bgp']['as']",
                      "Router-ID": "self.config['router_bgp']['router_id']"
                  }
                  for vlan, vlan_details in vlans.items():
                      self.config["vlans"][vlan] = {}
                      if vlan_details["multihoming"]:
                          self.config["vlans"][vlan]["multihoming"] = vlan_details["multihoming"]
                      if vlan_details["evpn_member_switches"]:
                          self.config["vlans"][vlan]["member_switches"] = vlan_details["evpn_member_switches"]
                      if vlan_details["name"].strip() != "":
                          self.config["vlans"][vlan]["name"] = vlan_details["name"]
                      if vlan_details["interface"].strip() != "":
                          self.config["vlans"][vlan]["interface"] = vlan_details["interface"]
                      if vlan_details["static_routes"]:
                          self.config["vlans"][vlan]["static_routes"] = vlan_details["static_routes"]
                      if vlan_details["peer_groups"]:
                          self.config["vlans"][vlan]["peer_groups"] = vlan_details["peer_groups"]
                      if vlan_details["prefix_lists"]:
                          self.config["vlans"][vlan]["prefix_lists"] = vlan_details["prefix_lists"]
                      if vlan_details["as_path_lists"]:
                          self.config["vlans"][vlan]["as_path_lists"] = vlan_details["as_path_lists"]
                      if vlan_details["svi_ip_addresses"]is not None:
                          self.config["vlan_interfaces"]["Vlan{}".format(vlan)] = {
                              "mtu": 1500,
                              "ip_helpers": {}
                          }
                          if vlan_details["vrf"] is not None and vlan_details["vrf"].strip() not in ["", "None"]:
                              self.config["vlan_interfaces"]["Vlan{}".format(vlan)]["vrf"] = vlan_details["vrf"]
                          if vlan_details["interface"] is not None and vlan_details["interface"].strip() not in ["", "None"]:
                              self.config["vlan_interfaces"]["Vlan{}".format(vlan)]["interface"] = vlan_details["interface"]
                          if vlan_details["svi_ip_addresses"]["sviVirtualIpAddress"].strip() != "":
                              self.config["vlan_interfaces"]["Vlan{}".format(vlan)]["ip_virtual_router_address"] = vlan_details["svi_ip_addresses"]["sviVirtualIpAddress"]
                              self.config["vlan_interfaces"]["Vlan{}".format(vlan)]["ip_virtual_router_prefix"] = vlan_details["vNet"]
                          if vlan_details["svi_ip_addresses"]["ipPrefix"].strip() != "":
                              self.config["vlan_interfaces"]["Vlan{}".format(vlan)]["ip_address"] = vlan_details["svi_ip_addresses"]["ipPrefix"]
                          if vlan_details["secondary_ip_addresses"] is not None:
                              self.config["vlan_interfaces"]["Vlan{}".format(vlan)]["ip_address_secondaries"] =  vlan_details["secondary_ip_addresses"]

                      vlan_in_mac_vrf_bundle = False
                      for bundle, bundle_details in vlan_aware_bundles.items():
                          if vlan in string_to_list(bundle_details["vlan_range"]):
                              vlan_in_mac_vrf_bundle = True
                              break

                      if vlan_in_mac_vrf_bundle == False:
                          switch_rd = []
                          for rd_segment in vlan_details["route_distinguisher"].split(":"):
                              if vlan_based_mac_vrf_admin_field_key_words.get(rd_segment) is not None:
                                  switch_rd.append(  str(eval(vlan_based_mac_vrf_admin_field_key_words[rd_segment])) )
                              else:
                                  switch_rd.append(rd_segment)
                          switch_rd = ":".join(switch_rd)
                          switch_rt = []
                          for rt_segment in vlan_details["route_target"].split(":"):
                              if vlan_based_mac_vrf_admin_field_key_words.get(rt_segment) is not None:
                                  switch_rt.append(  str(eval(vlan_based_mac_vrf_admin_field_key_words[rt_segment])) )
                              else:
                                  switch_rt.append(rt_segment)
                          switch_rt = ":".join(switch_rt)
                          self.config["router_bgp"]["vlans"][vlan] = {
                              "rd": switch_rd,
                              "route_targets": {
                                  "both": [switch_rt]
                              },
                              "redistribute_routes": {
                                  "learned":{}
                              }
                          }

                  vlan_bundle_mac_vrf_admin_field_key_words = {
                      "First-VLAN": "string_to_list(bundle_details['vlan_range'])[0]",
                      "Last-VLAN": "string_to_list(bundle_details['vlan_range'])[-1]",
                      "ASN": "self.config['router_bgp']['as']",
                      "Router-ID": "self.config['router_bgp']['router_id']"
                  }
                  for bundle, bundle_details in vlan_aware_bundles.items():
                      switch_rd = []
                      for rd_segment in bundle_details["route_distinguisher"].split(":"):
                          if vlan_bundle_mac_vrf_admin_field_key_words.get(rd_segment) is not None:
                              try:
                                  switch_rd.append(  str( eval( vlan_bundle_mac_vrf_admin_field_key_words[rd_segment] ) ) )
                              except KeyError:
                                  if re.match(r'First', rd_segment):
                                      switch_rd.append( str(string_to_list(bundle_details['vlan_range'])[0]) )
                                  else:
                                      switch_rd.append( str(string_to_list(bundle_details['vlan_range'])[-1]) )
                          else:
                              switch_rd.append(rd_segment)
                      switch_rd = ":".join(switch_rd)
                      switch_rt = []
                      for rt_segment in bundle_details["route_target"].split(":"):
                          if vlan_bundle_mac_vrf_admin_field_key_words.get(rt_segment) is not None:
                              try:
                                  switch_rt.append(  str( eval( vlan_bundle_mac_vrf_admin_field_key_words[rt_segment] ) ) )
                              except KeyError:
                                  if re.match(r'First', rt_segment):
                                      switch_rt.append( str(string_to_list(bundle_details['vlan_range'])[0]) )
                                  else:
                                      switch_rt.append( str(string_to_list(bundle_details['vlan_range'])[-1]) )
                          else:
                              switch_rt.append(rt_segment)
                      switch_rt = ":".join(switch_rt)
                      self.config["router_bgp"]["vlan_aware_bundles"][bundle] = {
                          "rd": switch_rd,
                          "route_targets":{
                              "both": [switch_rt]
                          },
                          "redistribute_routes": {
                              "learned":{}
                          },
                          "vlan": bundle_details["vlan_range"]
                      }

              def configure_l3vlans(self, vlans):
                  for vlan, vlan_details in vlans.items():
                      self.config["vlans"][vlan] = {}
                      if vlan_details["name"].strip() != "":
                          self.config["vlans"][vlan]["name"] = vlan_details["name"]
                      if vlan_details["interface"].strip() != "":
                          self.config["vlans"][vlan]["interface"] = vlan_details["interface"]
                      if vlan_details["static_routes"]:
                          self.config["vlans"][vlan]["static_routes"] = vlan_details["static_routes"]
                      if vlan_details["peer_groups"]:
                          self.config["vlans"][vlan]["peer_groups"] = vlan_details["peer_groups"]
                      if vlan_details["prefix_lists"]:
                          self.config["vlans"][vlan]["prefix_lists"] = vlan_details["prefix_lists"]
                      if vlan_details["as_path_lists"]:
                          self.config["vlans"][vlan]["as_path_lists"] = vlan_details["as_path_lists"]
                      if vlan_details["svi_ip_addresses"]is not None:
                          self.config["vlan_interfaces"]["Vlan{}".format(vlan)] = {
                              "mtu": 1500,
                              "ip_helpers": {}
                          }
                          if vlan_details["vrf"] is not None and vlan_details["vrf"].strip() not in ["", "None"]:
                              self.config["vlan_interfaces"]["Vlan{}".format(vlan)]["vrf"] = vlan_details["vrf"]
                          if vlan_details["interface"] is not None and vlan_details["interface"].strip() not in ["", "None"]:
                              self.config["vlan_interfaces"]["Vlan{}".format(vlan)]["interface"] = vlan_details["interface"]
                          if vlan_details["name"] is not None and vlan_details["name"].strip() not in ["", "None"]:
                              self.config["vlan_interfaces"]["Vlan{}".format(vlan)]["description"] = vlan_details["name"]
                          if vlan_details["name"] is not None and vlan_details["name"].strip() not in ["", "None"]:
                              self.config["vlan_interfaces"]["Vlan{}".format(vlan)]["description"] = vlan_details["name"]
                          if vlan_details["svi_ip_addresses"]["sviVirtualIpAddress"].strip() != "":
                              self.config["vlan_interfaces"]["Vlan{}".format(vlan)]["ip_virtual_router_address"] = vlan_details["svi_ip_addresses"]["sviVirtualIpAddress"]
                              self.config["vlan_interfaces"]["Vlan{}".format(vlan)]["ip_virtual_router_prefix"] = vlan_details["vNet"]
                          if vlan_details["svi_ip_addresses"]["ipPrefix"].strip() != "":
                              self.config["vlan_interfaces"]["Vlan{}".format(vlan)]["ip_address"] = vlan_details["svi_ip_addresses"]["ipPrefix"]
                          if vlan_details["secondary_ip_addresses"] is not None:
                              self.config["vlan_interfaces"]["Vlan{}".format(vlan)]["ip_address_secondaries"] =  vlan_details["secondary_ip_addresses"]

              def configure_vpwspp(self, pps):
                  for pp, pp_details in pps.items():
                      self.config["patch_panels"][pp] = {}
                      self.config["patch_panels"][pp] = pp_details

          class LeafDetails(SwitchDetails):
              def __init__(self):
                  super().__init__()
                  self.leaf_number = None
                  self.leaf_domain = None

          def get_switch_details(device_id):
              labels_to_fields = {
                  "hostname": "hostname",
                  "model": "model",
                  "DC": "dc",
                  "Network": "dc_pod",
                  "PE-Number": "leaf_number",
                  "PE-Domain": "leaf_domain",
              }
              switch = None
              tsclient = ctx.getApiClient(tsgr.TagSearchStub)
              found_switch = False

              query= "{}:\"{}\" AND device:{}".format("Role", "Leaf", device_id)
              tagmr = tspb.TagMatchRequestV2(query=query, workspace_id=workspace_id, topology_studio_request=True)
              tagmresp =  tsclient.GetTagMatchesV2(tagmr)
              for match in tagmresp.matches:
                  if match.device.device_id == device_id:
                      switch = LeafDetails()
                      found_switch = True
                      break

              if found_switch == False:
                  switch = SwitchDetails()

              for label in labels_to_fields.keys():
                  if label == "hostname":
                      for dev in ctx.topology.getDevices(deviceIds=[device_id]):
                          if dev.hostName:
                              setattr(switch, labels_to_fields[ label ], dev.hostName)
                      continue
                  if label == "model":
                      for dev in ctx.topology.getDevices(deviceIds=[device_id]):
                          if dev.modelName:
                              setattr(switch, labels_to_fields[ label ], dev.modelName)
                      continue
                  tvsr = tspb.TagValueSearchRequest(label=label, workspace_id=workspace_id, topology_studio_request=True)
                  for tag in tsclient.GetTagValueSuggestions(tvsr).tags:
                      try:
                          query= "{}:\"{}\" AND device:{}".format(tag.label, tag.value, device_id)
                          tagmr = tspb.TagMatchRequestV2(query=query, workspace_id=workspace_id, topology_studio_request=True)
                          tagmresp =  tsclient.GetTagMatchesV2(tagmr)
                      except:
                          continue
                      else:
                          for match in tagmresp.matches:
                              if match.device.device_id == device_id:
                                  setattr(switch, labels_to_fields[ tag.label ], tag.value)
                                  break

              switch.id = device_id
              return switch

          vlan_based_mac_vrf_attribute_formats = vlanBasedMacVrfAttributeFormats
          vlan_bundle_mac_vrf_attribute_formats = vlanBundleMacVrfAttributeFormats
          evpn_attribute_formats = evpnvrfAttributeFormats
          vrf_attribute_formats = vrfAttributeFormats
          vpws_attribute_formats = vpwsVrfAttributeFormats
          vrfs = {}
          vlans = {}
          vlan_aware_bundles = {}
          l3vrfs = {}
          l3vlans = {}
          l3vrfs = {}
          l3vlans = {}
          dvrfs = {}
          dvlans = {}
          vpwsvrfs = {}
          vpwspp = {}
          evpnrdindex = 1
          l3rdindex = 1000
          vpwsrdindex = 2000
          for tenant in customers:
              for vrf in tenant["vrfs"]:
                  if vrf["vlans"]:
                      for vlan in vrf["vlans"]:
                          rdrtVlan = vlan
                          vrfs[vrf["name"]] = {
                              "l3vpn": False,
                              "vpws": False,
                              "vlan": rdrtVlan['vlanId'],
                              "rdrt": evpnrdindex,
                              "vni": vrf["vni"],
                              "route_distinguisher": evpn_attribute_formats["vrfRouteDistinguisherFormat"],
                              "route_target": evpn_attribute_formats["vrfRouteTargetFormat"]
                          }
                      if vrf["overrideVariables"]["routeDistinguisher"] is not None and vrf["overrideVariables"]["routeDistinguisher"].strip() != "":
                          vrfs[vrf["name"]]["route_distinguisher"] = vrf["overrideVariables"]["routeDistinguisher"]
                      if vrf["overrideVariables"]["routeTarget"] is not None and vrf["overrideVariables"]["routeTarget"].strip() != "":
                          vrfs[vrf["name"]]["route_target"] = vrf["overrideVariables"]["routeTarget"]
                      for vlan in vrf["vlans"]:
                          vIP = vlan["sviIpAddresses"]["sviVirtualIpAddress"]
                          vNet = ""
                          if vIP:
                              vIP = ipaddress.IPv4Interface(vIP)
                              vNet = str(vIP.network)
                          vlans[vlan["vlanId"]] = {
                              "name": vlan["name"],
                              "vrf": vlan["vrf"],
                              "vNet": vNet,
                              "svi_ip_addresses": vlan["sviIpAddresses"],
                              "secondary_ip_addresses": vlan["evpnsecondaryIpAddresses"],
                              "interface": vlan["interface"],
                              "multihoming": vlan["evpnmultihoming"],
                              "evpn_member_switches": vlan["switches"],
                              "route_distinguisher": vlan_based_mac_vrf_attribute_formats["macVrfRouteDistinguisherFormat"],
                              "route_target": vlan_based_mac_vrf_attribute_formats["macVrfRouteTargetFormat"],
                              "static_routes": {},
                              "peer_groups": {},
                              "prefix_lists": {},
                              "as_path_lists": {}
                          }
                          if vlan["estaticRoutes"]:
                              vlans[vlan["vlanId"]]["static_routes"] = vlan["estaticRoutes"]
                          if vlan["evpnpeerGroups"]:
                              vlans[vlan["vlanId"]]["peer_groups"] = vlan["evpnpeerGroups"]
                          if vlan["prefixList"]:
                              vlans[vlan["vlanId"]]["prefix_lists"] = vlan["prefixList"]
                          if vlan["asPathList"]:
                              vlans[vlan["vlanId"]]["as_path_lists"] = vlan["asPathList"]
                          if vlan["overrideVariables"]["routeDistinguisher"] is not None and vlan["overrideVariables"]["routeDistinguisher"].strip() != "":
                              vlans[vlan["vlanId"]]["route_distinguisher"] = vlan["overrideVariables"]["routeDistinguisher"]
                          if vlan["overrideVariables"]["routeTarget"] is not None and vlan["overrideVariables"]["routeTarget"].strip() != "":
                              vlans[vlan["vlanId"]]["route_target"] = vlan["overrideVariables"]["routeTarget"]
                      for vlan_aware_bundle in vrf["vlanAwareBundles"]:
                          vlan_range = string_to_list(vlan_aware_bundle["vlanRange"])
                          vlan_range = list_compress(vlan_range)
                          vlan_aware_bundles[ vlan_aware_bundle["name"] ] = {
                              "vlan_range": vlan_range,
                              "route_distinguisher": vlan_bundle_mac_vrf_attribute_formats["macVrfRouteDistinguisherFormat"],
                              "route_target": vlan_bundle_mac_vrf_attribute_formats["macVrfRouteTargetFormat"]
                          }
                          if vlan_aware_bundle["overrideVariables"]["routeDistinguisher"] is not None and vlan_aware_bundle["overrideVariables"]["routeDistinguisher"].strip() != "":
                              vlan_aware_bundles[ vlan_aware_bundle["name"] ]["route_distinguisher"] = vlan_aware_bundle["overrideVariables"]["routeDistinguisher"]
                          if vlan_aware_bundle["overrideVariables"]["routeTarget"] is not None and vlan_aware_bundle["overrideVariables"]["routeTarget"].strip() != "":
                              vlan_aware_bundles[ vlan_aware_bundle["name"] ]["route_target"] = vlan_aware_bundle["overrideVariables"]["routeTarget"]
                      evpnrdindex = evpnrdindex + 1

              for vrf in tenant["l3vrfs"]:
                  if [vrf["deviceHostname"].resolve()["deviceGroup"]]:
                      l3vrfs[vrf["l3vpnname"]] = {
                          "l3vpn": True,
                          "vpws": False,
                          "rdrt": l3rdindex,
                          "vlan": "",
                          "route_distinguisher": vrf_attribute_formats["vrfRouteDistinguisherFormat"],
                          "route_target": vrf_attribute_formats["vrfRouteTargetFormat"]
                      }
                      if vrf["overrideVariables"]["routeDistinguisher"] is not None and vrf["overrideVariables"]["routeDistinguisher"].strip() != "":
                          l3vrfs[vrf["l3vpnname"]]["route_distinguisher"] = vrf["overrideVariables"]["routeDistinguisher"]
                      if vrf["overrideVariables"]["routeTarget"] is not None and vrf["overrideVariables"]["routeTarget"].strip() != "":
                          l3vrfs[vrf["l3vpnname"]]["route_target"] = vrf["overrideVariables"]["routeTarget"]
                      for device in [vrf["deviceHostname"].resolve()["deviceGroup"]]:
                          for vlan in device["vlans"]:
                              l3vrfs[vrf["l3vpnname"]]["vlan"] = vlan["vlanId"]
                              vIP = vlan["sviIpAddresses"]["sviVirtualIpAddress"]
                              vNet = ""
                              if vIP:
                                  vIP = ipaddress.IPv4Interface(vIP)
                                  vNet = str(vIP.network)
                              l3vlans[vlan["vlanId"]] = {
                                  "name": vlan["vlanname"],
                                  "interface": vlan["l3vpninterface"],
                                  "vrf": vrf["l3vpnname"],
                                  "vNet": vNet,
                                  "svi_ip_addresses": vlan["sviIpAddresses"],
                                  "secondary_ip_addresses": vlan["l3vpnsecondaryIpAddresses"],
                                  "l3vpn_member_switches": vrf["deviceHostname"],
                                  "route_distinguisher": vlan_based_mac_vrf_attribute_formats["macVrfRouteDistinguisherFormat"],
                                  "route_target": vlan_based_mac_vrf_attribute_formats["macVrfRouteTargetFormat"],
                                  "static_routes": device["l3staticRoutes"],
                                  "peer_groups": device["l3vpnpeerGroups"],
                                  "prefix_lists": device["prefixList"],
                                  "as_path_lists": device["asPathList"]
                          }
                          if device["overrideVariables"]["routeDistinguisher"] is not None and device["overrideVariables"]["routeDistinguisher"].strip() != "":
                              l3vlans[device["hostname"]]["route_distinguisher"] = device["overrideVariables"]["routeDistinguisher"]
                          if device["overrideVariables"]["routeTarget"] is not None and device["overrideVariables"]["routeTarget"].strip() != "":
                              l3vlans[device["hostname"]]["route_target"] = device["overrideVariables"]["routeTarget"]

                  l3rdindex = l3rdindex + 1

              for vrf in tenant["vpws"]:
                  if [vrf["switches"].resolve()["switch"]]:
                      vpwsvrfs[vrf["vpwsName"]] = {
                          "l3vpn": False,
                          "vpws": True,
                          "rdrt": vpwsrdindex,
                          "route_distinguisher": vpws_attribute_formats["vrfRouteDistinguisherFormat"],
                          "route_target": vpws_attribute_formats["vrfRouteTargetFormat"]
                      }
                      if vrf["overrideVariables"]["routeDistinguisher"] is not None and vrf["overrideVariables"]["routeDistinguisher"].strip() != "":
                          vpwsvrfs[vrf["vpwsName"]]["route_distinguisher"] = vrf["overrideVariables"]["routeDistinguisher"]
                      if vrf["overrideVariables"]["routeTarget"] is not None and vrf["overrideVariables"]["routeTarget"].strip() != "":
                          vpwsvrfs[vrf["vpwsName"]]["route_target"] = vrf["overrideVariables"]["routeTarget"]
                  if vrf["patchPanel"]:
                      vpwspp[vrf["vpwsName"]] = {
                          "patch_panel": vrf["patchPanel"],
                          "vrf": vrf["vpwsName"],
                          "multihoming": vrf["vpwsmultihoming"],
                          "member_switches": vrf["switches"]
                      }

                  vpwsrdindex = vpwsrdindex + 1

          switch = get_switch_details(my_device_id)

          switch_evpnvrfs = {}
          switch_evpnvlans = {}
          switch_evpnvlan_bundles = {}

          for vlan, vlan_details in vlans.items():

              if vlan_details["evpn_member_switches"].resolve()["switch"]["hostName"].resolve()["apply"] == True:
                  switch_evpnvlans[vlan] = vlan_details
                  if vlan_details.get("vrf") is not None and vlan_details["vrf"].strip() not in ["", "None"]:
                      switch_evpnvrfs[ vlan_details["vrf"] ] = vrfs[ vlan_details["vrf"] ]
                  for bundle, bundle_details in vlan_aware_bundles.items():
                      if vlan in string_to_list(bundle_details["vlan_range"]):
                          switch_evpnvlan_bundles[bundle] = bundle_details
                          break

          if len(switch_evpnvlans) > 0:
              switch.set_config_params_via_tags()
              switch.configure_evpnvrfs(switch_evpnvrfs)
              switch.configure_evpnvlans(switch_evpnvlans, switch_evpnvlan_bundles)
              config = switch.config
          else:
              config = {}

          switch_l3vrfs = {}
          switch_l3vlans = {}
          for vlan, vlan_details in l3vlans.items():
              if vlan_details["l3vpn_member_switches"]:
                  switch_l3vlans[vlan] = vlan_details
                  if vlan_details.get("vrf") is not None and vlan_details["vrf"].strip() not in ["", "None"]:
                      switch_l3vrfs[ vlan_details["vrf"] ] = l3vrfs[ vlan_details["vrf"] ]

          if len(switch_l3vlans) > 0:
              switch.set_config_params_via_tags()
              switch.configure_l3vrfs(switch_l3vrfs)
              switch.configure_l3vlans(switch_l3vlans)
              config = switch.config

          switch_vpwsvrfs = {}
          switch_vpwspp = {}
          for pp, pp_details in vpwspp.items():
              if pp_details["member_switches"].resolve()["switch"]["interface"]:
                  switch_vpwspp[pp] = pp_details
                  if pp_details.get("vrf") is not None and pp_details["vrf"].strip() not in ["", "None"]:
                      switch_vpwsvrfs[ pp_details["vrf"] ] = vpwsvrfs[ pp_details["vrf"] ]

          if len(switch_vpwspp) > 0:
              switch.set_config_params_via_tags()
              switch.configure_vpwsvrfs(switch_vpwsvrfs)
              switch.configure_vpwspp(switch_vpwspp)
              config = switch.config

          %>
          ##${ switch_evpnvrfs }
          ##${ switch_evpnvlans }
          ##${ switch_l3vrfs }
          ##${ switch_l3vlans }
          ##${ switch_vpwsvrfs }
          ##${ switch_vpwspp }
          ##${config["patch_panel"]}
          ## ---- VLANS --------##
          %   if config.get("vlans") is not None:
          %     for vlan in natural_sort(config.get("vlans")):
          %       if config.get("vlans")[vlan].get("interface") is None:
          vlan ${ vlan }
          %          if config.get("vlans")[vlan].get("name") is not None:
          name ${ config.get("vlans")[vlan].get("name") }
          %          endif
          %          if config.get("vlans")[vlan].get("state") is not None:
          state ${ config.get("vlans")[vlan].get("state") }
          %          endif
          %          if config.get("vlans")[vlan].get("trunk_groups") is not None:
          %               for trunk_group in config.get("vlans")[vlan].get("trunk_groups"):
          trunk group ${ trunk_group }
          %               endfor
          %          endif
          !
          %       endif
          %     endfor
          %   endif

          ## ---- VPWS -----##
          %   if config.get("patch_panels") is not None:
          %     for vrf in config.get("patch_panels"):
          <%
           myMHconfig = 0
           index = 0
           for i in config["patch_panels"][vrf]["multihoming"]:
             if i["multihomingname"] == config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["esName"]:
               myMHconfig = index
               break
             index = index + 1
          %>
          %       for patch_panel in config["patch_panels"][vrf]["patch_panel"]:
          patch panel
          patch ${vrf}-${patch_panel["patchName"]}
          %           if config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["channelGroup"]:
          connector 1 interface Port-Channel ${config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["channelGroup"]}
          %           else:
          connector 1 interface ${config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["interface"]}
          %           endif
          connector 2 pseudowire bgp vpws ${ vrf} pseudowire ${patch_panel["pseudowireName"]}
          !
          %       endfor
          %     endfor
          %   endif
          %   if config.get("patch_panels") is not None:
          %     for vrf in config.get("patch_panels"):
          %         for patch_panel in config["patch_panels"][vrf]["patch_panel"]:
                      <%subint = config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["interface"]%>
                      <%result = subint.find('.')%>
          %           if result != -1:
                     <% splitInt = config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["interface"].split(".")%>
          interface ${splitInt[0]}
          no switchport
          no switchport mode
          interface ${config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["interface"]}
          description ${vrf}-${patch_panel["patchName"]}
          encapsulation dot1q vlan ${splitInt[1]}
          %           else:
          %             if config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["channelGroup"]:
          interface ${config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["interface"]}
          no switchport
          no switchport mode
          %               if config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["esName"]:
          %                 if config["patch_panels"][vrf]["multihoming"][myMHconfig]["lacpSysId"]:
          channel-group ${config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["channelGroup"]} mode active
          %                 else:
          channel-group ${config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["channelGroup"]} mode on
          %                 endif
          %               endif
          !
          interface Port-Channel ${config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["channelGroup"]}
          description ${vrf}-${patch_panel["patchName"]}
          no switchport
          no switchport
          no switchport mode
          !
          %               if config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["esName"]:
          evpn ethernet-segment
          redundancy all-active
          identifier ${config["patch_panels"][vrf]["multihoming"][myMHconfig]["esi"]}
          route-target import ${config["patch_panels"][vrf]["multihoming"][myMHconfig]["rt"]}
          !
          %                 if config["patch_panels"][vrf]["multihoming"][myMHconfig]["lacpSysId"]:
          lacp system-id ${config["patch_panels"][vrf]["multihoming"][myMHconfig]["lacpSysId"]}
          %                 endif
          %               endif
          %             else:
          interface ${config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["interface"]}
          description ${vrf}-${patch_panel["patchName"]}
          no switchport
          no switchport mode
          %              endif
          %           endif
          %         endfor
          !
          !
          %     endfor
          %   endif

          ## ---- EVPN MULTIHOMING -----##
          %if config.get("vrfs") is not None and config["vrfs"].keys():
          %  for vrf in natural_sort(config["vrfs"].keys()):
          %    if config["router_bgp"]["vrfs"][vrf]["vpws"] != True and config["router_bgp"]["vrfs"][vrf]["l3vpn"] != True:
          %      for vlan in config.get("vlans"):
          %        if config["vlans"][vlan]["member_switches"].resolve(my_device_id)["switch"]["esName"]:
          <%
                      myMHconfig = 0
                      index = 0
                      for i in config["vlans"][vlan]["multihoming"]:
                         if i["multihomingname"] == config["vlans"][vlan]["member_switches"].resolve(my_device_id)["switch"]["esName"]:
                           myMHconfig = index
                           break
                      index = index + 1
          %>
          %        endif
          %      endfor

          %      for vlan in config.get("vlans"):
          %        if config["vlans"][vlan]["member_switches"].resolve(my_device_id)["switch"]["esName"]:
                      <%subint = config["vlans"][vlan]["member_switches"].resolve(my_device_id)["switch"]["interface"]%>
                      <%result = subint.find('.')%>
          %           if result != -1:
                      <% splitInt = config["vlans"][vlan]["member_switches"].resolve(my_device_id)["switch"]["interface"].split(".")%>
          interface ${splitInt[0]}
          interface ${config["vlans"][vlan]["member_switches"].resolve(my_device_id)["switch"]["interface"]}
          description evpn-multihoming
          encapsulation dot1q vlan ${splitInt[1]}
          %           else:
          %             if config["vlans"][vlan]["member_switches"].resolve(my_device_id)["switch"]["channelGroup"]:
          interface ${config["vlans"][vlan]["member_switches"].resolve(my_device_id)["switch"]["interface"]}
          %               if config["vlans"][vlan]["member_switches"].resolve(my_device_id)["switch"]["esName"]:
          %                 if config["vlans"][vlan]["multihoming"][myMHconfig]["lacpSysId"]:
          channel-group ${config["vlans"][vlan]["member_switches"].resolve(my_device_id)["switch"]["channelGroup"]} mode active
          %                 else:
          channel-group ${config["vlans"][vlan]["member_switches"].resolve(my_device_id)["switch"]["channelGroup"]} mode on
          %                 endif
          %               endif
          !
          interface Port-Channel ${config["vlans"][vlan]["member_switches"].resolve(my_device_id)["switch"]["channelGroup"]}
          description evpn-multihoming
          !
          %               if config["vlans"][vlan]["member_switches"].resolve(my_device_id)["switch"]["esName"]:
          evpn ethernet-segment
          identifier ${config["vlans"][vlan]["multihoming"][myMHconfig]["esi"]}
          route-target import ${config["vlans"][vlan]["multihoming"][myMHconfig]["rt"]}
          !
          %                 if config["vlans"][vlan]["multihoming"][myMHconfig]["lacpSysId"]:
          lacp system-id ${config["vlans"][vlan]["multihoming"][myMHconfig]["lacpSysId"]}
          %                 endif
          %               endif
          %             else:
          interface ${config["vlans"][vlan]["member_switches"].resolve(my_device_id)["switch"]["interface"]}
          description evpn-multihoming
          %              endif
          %           endif
          !
          %        endif
          %      endfor
          %    endif
          %  endfor
          %endif
          ## ---- ROUTING INSTANCE --------##
          % if config.get("vrfs") is not None and config["vrfs"].keys():
          %   for vrf in natural_sort(config["vrfs"].keys()):
          %      if config["router_bgp"]["vrfs"][vrf]["vpws"] != True:
          vrf instance ${ vrf }
          %          if config["vrfs"][vrf].get("description"):
          description ${ config["vrfs"][vrf]["description"] }
          %         endif
          %      endif
          !
          %   endfor

          ## ---- PC INTERFACES --------##
          % if config.get("port_channel_interfaces") is not None:
          %   for port_channel_interface in natural_sort(config["port_channel_interfaces"].keys()):
          interface ${ port_channel_interface }
          %     if config["port_channel_interfaces"][port_channel_interface].get("description") is not None:
          description ${ config["port_channel_interfaces"][port_channel_interface]["description"] }
          %     endif
          %     if config["port_channel_interfaces"][port_channel_interface].get("shutdown") == True:
          shutdown
          %     elif config["port_channel_interfaces"][port_channel_interface].get("shutdown") == False:
          no shutdown
          %     endif
          %     if config["port_channel_interfaces"][port_channel_interface].get("mtu") is not None:
          mtu ${ config["port_channel_interfaces"][port_channel_interface]["mtu"] }
          %     endif
          %     if config["port_channel_interfaces"][port_channel_interface].get("type") is not None and config["port_channel_interfaces"][port_channel_interface].get("type") == "routed":
          no switchport
          %     else:
          switchport
          %     endif
          %     if config["port_channel_interfaces"][port_channel_interface].get("mode") is not None and config["port_channel_interfaces"][port_channel_interface].get("mode") == "access":
          switchport access vlan ${ config["port_channel_interfaces"][port_channel_interface]["vlans"] }
          %     endif %}
          %     if config["port_channel_interfaces"][port_channel_interface].get("mode") is not None and config["port_channel_interfaces"][port_channel_interface].get("mode") == "trunk":
          switchport mode ${ config["port_channel_interfaces"][port_channel_interface]["mode"] }
          %     endif
          %     if config["port_channel_interfaces"][port_channel_interface].get("trunk_groups") is not None:
          %       for trunk_group in config["port_channel_interfaces"][port_channel_interface]["trunk_groups"]:
          switchport trunk group ${ trunk_group }
          %       endfor
          %     endif
          !
          %   endfor
          % endif

          ## ---- LOOPBACK INTERFACES --------##
          %if config.get("loopback_interfaces") is not None:
          %   for loopback_interface in natural_sort(config.get("loopback_interfaces").keys()):
          interface ${ loopback_interface }
          %       if config["loopback_interfaces"][loopback_interface].get("description") is not None:
          description ${ config["loopback_interfaces"][loopback_interface].get("description") }
          %       endif
          %       if config["loopback_interfaces"][loopback_interface].get("shutdown") is not None and config["loopback_interfaces"][loopback_interface].get("shutdown") == True:
          shutdown
          %       elif config["loopback_interfaces"][loopback_interface].get("shutdown") is not None and config["loopback_interfaces"][loopback_interface].get("shutdown") == False:
          no shutdown
          %       endif
          %       if config["loopback_interfaces"][loopback_interface].get("vrf") is not None:
          vrf ${ config["loopback_interfaces"][loopback_interface].get("vrf") }
          %       endif
          %       if config["loopback_interfaces"][loopback_interface].get("ip_address") is not None:
          ip address ${ config["loopback_interfaces"][loopback_interface].get("ip_address") }
          %           if config["loopback_interfaces"][loopback_interface].get("ip_address_secondaries") is not None:
          %               for ip_address_secondary in config["loopback_interfaces"][loopback_interface].get("ip_address_secondaries"):
          ip address ${ ip_address_secondary } secondary
          %               endfor
          %           endif
          %       endif
          !
          %   endfor
          %endif

          ## ---- IP INTERFACES --------##
          % if config.get("vlan_interfaces") is not None:
          %   for vlan_interface in natural_sort(config.get("vlan_interfaces").keys()):
          %        if config.get("vlan_interfaces")[vlan_interface].get("interface") is not None:
                      <%subint = config.get("vlan_interfaces")[vlan_interface].get("interface")%>
                      <%result = subint.find('.')%>
                     %if result != -1:
                      <% vlanid = vlan_interface.strip('Vlan') %>
                     <% splitInt = config.get("vlan_interfaces")[vlan_interface].get("interface").split(".")%>
          interface ${splitInt[0]}
          no switchport
          interface ${ config.get("vlan_interfaces")[vlan_interface].get("interface")}
          encapsulation dot1q vlan ${vlanid}
                     %else:
          interface ${ config.get("vlan_interfaces")[vlan_interface].get("interface")}
          no switchport
                     %endif
          %        else:
          interface ${ vlan_interface }
          no autostate
          %        endif
          %        if config.get("vlan_interfaces")[vlan_interface].get("description") is not None:
          description ${ config.get("vlan_interfaces")[vlan_interface].get("description") }
          %        endif
          %        if config.get("vlan_interfaces")[vlan_interface].get("shutdown") == True:
          shutdown
          %        elif config.get("vlan_interfaces")[vlan_interface].get("shutdown") == False:
          no shutdown
          %        endif
          %       if config.get("vlan_interfaces")[vlan_interface].get("mtu") is not None:
          mtu ${ config.get("vlan_interfaces")[vlan_interface].get("mtu") }
          %       endif
          %       if config.get("vlan_interfaces")[vlan_interface].get("vrf") is not None:
          vrf ${ config.get("vlan_interfaces")[vlan_interface].get("vrf") }
          %       endif
          %       if config.get("vlan_interfaces")[vlan_interface].get("ip_address") is not None:
          ip address ${ config.get("vlan_interfaces")[vlan_interface].get("ip_address") }
          %         if config.get("vlan_interfaces")[vlan_interface].get("ip_address_secondaries") is not None:
          %           for secondaryip in config.get("vlan_interfaces")[vlan_interface].get("ip_address_secondaries"):
          ip address ${ secondaryip["secondaryIpAddress"] } secondary
          %           endfor
          %         endif
          %       endif
          %       if config.get("vlan_interfaces")[vlan_interface].get("ip_virtual_router_address") is not None:
          ip virtual-router address ${ config.get("vlan_interfaces")[vlan_interface].get("ip_virtual_router_address") }
          %       endif
          %       if config.get("vlan_interfaces")[vlan_interface].get("ip_helpers") is not None:
          %         for ip_helper in config.get("vlan_interfaces")[vlan_interface].get("ip_helpers").keys():
          <%         ip_helper_cli = "ip helper-address " + ip_helper %>
          %          if config.get("vlan_interfaces")[vlan_interface]["ip_helpers"][ip_helper].get("vrf") is not None:
          <%            ip_helper_cli = ip_helper_cli + " vrf " + config.get("vlan_interfaces")[vlan_interface]["ip_helpers"][ip_helper].get("vrf") %>
          %          endif
          %          if config.get("vlan_interfaces")[vlan_interface]["ip_helpers"][ip_helper].get("source_interface") is not None:
          <%            ip_helper_cli = ip_helper_cli + " source-interface " + config.get("vlan_interfaces")[vlan_interface]["ip_helpers"][ip_helper].get("source_interface") %>
          %           endif %}
          ${ ip_helper_cli }
          %         endfor
          %        endif
          !
          !
          ## ---- VIRTUAL INTERFACES --------##
          %        if config.get("vlan_interfaces")[vlan_interface].get("ip_virtual_router_address") is not None:
          ip virtual-router mac-address 00:1c:73:00:00:99
          %         if config.get("vlan_interfaces")[vlan_interface].get("vrf") is not None:
          %           if config.get("vlan_interfaces")[vlan_interface].get("interface") is not None:
          ip route vrf ${ config.get("vlan_interfaces")[vlan_interface].get("vrf") } ${ config.get("vlan_interfaces")[vlan_interface].get("ip_virtual_router_prefix") } ${ config.get("vlan_interfaces")[vlan_interface].get("interface")}
          %           else:
          ip route vrf ${ config.get("vlan_interfaces")[vlan_interface].get("vrf") } ${ config.get("vlan_interfaces")[vlan_interface].get("ip_virtual_router_prefix") } ${ vlan_interface }
          %           endif
          %         else:
          %           if config.get("vlan_interfaces")[vlan_interface].get("interface") is not None:
          ip route ${ config.get("vlan_interfaces")[vlan_interface].get("ip_virtual_router_prefix") } ${ config.get("vlan_interfaces")[vlan_interface].get("interface")}
          %           else:
          ip route ${ config.get("vlan_interfaces")[vlan_interface].get("ip_virtual_router_prefix") } ${ vlan_interface }
          %           endif
          %         endif
          !
          %      endif
          %   endfor
          % endif
          ## ---- VRF VNI -----------##
          % if config.get("vrfs"):
          %   for vrf in config.get("vrfs"):
          %     if config["vrfs"][vrf]["vni"]:
          interface vxlan1
          vxlan vrf ${vrf} vni ${ config["vrfs"][vrf]["vni"]}
          %     endif
          %   endfor
          %endif
          ## ---- IP ROUTING --------##
          %   for vrf in config.get("vrfs"):
          %       if config["router_bgp"]["vrfs"][vrf]["vpws"] != True:
          ip routing vrf ${ vrf }
          %       endif
          %   endfor
          !
          % endif
          !
          ## ---- STATIC ROUTING --------##
          % if config.get("router_bgp") is not None:
          %    if config["router_bgp"].get("vrfs") is not None:
          %        for vrf in config["router_bgp"]["vrfs"].keys():
          %          if config.get("vlans") is not None:
          %            for vlan in natural_sort(config.get("vlans")):
          %              if config.get("vlans")[vlan].get("static_routes") is not None:
          %                for prefix in config.get("vlans")[vlan].get("static_routes"):
          %                  if prefix["srname"]:
          ip route vrf  ${ vrf } ${ prefix["prefix"] }  ${ prefix["nextHop"] } name ${ prefix["srname"] }
          %                  else:
          ip route vrf  ${ vrf } ${ prefix["prefix"] }  ${ prefix["nextHop"] }
          %                  endif
          %                endfor
          %              endif
          %            endfor
          %          endif
          %        endfor
          %     endif
          % endif
          !
          ## ---- AS PATH LISTS --------##
          %if config.get("router_bgp") is not None:
          %  if config["router_bgp"].get("vrfs") is not None:
          %    for vrf in config["router_bgp"]["vrfs"].keys():
          %      if config.get("vlans") is not None:
          %        for vlan in natural_sort(config.get("vlans")):
          %          if config.get("vlans")[vlan].get("as_path_lists") is not None:
          %            for aspath_list in config.get("vlans")[vlan].get("as_path_lists"):
          ip as-path access-list ${ aspath_list["asPathListName"] } ${ aspath_list["permitDeny"] } ${ aspath_list["regEx"] }
          %            endfor
          %          endif
          %        endfor
          %      endif
          %    endfor
          %  endif
          %endif
          !
          ## ---- PREFIX LISTS --------##
          % if config.get("router_bgp") is not None:
          %    if config["router_bgp"].get("vrfs") is not None:
          %        for vrf in config["router_bgp"]["vrfs"].keys():
          %          if config.get("vlans") is not None:
          %            for vlan in natural_sort(config.get("vlans")):
          %              if config.get("vlans")[vlan].get("prefix_lists") is not None:
          %                for prefix_list in config.get("vlans")[vlan].get("prefix_lists"):
          ip prefix-list ${ prefix_list["prefixListName"] }
          %                  for seq in prefix_list["seqNumbers"]:
          %                    if seq["prefixLength"] != "exact-route":
          seq ${seq["seqNumber"]} ${ seq["permitDeny"] } ${ seq["prefix"] } ${ seq["prefixLength"]} ${ seq["maskLength"]}
          %                    else:
          seq ${seq["seqNumber"]} ${ seq["permitDeny"] } ${ seq["prefix"] }
          %                    endif
          %                  endfor
          %               endfor
          %           endif
          %        endfor
          %     endif
          %        endfor
          %     endif
          % endif
          !
          ## ---- ROUTE MAP IN --------##
          %if config.get("router_bgp") is not None:
          %  if config["router_bgp"].get("vrfs") is not None:
          %    for vrf in config["router_bgp"]["vrfs"].keys():
          %      if config.get("vlans") is not None:
          %        for vlan in natural_sort(config.get("vlans")):
          %          if config.get("vlans")[vlan].get("peer_groups") is not None:
          %            for peer_group in config.get("vlans")[vlan].get("peer_groups"):
          %              if peer_group["routeMapIn"]:
          %                for routemap in peer_group["routeMapIn"]:
          route-map  ${ peer_group["peerIp"] }-in ${ routemap["permitDeny"] } ${ routemap["seqNumber"] }
          %                  if routemap["prefixList"]:
          match ip address prefix-list ${ routemap["prefixList"]}
          %                  endif
          %                  if routemap["asPathList"]:
          match as-path ${ routemap["asPathList"]}
          %                  endif
          %                  if routemap["community"]:
          match community ${ routemap["community"]}
          %                  endif
          %                  if routemap["setCommunity"]:
          set community ${ routemap["setCommunity"]}
          %                  endif
          %                  if routemap["localPref"]:
          set local-preference ${ routemap["localPref"]}
          %                  endif
          %                  if routemap["weight"]:
          set weight ${ routemap["weight"]}
          %                  endif
          %                 if routemap["prependRepeat"]:
          set as-path prepend auto repeat ${ routemap["prependRepeat"]}
          %                 endif
          %               endfor
          %             endif
          %             if peer_group["routeMapOut"]:
          %               for routemap in peer_group["routeMapOut"]:
          route-map  ${ peer_group["peerIp"] }-out ${ routemap["permitDeny"]} ${ routemap[ "seqNumber"]}
          %                 if routemap["prefixList"]:
          match ip address prefix-list ${ routemap["prefixList"]}
          %                 endif
          %                 if routemap["asPathList"]:
          match as-path ${ routemap["asPathList"]}
          %                 endif
          %                 if routemap["community"]:
          match community ${ routemap["community"]}
          %                 endif
          %                 if routemap["setCommunity"]:
          set community ${ routemap["setCommunity"]}
          %                 endif
          %                 if routemap["prependRepeat"]:
          set as-path prepend auto repeat ${ routemap["prependRepeat"]}
          %                 endif
          %               endfor
          %             endif
          %           endfor
          %         endif
          %       endfor
          %     endif
          %  endfor
          %  endif
          %endif
          !
          ## ---- ROUTE MAP PEERGROUP --------##
          % if config.get("router_bgp") is not None:
          %    if config["router_bgp"].get("vrfs") is not None:
          %        for vrf in config["router_bgp"]["vrfs"].keys():
          %           if config["router_bgp"]["vrfs"][vrf].get("peer_groups"):
          %               for peergroup in config["router_bgp"]["vrfs"][vrf].get("peer_groups"):
          %                   if peergroup["pgrouteMapIn"]:
          %                       for routemap in peergroup["pgrouteMapIn"]:
          route-map  ${ peergroup["peerGroupName"] }-in ${ routemap["permitDeny"] } ${ routemap["seqNumber"] }
          %                            if routemap["prefixList"]:
          match ip address prefix-list ${ routemap["prefixList"]}
          %                            endif
          %                            if routemap["asPathList"]:
          match as-path ${ routemap["asPathList"]}
          %                            endif
          %                            if routemap["community"]:
          match community ${ routemap["community"]}
          %                            endif
          %                            if routemap["setCommunity"]:
          set community ${ routemap["setCommunity"]}
          %                            endif
          %                            if routemap["localPref"]:
          set local-preference ${ routemap["localPref"]}
          %                            endif
          %                            if routemap["weight"]:
          set weight ${ routemap["weight"]}
          %                            endif
          %                            if routemap["prependRepeat"]:
          set as-path prepend auto repeat ${ routemap["prependRepeat"]}
          %                            endif
          %                       endfor
          %                   endif
          %                   if peergroup["pgrouteMapOut"]:
          %                       for routemap in peergroup["pgrouteMapOut"]:
          route-map  ${ peergroup["peerGroupName"] }-out ${ routemap["permitDeny"]} ${ routemap[ "seqNumber"]}
          %                            if routemap["prefixList"]:
          match ip address prefix-list ${ routemap["prefixList"]}
          %                            endif
          %                            if routemap["asPathList"]:
          match as-path ${ routemap["asPathList"]}
          %                            endif
          %                            if routemap["community"]:
          match community ${ routemap["community"]}
          %                            endif
          %                            if routemap["setCommunity"]:
          set community ${ routemap["setCommunity"]}
          %                            endif
          %                            if routemap["prependRepeat"]:
          set as-path prepend auto repeat ${ routemap["prependRepeat"]}
          %                            endif
          %                       endfor
          %                   endif
          %                endfor
          %            endif
          %        endfor
          %    endif
          %endif
          !

          ## ---- ROUTER BGP --------##
          %   if config["router_bgp"].get("as") is not None:
          router bgp ${ config["router_bgp"]["as"] }

          %     if config["router_bgp"].get("router_id") is not None:
          router-id ${ config["router_bgp"]["router_id"] }
          %     endif
          %     if config["router_bgp"].get("bgp_defaults") is not None:
          %       for bgp_default in config["router_bgp"]["bgp_defaults"]:
          ${ bgp_default }
          %       endfor
          %     endif
          %     if config["router_bgp"].get("vlans") is not None:
          %       for vlan in config["router_bgp"]["vlans"]:
          !
          vlan ${ vlan }
          %         if config["router_bgp"]["vlans"][vlan].get("rd") is not None:
          rd ${ config["router_bgp"]["vlans"][vlan]["rd"] }
          %         endif
          %         if config["router_bgp"]["vlans"][vlan].get("route_targets") is not None and config["router_bgp"]["vlans"][vlan]["route_targets"].get("both") is not None:
          %           for route_target in config["router_bgp"]["vlans"][vlan]["route_targets"]["both"]:
          route-target both ${ route_target }
          %           endfor
          %         endif
          %         if config["router_bgp"]["vlans"][vlan].get("route_targets") is not None and config["router_bgp"]["vlans"][vlan]["route_targets"].get("import") is not None:
          %           for route_target in config["router_bgp"]["vlans"][vlan]["route_targets"]["import"]:
          route-target import ${ route_target }
          %           endfor
          %         endif
          %         if config["router_bgp"]["vlans"][vlan].get("route_targets") is not None and config["router_bgp"]["vlans"][vlan]["route_targets"].get("export") is not None:
          %           for route_target in config["router_bgp"]["vlans"][vlan]["route_targets"]["export"]:
          route-target export ${ route_target }
          %           endfor
          %         endif
          %         if config["router_bgp"]["vlans"][vlan].get("redistribute_routes") is not None:
          %           for redistribute_route in config["router_bgp"]["vlans"][vlan]["redistribute_routes"]:
          redistribute ${ redistribute_route }
          %           endfor
          %         endif
          %       endfor
          %       if config["router_bgp"].get("vlan_aware_bundles") is not None:
          %         for vlan_aware_bundle in config["router_bgp"]["vlan_aware_bundles"].keys():
          !
          vlan-aware-bundle ${ vlan_aware_bundle }
          %           if config["router_bgp"]["vlan_aware_bundles"][vlan_aware_bundle].get("rd") is not None:
          rd ${ config["router_bgp"]["vlan_aware_bundles"][vlan_aware_bundle]["rd"] }
          %           endif
          %           if config["router_bgp"]["vlan_aware_bundles"][vlan_aware_bundle].get("route_targets") is not None and config["router_bgp"]["vlan_aware_bundles"][vlan_aware_bundle]["route_targets"].get("both") is not None:
          %             for route_target in config["router_bgp"]["vlan_aware_bundles"][vlan_aware_bundle]["route_targets"]["both"]:
          route-target both ${ route_target }
          %             endfor
          %           endif
          %           if config["router_bgp"]["vlan_aware_bundles"][vlan_aware_bundle].get("route_targets") is not None and config["router_bgp"]["vlan_aware_bundles"][vlan_aware_bundle]["route_targets"].get("import") is not None:
          %             for route_target in config["router_bgp"]["vlan_aware_bundles"][vlan_aware_bundle]["route_targets"]["import"]:
          route-target import ${ route_target }
          %             endfor
          %           endif
          %           if config["router_bgp"]["vlan_aware_bundles"][vlan_aware_bundle].get("route_targets") is not None and config["router_bgp"]["vlan_aware_bundles"][vlan_aware_bundle]["route_targets"].get("export") is not None:
          %             for route_target in config["router_bgp"]["vlan_aware_bundles"][vlan_aware_bundle]["route_targets"]["export"]:
          route-target export ${ route_target }
          %             endfor
          %           endif
          %           if config["router_bgp"]["vlan_aware_bundles"][vlan_aware_bundle].get("redistribute_routes") is not None:
          %             for redistribute_route in config["router_bgp"]["vlan_aware_bundles"][vlan_aware_bundle]["redistribute_routes"]:
          redistribute ${ redistribute_route }
          %             endfor %}
          %           endif
          %           if config["router_bgp"]["vlan_aware_bundles"][vlan_aware_bundle].get("vlan") is not None:
          vlan ${ config["router_bgp"]["vlan_aware_bundles"][vlan_aware_bundle]["vlan"] }
          %           endif
          %         endfor
          %       endif
          %     endif
          ## ----- VPWS ------##
          %     if config["router_bgp"].get("vrfs") is not None:
          %       for vrf in config["router_bgp"]["vrfs"].keys():
          %         if config["router_bgp"]["vrfs"][vrf].get("vpws") == True:
          !
          vpws ${ vrf }
          %           if config["router_bgp"]["vrfs"][vrf].get("rd") is not None:
          rd ${ config["router_bgp"]["vrfs"][vrf]["rd"] }
          %           endif
          %           if config["router_bgp"]["vrfs"][vrf].get("route_targets") is not None and config["router_bgp"]["vrfs"][vrf]["route_targets"].get("import") is not None:
          %             for address_family in config["router_bgp"]["vrfs"][vrf]["route_targets"]["import"].keys():
          %               for route_target in config["router_bgp"]["vrfs"][vrf]["route_targets"]["import"][address_family]:
          route-target import ${ address_family } ${ route_target }
          %               endfor
          %             endfor
          %           endif
          %           if config["router_bgp"]["vrfs"][vrf].get("route_targets") is not None and config["router_bgp"]["vrfs"][vrf]["route_targets"].get("export") is not None:
          %             for address_family in config["router_bgp"]["vrfs"][vrf]["route_targets"]["export"].keys():
          %               for route_target in config["router_bgp"]["vrfs"][vrf]["route_targets"]["export"][address_family]:
          route-target export ${ address_family } ${ route_target }
          %               endfor
          %             endfor
          %           endif
          mpls control-word
          !
          %           if config.get("patch_panels") is not None:
          <%rrd =  config["router_bgp"]["vrfs"][vrf]["rd"].split(":")%>
          <%intrrd = int(rrd[1]) %>
          %             for vf in config.get("patch_panels"):
          %               if vrf == vf:
          %                 if config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["eastWest"] == "EAST":
          <%index =  0 %>
          %                   for patch_panel in config["patch_panels"][vf]["patch_panel"]:
          pseudowire ${patch_panel["pseudowireName"]}
          evpn vpws id local ${intrrd + index} remote ${intrrd + 1000 + index}
          !
          <%index = index + 1 %>
          %                   endfor
          %                 elif config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]["eastWest"] == "WEST":
          <%index =  0 %>
          %                   for patch_panel in config["patch_panels"][vf]["patch_panel"]:

          pseudowire ${patch_panel["pseudowireName"]}
          evpn vpws id local ${intrrd + 1000 + index} remote ${intrrd + index}
          !
          <%index = index + 1 %>
          %                   endfor
          %                 endif
          %               endif
          %             endfor
          %           endif
          %           if config["router_bgp"]["vrfs"][vrf].get("router_id") is not None:
          router-id ${ config["router_bgp"]["vrfs"][vrf]["router_id"] }
          %           endif
          %         endif
          %       endfor
          %     endif
          %     if config["router_bgp"].get("vrfs") is not None:
          %       for vrf in config["router_bgp"]["vrfs"].keys():
          %         if config["router_bgp"]["vrfs"][vrf].get("vpws") != True:
          !
          vrf ${ vrf }
          %           if config["router_bgp"]["vrfs"][vrf].get("rd") is not None:
          rd ${ config["router_bgp"]["vrfs"][vrf]["rd"] }
          %           endif
          %           if config["router_bgp"]["vrfs"][vrf].get("route_targets") is not None and config["router_bgp"]["vrfs"][vrf]["route_targets"].get("import") is not None:
          %             for address_family in config["router_bgp"]["vrfs"][vrf]["route_targets"]["import"].keys():
          %               for route_target in config["router_bgp"]["vrfs"][vrf]["route_targets"]["import"][address_family]:
          route-target import ${ address_family } ${ route_target }
          %               endfor
          %             endfor
          %           endif
          %           if config["router_bgp"]["vrfs"][vrf].get("route_targets") is not None and config["router_bgp"]["vrfs"][vrf]["route_targets"].get("export") is not None:
          %             for address_family in config["router_bgp"]["vrfs"][vrf]["route_targets"]["export"].keys():
          %               for route_target in config["router_bgp"]["vrfs"][vrf]["route_targets"]["export"][address_family]:
          route-target export ${ address_family } ${ route_target }
          %               endfor
          %             endfor
          %           endif
          %           if config["router_bgp"]["vrfs"][vrf].get("router_id") is not None:
          router-id ${ config["router_bgp"]["vrfs"][vrf]["router_id"] }
          %           endif
          %          if config.get("vlans") is not None:
          %            for vlan in natural_sort(config.get("vlans")):
          %              if config.get("vlans")[vlan].get("peer_groups") is not None:
          %                for peer_group in config.get("vlans")[vlan].get("peer_groups"):
          %                  for neighbor in peer_group["neighbors"]:
          neighbor ${ neighbor["neighborIp"]} peer group ${ peer_group.peerIp }
          %                    if neighbor.neighborpeerAsn:
          neighbor ${ neighbor["neighborIp"]} remote-as ${neighbor.neighborpeerAsn}
          %                    endif
          %                  endfor
          neighbor ${ peer_group["peerIp"] } remote-as ${ peer_group["peerAsn"] }
          %                  if peer_group["asSettings"]["localAs"]:
          neighbor ${ peer_group.peerIp } local-as ${ peer_group["asSettings"]["localAs"] } no-prepend replace-as
          %                  endif
          %                  if peer_group["removePrivate"] == "ENABLED":
          neighbor ${ peer_group["peerIp"] } remove-private-as
          %                  endif
          %                  if peer_group["eBgpMultiHopTtl"]:
          neighbor ${ peer_group["peerIp"] } ebgp-multihop ${ peer_group["eBgpMultiHopTtl"] }
          %                  endif
          %                  if peer_group["bfd"] == "ENABLED":
          neighbor ${ peer_group["peerIp"] } bfd
          %                  endif
          %                  if peer_group["password"]:
          neighbor ${ peer_group["peerIp"] } password 0 ${ peer_group["password"] }
          %                  endif
          %                  if peer_group["nweight"]:
          neighbor ${ peer_group["peerIp"] } weight ${ peer_group["nweight"] }
          %                  endif
          %                  if peer_group["description"]:
          neighbor ${ peer_group["peerIp"] } description ${ peer_group["description"] }
          %                  endif
          %                  if peer_group["routeMapOut"]:
          %                    for name in peer_group["routeMapOut"]:
          neighbor ${ peer_group["peerIp"] } route-map ${ peer_group["peerIp"] }-out out
          %                    endfor
          %                  endif
          %                  if peer_group["routeMapIn"]:
          %                    for name in peer_group["routeMapIn"]:
          neighbor ${ peer_group["peerIp"] } route-map ${ peer_group["peerIp"] }-in in
          %                    endfor
          %                  endif
          %                  if peer_group["aggregateRoutes"]:
          %                    for prefix in peer_group["aggregateRoutes"]:
          aggregate-address ${prefix["prefix"]} summary-only
          %                    endfor
          %                  endif
          address-family  ipv4
          neighbor ${ peer_group["peerIp"] } activate
          !
          %                endfor
          %              endif
          %              if config["router_bgp"]["vrfs"][vrf].get("redistribute_routes") is not None:
          %                for redistribute_route in config["router_bgp"]["vrfs"][vrf]["redistribute_routes"].keys():
          %                  if redistribute_route == "connected":
          <%redistribute_cli = "redistribute " + redistribute_route %>
          %                  endif
          %                  if redistribute_route == "static":
          <%                 redistribute_cli = "redistribute " + redistribute_route %>
          %                  endif
          %                  if config["router_bgp"]["vrfs"][vrf]["redistribute_routes"][redistribute_route].get("route_map") is not None:
          <%redistribute_cli = redistribute_cli + " route-map " + config["router_bgp"]["vrfs"][vrf]["redistribute_routes"][redistribute_route]["route_map"] %>
          %                  endif
              ${ redistribute_cli }
          %                endfor
          %              endif
          %              if config["router_bgp"]["vrfs"][vrf].get("aggregate_addresses") is not None:
          %                for aggregate_address in config["router_bgp"]["vrfs"][vrf]["aggregate_addresses"].keys():
          <% aggregate_address_cli = "aggregate-address " + aggregate_address %>
          %                  if config["router_bgp"]["vrfs"][vrf]["aggregate_addresses"][aggregate_address].get("as_set") == True:
          <%                 aggregate_address_cli = aggregate_address_cli + " as-set" %>
          %                  endif
          %                  if config["router_bgp"]["vrfs"][vrf]["aggregate_addresses"][aggregate_address].get("summary_only") == True:
          <% aggregate_address_cli = aggregate_address_cli + " summary-only" %>
          %                  endif
          %                  if config["router_bgp"]["vrfs"][vrf]["aggregate_addresses"][aggregate_address].get("attribute_map") is not None:
          <%                  aggregate_address_cli = aggregate_address_cli + " attribute-map " + config["router_bgp"]["vrfs"][vrf]["aggregate_addresses"][aggregate_address]["attribute_map"] %>
          %                  endif
          %                  if config["router_bgp"]["vrfs"][vrf]["aggregate_addresses"][aggregate_address].get("match_map") is not None:
          <%                  aggregate_address_cli = aggregate_address_cli + " match-map " + config["router_bgp"]["vrfs"][vrf]["aggregate_addresses"][aggregate_address]["match_map"] %>
          %                  endif
          %                  if config["router_bgp"]["vrfs"][vrf]["aggregate_addresses"][aggregate_address].get("advertise_only") == True:
          <%                 aggregate_address_cli = aggregate_address_cli + " advertise-only" %>
          %                  endif
              ${ aggregate_address_cli }
          %                endfor
          %              endif
          %             endfor
          %           endif
          %         endif
          %       endfor
          %     endif
          !
          ## ---- BGP ROUTE REDISTRIBUTION --------##
          %     if dvrfbgp == True:
          %       for vrf in config["router_bgp"]["vrfs"].keys():
          %         if config["router_bgp"]["vrfs"][vrf].get("peer_groups"):
          %           for peer_group in config["router_bgp"]["vrfs"][vrf].get("peer_groups"):
          %             if peer_group["dredistribute"]["ospf"] == True:
          router ospf 1
          redistribute bgp
          %             endif
          %             if peer_group["dredistribute"]["isis"] == True:
          router isis 1
          redistribute bgp
          %             endif
          %           endfor
          %         endif
          %       endfor
          %     endif
          %   endif
      input_schema:
        fields:
          values:
            customerName:
              id: customerName
              name: name
              label: Customer Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vrfName:
              id: vrfName
              name: name
              label: EVPN Name
              description: ''
              required: true
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vlanName:
              id: vlanName
              name: name
              label: Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnVrf:
              id: evpnVrf
              name: vrf
              label: EVPN IP VRF
              description: Optional
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"vrfName"}'
            evpnApply:
              id: evpnApply
              name: apply
              label: Apply
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: false
            evpnhostName:
              id: evpnhostName
              name: hostName
              label: Host name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_RESOLVER
              resolver_props:
                base_field_id: evpnApply
                display_mode: RESOLVER_FIELD_DISPLAY_MODE_ALL
                input_mode: RESOLVER_FIELD_INPUT_MODE_SINGLE_DEVICE_TAG
                input_tag_label: device
                tag_filter_query: null
            evpndeviceesName:
              id: evpndeviceesName
              name: esName
              label: ES Name
              description: Optional
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"evpnmultihomingname"}'
            evpndeviceinterface:
              id: evpndeviceinterface
              name: interface
              label: Interface
              description: Optional. Add sub-interface or major interface.
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpndevicechannelGroup:
              id: evpndevicechannelGroup
              name: channelGroup
              label: Channel Group
              description: Optional. Add group number for a Port Channel.
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnSwitch:
              id: evpnSwitch
              name: switch
              label: Device
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - evpnhostName
                    - evpndeviceesName
                    - evpndeviceinterface
                    - evpndevicechannelGroup
            evpnSwitches:
              id: evpnSwitches
              name: switches
              label: Devices
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_RESOLVER
              resolver_props:
                base_field_id: evpnSwitch
                display_mode: RESOLVER_FIELD_DISPLAY_MODE_SPARSE
                input_mode: RESOLVER_FIELD_INPUT_MODE_MULTI_DEVICE_TAG
                input_tag_label: null
                tag_filter_query: null
            mavVrfRouteDistinguisher:
              id: mavVrfRouteDistinguisher
              name: routeDistinguisher
              label: Route Distinguisher
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            mavVrfRouteTarget:
              id: mavVrfRouteTarget
              name: routeTarget
              label: Route Target
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            mavVrfoverrideVariables:
              id: mavVrfoverrideVariables
              name: overrideVariables
              label: Override MAC VRF Attributes
              description: RD - Router-ID:X
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - mavVrfRouteDistinguisher
                    - mavVrfRouteTarget
            evpnsviVirtualIpAddress:
              id: evpnsviVirtualIpAddress
              name: sviVirtualIpAddress
              label: Virtual Router IP Prefix
              description: VARP Virtual Address
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnipPrefix:
              id: evpnipPrefix
              name: ipPrefix
              label: IP Prefix
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnsviIpAddresses:
              id: evpnsviIpAddresses
              name: sviIpAddresses
              label: IP VRF Prefix
              description: 'Optional '
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - evpnsviVirtualIpAddress
                    - evpnipPrefix
            evpnvlanId:
              id: evpnvlanId
              name: vlanId
              label: VLAN ID
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            evpnpeerIp:
              id: evpnpeerIp
              name: peerIp
              label: Peer Group Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnpeerAsn:
              id: evpnpeerAsn
              name: peerAsn
              label: Peer ASN
              description: ''
              required: true
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpndescription:
              id: evpndescription
              name: description
              label: Description
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnRmInseqNumber:
              id: evpnRmInseqNumber
              name: seqNumber
              label: Seq Number
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnRmInprefixList:
              id: evpnRmInprefixList
              name: prefixList
              label: Prefix List
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"evpnPLprefixListName"}'
            evpnRmInlocalPref:
              id: evpnRmInlocalPref
              name: localPref
              label: Local Pref
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnRmInasPathList:
              id: evpnRmInasPathList
              name: asPathList
              label: AS Path List
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"evpnAPasPathListName"}'
            evpnRmIncommunity:
              id: evpnRmIncommunity
              name: community
              label: Match Community
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnRmInsetCommunity:
              id: evpnRmInsetCommunity
              name: setCommunity
              label: Set Community
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnRmInweight:
              id: evpnRmInweight
              name: weight
              label: Weight
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnrmiasPathPrependRepeat:
              id: evpnrmiasPathPrependRepeat
              name: prependRepeat
              label: AS Path Prepend Repeat
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnrmipermitDeny:
              id: evpnrmipermitDeny
              name: permitDeny
              label: Permit Deny
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: permit
                static_options:
                  values:
                    - permit
                    - deny
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnRmInrouteMap:
              id: evpnRmInrouteMap
              name: routeMap
              label: 'Route Map '
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - evpnRmInseqNumber
                    - evpnRmInprefixList
                    - evpnRmInlocalPref
                    - evpnRmInasPathList
                    - evpnRmIncommunity
                    - evpnRmInsetCommunity
                    - evpnRmInweight
                    - evpnrmiasPathPrependRepeat
                    - evpnrmipermitDeny
            evpnRmInrouteMapIn:
              id: evpnRmInrouteMapIn
              name: routeMapIn
              label: Route Map In
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: evpnRmInrouteMap
                key: evpnRmInseqNumber
            evpnRmOutseqNumber:
              id: evpnRmOutseqNumber
              name: seqNumber
              label: Seq Number
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnRmOutprefixList:
              id: evpnRmOutprefixList
              name: prefixList
              label: Prefix List
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"evpnPLprefixListName"}'
            evpnRmOutasPathPrepend:
              id: evpnRmOutasPathPrepend
              name: prependRepeat
              label: AS Path Prepend Repeat
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnRmOutasPathList:
              id: evpnRmOutasPathList
              name: asPathList
              label: AS Path List
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"evpnAPasPathListName"}'
            evpnRmOutcommunity:
              id: evpnRmOutcommunity
              name: community
              label: Match Community
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnRmOutsetCommunity:
              id: evpnRmOutsetCommunity
              name: setCommunity
              label: Set Community
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnRmOutpermitDeny:
              id: evpnRmOutpermitDeny
              name: permitDeny
              label: Permit Deny
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: permit
                static_options:
                  values:
                    - permit
                    - deny
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnRmOutrouteMap:
              id: evpnRmOutrouteMap
              name: routeMap
              label: Route Map
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - evpnRmOutseqNumber
                    - evpnRmOutprefixList
                    - evpnRmOutasPathPrepend
                    - evpnRmOutasPathList
                    - evpnRmOutcommunity
                    - evpnRmOutsetCommunity
                    - evpnRmOutpermitDeny
            evpnRmOutrouteMapOut:
              id: evpnRmOutrouteMapOut
              name: routeMapOut
              label: Route Map Out
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: evpnRmOutrouteMap
                key: evpnRmOutseqNumber
            evpnlocalAs:
              id: evpnlocalAs
              name: localAs
              label: Local AS
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnallowAsIn:
              id: evpnallowAsIn
              name: allowAsIn
              label: Allow AS In
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: DISABLED
                static_options:
                  values:
                    - ENABLED
                    - DISABLED
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnasPathRemoteAsReplaceOut:
              id: evpnasPathRemoteAsReplaceOut
              name: asPathRemoteAsReplaceOut
              label: AS Path Remote AS Replace Out
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: DISABLED
                static_options:
                  values:
                    - DISABLED
                    - ENABLED
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnasPathPrependDisable:
              id: evpnasPathPrependDisable
              name: asPathPrependDisable
              label: AS Path Prepend Own Out
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: ENABLED
                static_options:
                  values:
                    - DISABLED
                    - ENABLED
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnasSettings:
              id: evpnasSettings
              name: asSettings
              label: AS Settings
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - evpnlocalAs
                    - evpnallowAsIn
                    - evpnasPathRemoteAsReplaceOut
                    - evpnasPathPrependDisable
            evpnpassword:
              id: evpnpassword
              name: password
              label: Password
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnbfd:
              id: evpnbfd
              name: bfd
              label: BFD
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: NOT-ENABLED
                static_options:
                  values:
                    - NOT-ENABLED
                    - ENABLED
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnnweight:
              id: evpnnweight
              name: nweight
              label: Weight
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnnremovePrivate:
              id: evpnnremovePrivate
              name: removePrivate
              label: Remove Private
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: NOT-ENABLED
                static_options:
                  values:
                    - NOT-ENABLED
                    - ENABLED
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnneBgpMultiHopTtl:
              id: evpnneBgpMultiHopTtl
              name: eBgpMultiHopTtl
              label: eBGP Multi Hop TTL
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            a0476145-27fe-436c-b50b-b6c6ddac88b3:
              id: a0476145-27fe-436c-b50b-b6c6ddac88b3
              name: prefix
              label: Prefix
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            bc62453d-14d1-4738-849c-6f28ca44d7ba:
              id: bc62453d-14d1-4738-849c-6f28ca44d7ba
              name: value
              label: Aggregate Routes Group
              description: Group of members for Aggregate Routes
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - a0476145-27fe-436c-b50b-b6c6ddac88b3
            c17a6ae2-12cd-4d95-83da-2fb3ea4c0b1d:
              id: c17a6ae2-12cd-4d95-83da-2fb3ea4c0b1d
              name: aggregateRoutes
              label: Aggregate Routes
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: bc62453d-14d1-4738-849c-6f28ca44d7ba
                key: a0476145-27fe-436c-b50b-b6c6ddac88b3
            41f17e9d-3204-4d39-a916-b88826108c12:
              id: 41f17e9d-3204-4d39-a916-b88826108c12
              name: neighborIp
              label: Neighbor IP
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            1463e2f2-72a6-4d49-877c-b44a5875dc81:
              id: 1463e2f2-72a6-4d49-877c-b44a5875dc81
              name: neighborpeerAsn
              label: Peer ASN
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            18a2b83c-f132-468b-8347-2bbfc0ed88f6:
              id: 18a2b83c-f132-468b-8347-2bbfc0ed88f6
              name: value
              label: Neighbors Group
              description: Group of members for Neighbors
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - 41f17e9d-3204-4d39-a916-b88826108c12
                    - 1463e2f2-72a6-4d49-877c-b44a5875dc81
            7ab76df3-8632-4fd0-a041-289acfb9c5d7:
              id: 7ab76df3-8632-4fd0-a041-289acfb9c5d7
              name: neighbors
              label: Neighbors
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: 18a2b83c-f132-468b-8347-2bbfc0ed88f6
                key: ''
            evpnneighbor:
              id: evpnneighbor
              name: neighbor
              label: Peer Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - evpnpeerIp
                    - evpnpeerAsn
                    - evpndescription
                    - evpnRmInrouteMapIn
                    - evpnRmOutrouteMapOut
                    - evpnasSettings
                    - evpnpassword
                    - evpnbfd
                    - evpnnweight
                    - evpnnremovePrivate
                    - evpnneBgpMultiHopTtl
                    - c17a6ae2-12cd-4d95-83da-2fb3ea4c0b1d
                    - 7ab76df3-8632-4fd0-a041-289acfb9c5d7
            evpneBgpNeighbors:
              id: evpneBgpNeighbors
              name: evpnpeerGroups
              label: Peer Groups
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: evpnneighbor
                key: evpnpeerIp
            evpnPLprefixListName:
              id: evpnPLprefixListName
              name: prefixListName
              label: EVPN Prefix List Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnPLseqNumber:
              id: evpnPLseqNumber
              name: seqNumber
              label: Seq Number
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnPLprefix:
              id: evpnPLprefix
              name: prefix
              label: Prefix
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnPLprefixLength:
              id: evpnPLprefixLength
              name: prefixLength
              label: Match
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: exact-route
                static_options:
                  values:
                    - le
                    - eq
                    - ge
                    - exact-route
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnPLpermitDeny:
              id: evpnPLpermitDeny
              name: permitDeny
              label: Permit Deny
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: permit
                static_options:
                  values:
                    - permit
                    - deny
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnPLmaskLength:
              id: evpnPLmaskLength
              name: maskLength
              label: Mask Length
              description: 1-32
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnPLseqNumberGroup:
              id: evpnPLseqNumberGroup
              name: seqNumberGroup
              label: Seq Number Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - evpnPLseqNumber
                    - evpnPLprefix
                    - evpnPLprefixLength
                    - evpnPLpermitDeny
                    - evpnPLmaskLength
            evpnPLseqNumbers:
              id: evpnPLseqNumbers
              name: seqNumbers
              label: Seq Numbers
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: evpnPLseqNumberGroup
                key: evpnPLseqNumber
            evpnPLprefixListGroup:
              id: evpnPLprefixListGroup
              name: prefixListGroup
              label: Prefix List Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - evpnPLprefixListName
                    - evpnPLseqNumbers
            evpnPLprefixList:
              id: evpnPLprefixList
              name: prefixList
              label: Prefix List
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: evpnPLprefixListGroup
                key: evpnPLprefixListName
            evpnAPasPathListName:
              id: evpnAPasPathListName
              name: asPathListName
              label: EVPN AS Path List Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnAPregEx:
              id: evpnAPregEx
              name: regEx
              label: Reg Ex
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnAPpermitDeny:
              id: evpnAPpermitDeny
              name: permitDeny
              label: Permit Deny
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: permit
                static_options:
                  values:
                    - permit
                    - deny
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnAPasPathListGroup:
              id: evpnAPasPathListGroup
              name: asPathListGroup
              label: AS Path List Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - evpnAPasPathListName
                    - evpnAPregEx
                    - evpnAPpermitDeny
            evpnAPasPathList:
              id: evpnAPasPathList
              name: asPathList
              label: AS Path List
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: evpnAPasPathListGroup
                key: evpnAPasPathListName
            evpnprefix:
              id: evpnprefix
              name: prefix
              label: Prefix
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnnextHop:
              id: evpnnextHop
              name: nextHop
              label: Next Hop
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnsrname:
              id: evpnsrname
              name: srname
              label: name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            estaticRouteGroup:
              id: estaticRouteGroup
              name: estaticRouteGroup
              label: Static Route Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - evpnprefix
                    - evpnnextHop
                    - evpnsrname
            estaticRoutes:
              id: estaticRoutes
              name: estaticRoutes
              label: Static Routes
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: estaticRouteGroup
                key: evpnprefix
            evpninterface:
              id: evpninterface
              name: interface
              label: Interface
              description: Optional. Creates a routed port or sub-interface (i.e. Ethernet2.2) instead of the default SVI
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnsecondaryIpAddress:
              id: evpnsecondaryIpAddress
              name: secondaryIpAddress
              label: Secondary IP Prefix
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnsecondary:
              id: evpnsecondary
              name: secondary
              label: Secondary
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: secondary
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            a0fef3ae-8431-4daf-bddc-78d6207bf60f:
              id: a0fef3ae-8431-4daf-bddc-78d6207bf60f
              name: newField
              label: new field
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnevpnsecondaryIpAddressGroup:
              id: evpnevpnsecondaryIpAddressGroup
              name: value
              label: Secondary IP Addresses Group
              description: Group of members for Secondary IP Addresses
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - evpnsecondaryIpAddress
                    - evpnsecondary
                    - a0fef3ae-8431-4daf-bddc-78d6207bf60f
            evpnsecondaryIpAddresses:
              id: evpnsecondaryIpAddresses
              name: evpnsecondaryIpAddresses
              label: Secondary IP Prefixes
              description: Optional
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: evpnevpnsecondaryIpAddressGroup
                key: evpnsecondaryIpAddress
            evpnmultihomingname:
              id: evpnmultihomingname
              name: multihomingname
              label: EVPN ES Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnmultihomingesi:
              id: evpnmultihomingesi
              name: esi
              label: ESI
              description: Format 0033:3333:3333:3333:3333
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnmultihomingrt:
              id: evpnmultihomingrt
              name: rt
              label: RT
              description: Format 00:03:00:03:00:03
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnmultihominglacpSysId:
              id: evpnmultihominglacpSysId
              name: lacpSysId
              label: LACP Sys ID
              description: Format 1234.5678.0123
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnmultihominges:
              id: evpnmultihominges
              name: es
              label: ES
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - evpnmultihomingname
                    - evpnmultihomingesi
                    - evpnmultihomingrt
                    - evpnmultihominglacpSysId
            evpnmultihoming:
              id: evpnmultihoming
              name: evpnmultihoming
              label: Multihoming
              description: Optional
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: evpnmultihominges
                key: evpnmultihomingname
            evpnvlanBasedVlaNs:
              id: evpnvlanBasedVlaNs
              name: vlanBasedVlaNs
              label: VLAN Definitions
              description: Group of members for VLAN
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vlanName
                    - evpnVrf
                    - evpnSwitches
                    - mavVrfoverrideVariables
                    - evpnsviIpAddresses
                    - evpnvlanId
                    - evpneBgpNeighbors
                    - evpnPLprefixList
                    - evpnAPasPathList
                    - estaticRoutes
                    - evpninterface
                    - evpnsecondaryIpAddresses
                    - evpnmultihoming
            evpnvlans:
              id: evpnvlans
              name: vlans
              label: VLANs
              description: VLANs must be unique per Customer and per device
              required: true
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: evpnvlanBasedVlaNs
                key: evpnvlanId
            evpnvlanName:
              id: evpnvlanName
              name: name
              label: Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vlanRange:
              id: vlanRange
              name: vlanRange
              label: VLAN Range
              description: Assign VLANS to this bundle with their VLAN IDs. Specify separate VLANs with a comma and series with a hyphen (e.g 1-9, 14, 23-40)
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            bundlerouteDistinguisher:
              id: bundlerouteDistinguisher
              name: routeDistinguisher
              label: Route Distinguisher
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            bundlerouteTarget:
              id: bundlerouteTarget
              name: routeTarget
              label: Route Target
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            bundleoverrideVariables:
              id: bundleoverrideVariables
              name: overrideVariables
              label: Overide MAC-VRF Attributes
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - bundlerouteDistinguisher
                    - bundlerouteTarget
            vlanBundleDefinition:
              id: vlanBundleDefinition
              name: vlanBundleDefinition
              label: VLAN Bundle Definition
              description: Group of members for VLAN Aware Bundles
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - evpnvlanName
                    - vlanRange
                    - bundleoverrideVariables
            vlanAwareBundles:
              id: vlanAwareBundles
              name: vlanAwareBundles
              label: VLAN Aware Bundles
              description: Define each VLAN in the VLAN section above first then bundle them here
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: vlanBundleDefinition
                key: evpnvlanName
            evpnrouteDistinguisher:
              id: evpnrouteDistinguisher
              name: routeDistinguisher
              label: Route Distinguisher
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnrouteTarget:
              id: evpnrouteTarget
              name: routeTarget
              label: Route Target
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnoverrideVariables:
              id: evpnoverrideVariables
              name: overrideVariables
              label: Override IP VRF Attributes
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - evpnrouteDistinguisher
                    - evpnrouteTarget
            evpnvni:
              id: evpnvni
              name: vni
              label: IP VRF VNI
              description: Optional. Must be unique per VRF
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            vrfGroup:
              id: vrfGroup
              name: vrfGroup
              label: VRF Definition
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vrfName
                    - evpnvlans
                    - vlanAwareBundles
                    - evpnoverrideVariables
                    - evpnvni
            vrfs:
              id: vrfs
              name: vrfs
              label: EVPN VRFs
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: vrfGroup
                key: vrfName
            l3vpnname:
              id: l3vpnname
              name: l3vpnname
              label: L3 VPN Name
              description: ''
              required: true
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnrouteDistinguisher:
              id: l3vpnrouteDistinguisher
              name: routeDistinguisher
              label: Route Distinguisher
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnrouteTarget:
              id: l3vpnrouteTarget
              name: routeTarget
              label: Route Target
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnoverrideVariables:
              id: l3vpnoverrideVariables
              name: overrideVariables
              label: Override VRF Attributes
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - l3vpnrouteDistinguisher
                    - l3vpnrouteTarget
            vlanId:
              id: vlanId
              name: vlanId
              label: VLAN ID
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            l3vlanName:
              id: l3vlanName
              name: vlanname
              label: VLAN Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            virtualIpAddress:
              id: virtualIpAddress
              name: sviVirtualIpAddress
              label: Virtual IP Prefix
              description: VARP Virtual Address
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            ipPrefix:
              id: ipPrefix
              name: ipPrefix
              label: IP Prefix
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            ipPrefixes:
              id: ipPrefixes
              name: sviIpAddresses
              label: IP Prefixes
              description: Optional. Creates an SVI interface
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - virtualIpAddress
                    - ipPrefix
            l3vpninterface:
              id: l3vpninterface
              name: l3vpninterface
              label: Interface
              description: Optional. Creates a routed port or sub-interface (i.e. Ethernet2.2) instead of the default SVI
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnsecondaryIpAddress:
              id: l3vpnsecondaryIpAddress
              name: secondaryIpAddress
              label: Secondary IP Prefix
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnsecondary:
              id: l3vpnsecondary
              name: secondary
              label: Secondary
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: secondary
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnsecondaryIpAddressGroup:
              id: l3vpnsecondaryIpAddressGroup
              name: value
              label: Secondary IP Addresses Group
              description: Group of members for Secondary IP Addresses
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - l3vpnsecondaryIpAddress
                    - l3vpnsecondary
            l3vpnsecondaryIpAddresses:
              id: l3vpnsecondaryIpAddresses
              name: l3vpnsecondaryIpAddresses
              label: Secondary IP Prefixes
              description: Optional
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: l3vpnsecondaryIpAddressGroup
                key: l3vpnsecondaryIpAddress
            value:
              id: value
              name: value
              label: VLANs Group
              description: Group of members for VLANs
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vlanId
                    - l3vlanName
                    - ipPrefixes
                    - l3vpninterface
                    - l3vpnsecondaryIpAddresses
            vlaNs:
              id: vlaNs
              name: vlans
              label: VLANs
              description: VLANs must be unique per Customer and per device
              required: true
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: value
                key: vlanId
            routeDistinguisher:
              id: routeDistinguisher
              name: routeDistinguisher
              label: Route Distinguisher
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            routeTarget:
              id: routeTarget
              name: routeTarget
              label: Route Target
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            overrideVrfAttributes:
              id: overrideVrfAttributes
              name: overrideVariables
              label: Override VRF Attributes
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - routeDistinguisher
                    - routeTarget
            l3vpnpeerIp:
              id: l3vpnpeerIp
              name: peerIp
              label: Peer Group Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnpeerAsn:
              id: l3vpnpeerAsn
              name: peerAsn
              label: Peer ASN
              description: ''
              required: true
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpndescription:
              id: l3vpndescription
              name: description
              label: Description
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnRmInseqNumber:
              id: l3vpnRmInseqNumber
              name: seqNumber
              label: Seq Number
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnRmInprefixList:
              id: l3vpnRmInprefixList
              name: prefixList
              label: Prefix List
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"l3vpnPLname"}'
            l3vpnRmInlocalPref:
              id: l3vpnRmInlocalPref
              name: localPref
              label: Local Pref
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnRmInasPathList:
              id: l3vpnRmInasPathList
              name: asPathList
              label: AS Path List
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"l3vpnAPname"}'
            l3vpnRmIncommunity:
              id: l3vpnRmIncommunity
              name: community
              label: Match Community
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnRmInsetCommunity:
              id: l3vpnRmInsetCommunity
              name: setCommunity
              label: Set Community
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnRmInweight:
              id: l3vpnRmInweight
              name: weight
              label: Weight
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnrmiasPathPrependRepeat:
              id: l3vpnrmiasPathPrependRepeat
              name: prependRepeat
              label: AS Path Prepend Repeat
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnRmInpermitDeny:
              id: l3vpnRmInpermitDeny
              name: permitDeny
              label: Permit Deny
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: permit
                static_options:
                  values:
                    - permit
                    - deny
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnRmInrouteMap:
              id: l3vpnRmInrouteMap
              name: routeMap
              label: 'Route Map '
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - l3vpnRmInseqNumber
                    - l3vpnRmInprefixList
                    - l3vpnRmInlocalPref
                    - l3vpnRmInasPathList
                    - l3vpnRmIncommunity
                    - l3vpnRmInsetCommunity
                    - l3vpnRmInweight
                    - l3vpnrmiasPathPrependRepeat
                    - l3vpnRmInpermitDeny
            l3vpnRmInrouteMapIn:
              id: l3vpnRmInrouteMapIn
              name: routeMapIn
              label: Route Map In
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: l3vpnRmInrouteMap
                key: l3vpnRmInseqNumber
            l3vpnRmOutseqNumber:
              id: l3vpnRmOutseqNumber
              name: seqNumber
              label: Seq Number
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnRmOutprefixList:
              id: l3vpnRmOutprefixList
              name: prefixList
              label: Prefix List
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"l3vpnPLname"}'
            l3vpnRmOutasPathPrepend:
              id: l3vpnRmOutasPathPrepend
              name: prependRepeat
              label: AS Path Prepend Repeat
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnRmOutasPathList:
              id: l3vpnRmOutasPathList
              name: asPathList
              label: AS Path List
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"l3vpnAPname"}'
            l3vpnRmOutcommunity:
              id: l3vpnRmOutcommunity
              name: community
              label: Match Community
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnRmOutsetCommunity:
              id: l3vpnRmOutsetCommunity
              name: setCommunity
              label: Set Community
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnRmOutpermitDeny:
              id: l3vpnRmOutpermitDeny
              name: permitDeny
              label: Permit Deny
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: permit
                static_options:
                  values:
                    - permit
                    - deny
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnRmOutrouteMap:
              id: l3vpnRmOutrouteMap
              name: routeMap
              label: Route Map
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - l3vpnRmOutseqNumber
                    - l3vpnRmOutprefixList
                    - l3vpnRmOutasPathPrepend
                    - l3vpnRmOutasPathList
                    - l3vpnRmOutcommunity
                    - l3vpnRmOutsetCommunity
                    - l3vpnRmOutpermitDeny
            l3vpnRmOutrouteMapOut:
              id: l3vpnRmOutrouteMapOut
              name: routeMapOut
              label: Route Map Out
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: l3vpnRmOutrouteMap
                key: l3vpnRmOutseqNumber
            l3vpnlocalAs:
              id: l3vpnlocalAs
              name: localAs
              label: Local AS
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnallowAsIn:
              id: l3vpnallowAsIn
              name: allowAsIn
              label: Allow AS In
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: DISABLED
                static_options:
                  values:
                    - ENABLED
                    - DISABLED
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnasPathPrependDisable:
              id: l3vpnasPathPrependDisable
              name: asPathPrependDisable
              label: AS Path Prepend Own Out
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: ENABLED
                static_options:
                  values:
                    - DISABLED
                    - ENABLED
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnasPathRemoteAsReplaceOut:
              id: l3vpnasPathRemoteAsReplaceOut
              name: asPathRemoteAsReplaceOut
              label: AS Path Remote AS Replace Out
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: DISABLED
                static_options:
                  values:
                    - DISABLED
                    - ENABLED
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnasSettings:
              id: l3vpnasSettings
              name: asSettings
              label: AS Settings
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - l3vpnlocalAs
                    - l3vpnallowAsIn
                    - l3vpnasPathPrependDisable
                    - l3vpnasPathRemoteAsReplaceOut
            l3vpnpassword:
              id: l3vpnpassword
              name: password
              label: Password
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnbfd:
              id: l3vpnbfd
              name: bfd
              label: BFD
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: NOT-ENABLED
                static_options:
                  values:
                    - NOT-ENABLED
                    - ENABLED
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnnweight:
              id: l3vpnnweight
              name: nweight
              label: Weight
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnnremovePrivate:
              id: l3vpnnremovePrivate
              name: removePrivate
              label: Remove Private
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: NOT-ENABLED
                static_options:
                  values:
                    - NOT-ENABLED
                    - ENABLED
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnneBgpMultiHopTtl:
              id: l3vpnneBgpMultiHopTtl
              name: eBgpMultiHopTtl
              label: eBGP Multi Hop TTL
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            b3f7754a-8ab5-4102-92ca-e258679d2e05:
              id: b3f7754a-8ab5-4102-92ca-e258679d2e05
              name: prefix
              label: Prefix
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            3ebfa911-5a65-4ec7-b339-e4ae49c43eda:
              id: 3ebfa911-5a65-4ec7-b339-e4ae49c43eda
              name: value
              label: Aggregate Routes Group
              description: Group of members for Aggregate Routes
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - b3f7754a-8ab5-4102-92ca-e258679d2e05
            224d139d-c832-4b06-9728-4e21d99f854c:
              id: 224d139d-c832-4b06-9728-4e21d99f854c
              name: aggregateRoutes
              label: Aggregate Routes
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: 3ebfa911-5a65-4ec7-b339-e4ae49c43eda
                key: b3f7754a-8ab5-4102-92ca-e258679d2e05
            a4551c6f-52f4-4fe5-a789-77181b53de8c:
              id: a4551c6f-52f4-4fe5-a789-77181b53de8c
              name: neighborIp
              label: Neighbor IP
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            e9b57b57-1384-41e2-bc64-386742ebe186:
              id: e9b57b57-1384-41e2-bc64-386742ebe186
              name: neighborpeerAsn
              label: Peer ASN
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            107fc6f4-02d4-43a3-ac92-2c34b64a6770:
              id: 107fc6f4-02d4-43a3-ac92-2c34b64a6770
              name: value
              label: Neighbors Group
              description: Group of members for Neighbors
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - a4551c6f-52f4-4fe5-a789-77181b53de8c
                    - e9b57b57-1384-41e2-bc64-386742ebe186
            fc18426c-9d8e-4d66-abc8-9d6e246f90b9:
              id: fc18426c-9d8e-4d66-abc8-9d6e246f90b9
              name: neighbors
              label: Neighbors
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: 107fc6f4-02d4-43a3-ac92-2c34b64a6770
                key: ''
            l3vpnNeighbor:
              id: l3vpnNeighbor
              name: Neighbor
              label: Peer Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - l3vpnpeerIp
                    - l3vpnpeerAsn
                    - l3vpndescription
                    - l3vpnRmInrouteMapIn
                    - l3vpnRmOutrouteMapOut
                    - l3vpnasSettings
                    - l3vpnpassword
                    - l3vpnbfd
                    - l3vpnnweight
                    - l3vpnnremovePrivate
                    - l3vpnneBgpMultiHopTtl
                    - 224d139d-c832-4b06-9728-4e21d99f854c
                    - fc18426c-9d8e-4d66-abc8-9d6e246f90b9
            l3vpneBgpNeighbors:
              id: l3vpneBgpNeighbors
              name: l3vpnpeerGroups
              label: Peer Groups
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: l3vpnNeighbor
                key: l3vpnpeerIp
            l3vpnPLname:
              id: l3vpnPLname
              name: prefixListName
              label: L3VPN Prefix List Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnPLseqNumber:
              id: l3vpnPLseqNumber
              name: seqNumber
              label: Seq Number
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnPLprefix:
              id: l3vpnPLprefix
              name: prefix
              label: Prefix
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnPLprefixLength:
              id: l3vpnPLprefixLength
              name: prefixLength
              label: Match
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: exact-route
                static_options:
                  values:
                    - le
                    - eq
                    - ge
                    - exact-route
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnPLpermitDeny:
              id: l3vpnPLpermitDeny
              name: permitDeny
              label: Permit Deny
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: permit
                static_options:
                  values:
                    - permit
                    - deny
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnPLmaskLength:
              id: l3vpnPLmaskLength
              name: maskLength
              label: Mask Length
              description: 1-32
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnPLSqvalue:
              id: l3vpnPLSqvalue
              name: value
              label: Seq Number Group
              description: Group of members for Seq Number
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - l3vpnPLseqNumber
                    - l3vpnPLprefix
                    - l3vpnPLprefixLength
                    - l3vpnPLpermitDeny
                    - l3vpnPLmaskLength
            l3vpnPLseqNumbers:
              id: l3vpnPLseqNumbers
              name: seqNumbers
              label: Seq Number
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: l3vpnPLSqvalue
                key: l3vpnPLseqNumber
            l3vpnPLvalue:
              id: l3vpnPLvalue
              name: value
              label: Prefix List Group
              description: Group of members for Prefix List
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - l3vpnPLname
                    - l3vpnPLseqNumbers
            l3vpnPLprefixList:
              id: l3vpnPLprefixList
              name: prefixList
              label: Prefix List
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: l3vpnPLvalue
                key: l3vpnPLname
            l3vpnAPname:
              id: l3vpnAPname
              name: asPathListName
              label: L3VPN AS Path List Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnAPregEx:
              id: l3vpnAPregEx
              name: regEx
              label: Reg Ex
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnAPpermitDeny:
              id: l3vpnAPpermitDeny
              name: permitDeny
              label: Permit Deny
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: permit
                static_options:
                  values:
                    - permit
                    - deny
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnAPvalue:
              id: l3vpnAPvalue
              name: value
              label: AS Path List Group
              description: Group of members for AS Path List
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - l3vpnAPname
                    - l3vpnAPregEx
                    - l3vpnAPpermitDeny
            l3vpnAPasPathList:
              id: l3vpnAPasPathList
              name: asPathList
              label: AS Path List
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: l3vpnAPvalue
                key: l3vpnAPname
            l3vpnprefix:
              id: l3vpnprefix
              name: prefix
              label: Prefix
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnnextHop:
              id: l3vpnnextHop
              name: nextHop
              label: Next Hop
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3vpnsrname:
              id: l3vpnsrname
              name: srname
              label: name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            l3staticRouteGroup:
              id: l3staticRouteGroup
              name: l3staticRouteGroup
              label: Static Route Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - l3vpnprefix
                    - l3vpnnextHop
                    - l3vpnsrname
            l3staticRoutes:
              id: l3staticRoutes
              name: l3staticRoutes
              label: Static Routes
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: l3staticRouteGroup
                key: l3vpnprefix
            deviceGroup:
              id: deviceGroup
              name: deviceGroup
              label: Device Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vlaNs
                    - overrideVrfAttributes
                    - l3vpneBgpNeighbors
                    - l3vpnPLprefixList
                    - l3vpnAPasPathList
                    - l3staticRoutes
            deviceHostname:
              id: deviceHostname
              name: deviceHostname
              label: Device Hostname
              description: choose device and then hostname
              required: false
              type: INPUT_FIELD_TYPE_RESOLVER
              resolver_props:
                base_field_id: deviceGroup
                display_mode: RESOLVER_FIELD_DISPLAY_MODE_SPARSE
                input_mode: RESOLVER_FIELD_INPUT_MODE_MULTI_DEVICE_TAG
                input_tag_label: null
                tag_filter_query: null
            l3vrfGroup:
              id: l3vrfGroup
              name: vrfGroup
              label: VRF Definition
              description: Name
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - l3vpnname
                    - l3vpnoverrideVariables
                    - deviceHostname
            l3vrfs:
              id: l3vrfs
              name: l3vrfs
              label: L3 VPN VRFs
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: l3vrfGroup
                key: l3vpnname
            vpwsName:
              id: vpwsName
              name: vpwsName
              label: VPWS Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            leftright:
              id: leftright
              name: esName
              label: ES Name
              description: Optional
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"vpwsmultihomingname"}'
            9be4b784-5f2e-44c6-81c2-e26910c42312:
              id: 9be4b784-5f2e-44c6-81c2-e26910c42312
              name: interface
              label: Interface
              description: Required
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            7cd11257-b9fd-462e-b9d1-05fe7c10f493:
              id: 7cd11257-b9fd-462e-b9d1-05fe7c10f493
              name: channelGroup
              label: Channel Group
              description: Optional
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            1e76b63a-f28d-4c9e-a143-9c1c9ce7f732:
              id: 1e76b63a-f28d-4c9e-a143-9c1c9ce7f732
              name: eastWest
              label: East/West
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - EAST
                    - WEST
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vpwsdeviceGroup:
              id: vpwsdeviceGroup
              name: switch
              label: Device Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - leftright
                    - 9be4b784-5f2e-44c6-81c2-e26910c42312
                    - 7cd11257-b9fd-462e-b9d1-05fe7c10f493
                    - 1e76b63a-f28d-4c9e-a143-9c1c9ce7f732
            vpwsswitches:
              id: vpwsswitches
              name: switches
              label: Device Hostnames
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_RESOLVER
              resolver_props:
                base_field_id: vpwsdeviceGroup
                display_mode: RESOLVER_FIELD_DISPLAY_MODE_SPARSE
                input_mode: RESOLVER_FIELD_INPUT_MODE_MULTI_DEVICE_TAG
                input_tag_label: null
                tag_filter_query: null
            patchName:
              id: patchName
              name: patchName
              label: Patch Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            pseudowireName:
              id: pseudowireName
              name: pseudowireName
              label: PW Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vpwsvalue:
              id: vpwsvalue
              name: value
              label: Patch Panel Group
              description: Group of members for Patch Panel
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - patchName
                    - pseudowireName
            patchPanel:
              id: patchPanel
              name: patchPanel
              label: Patch Panel
              description: Add interface or sub-interface. For Port Channels add the physical interface,  a Port-Channel interface will be created.
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: vpwsvalue
                key: patchName
            vpwsrouteDistinguisher:
              id: vpwsrouteDistinguisher
              name: routeDistinguisher
              label: Route Distinguisher
              description: Format Router-ID:(x)
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vpwsrouteTarget:
              id: vpwsrouteTarget
              name: routeTarget
              label: Route Target
              description: Format (x):(x)
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vpwsoverrideVariables:
              id: vpwsoverrideVariables
              name: overrideVariables
              label: Override VRF Attributes
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vpwsrouteDistinguisher
                    - vpwsrouteTarget
            vpwsmultihomingname:
              id: vpwsmultihomingname
              name: multihomingname
              label: VPWS ES Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vpwsmultihomingesi:
              id: vpwsmultihomingesi
              name: esi
              label: ESI
              description: Format 0033:3333:3333:3333:3333
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            2vpwsmultihomingrt:
              id: 2vpwsmultihomingrt
              name: rt
              label: RT
              description: Format 00:03:00:03:00:03
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vpwsmultihominglacpSysId:
              id: vpwsmultihominglacpSysId
              name: lacpSysId
              label: LACP Sys ID
              description: Format 1234.5678.0123
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vpwsmultihominges:
              id: vpwsmultihominges
              name: es
              label: ES
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vpwsmultihomingname
                    - vpwsmultihomingesi
                    - 2vpwsmultihomingrt
                    - vpwsmultihominglacpSysId
            vpwsmultihoming:
              id: vpwsmultihoming
              name: vpwsmultihoming
              label: Multihoming
              description: Optional
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: vpwsmultihominges
                key: vpwsmultihomingname
            vpwsDefinition:
              id: vpwsDefinition
              name: vpwsDefinition
              label: VPWS Definition
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vpwsName
                    - vpwsswitches
                    - patchPanel
                    - vpwsoverrideVariables
                    - vpwsmultihoming
            vpws:
              id: vpws
              name: vpws
              label: VPWS
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: vpwsDefinition
                key: vpwsName
            tenantDefinition:
              id: tenantDefinition
              name: tenantDefinition
              label: Customer Definition
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - customerName
                    - vrfs
                    - l3vrfs
                    - vpws
            customers:
              id: customers
              name: customers
              label: Customers
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: tenantDefinition
                key: customerName
            vrfRouteDistinguisherFormat:
              id: vrfRouteDistinguisherFormat
              name: vrfRouteDistinguisherFormat
              label: VRF Route Distinguisher Format
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Router-ID:VLAN
                static_options:
                  values:
                    - Router-ID:VLAN
                    - Router-ID:SEQ
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vrfRouteTargetFormat:
              id: vrfRouteTargetFormat
              name: vrfRouteTargetFormat
              label: VRF Route Target Format
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: ASN:SEQ
                static_options:
                  values:
                    - ASN:SEQ
                    - ASN:VLAN
                    - VLAN:VLAN
                    - SEQ:SEQ
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vrfAttributeFormats:
              id: vrfAttributeFormats
              name: vrfAttributeFormats
              label: 'L3VPN VRF Attributes '
              description: Auto Configuration Format
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vrfRouteDistinguisherFormat
                    - vrfRouteTargetFormat
            vlanBasedMacVrfRouteDistinguisherFormat:
              id: vlanBasedMacVrfRouteDistinguisherFormat
              name: macVrfRouteDistinguisherFormat
              label: MAC-VRF Route Distinguisher Format
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Router-ID:VLAN
                static_options:
                  values:
                    - Router-ID:VLAN
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vlanBasedMacVrfRouteTargetFormat:
              id: vlanBasedMacVrfRouteTargetFormat
              name: macVrfRouteTargetFormat
              label: MAC-VRF Route Target Format
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: ASN:VLAN
                static_options:
                  values:
                    - VLAN:VLAN
                    - ASN:VLAN
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vlanBasedMacVrfAttributeFormats:
              id: vlanBasedMacVrfAttributeFormats
              name: vlanBasedMacVrfAttributeFormats
              label: EVPN VLAN Based MAC-VRF Attributes
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vlanBasedMacVrfRouteDistinguisherFormat
                    - vlanBasedMacVrfRouteTargetFormat
            vlanBundleMacVrfRouteDistinguisherFormat:
              id: vlanBundleMacVrfRouteDistinguisherFormat
              name: macVrfRouteDistinguisherFormat
              label: MAC-VRF Route Distinguisher Format
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Router-ID:First-VLAN
                static_options:
                  values:
                    - Router-ID:First-VLAN
                    - Router-ID:Last-VLAN
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vlanBundleMacVrfRouteTargetFormat:
              id: vlanBundleMacVrfRouteTargetFormat
              name: macVrfRouteTargetFormat
              label: MAC-VRF Route Target Format
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: ASN:First-VLAN
                static_options:
                  values:
                    - First-VLAN:First-VLAN
                    - Last-VLAN:Last-VLAN
                    - First-VLAN:Last-VLAN
                    - ASN:First-VLAN
                    - ASN:Last-VLAN
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vlanBundleMacVrfAttributeFormats:
              id: vlanBundleMacVrfAttributeFormats
              name: vlanBundleMacVrfAttributeFormats
              label: EVPN VLAN Bundle MAC-VRF Attributes
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vlanBundleMacVrfRouteDistinguisherFormat
                    - vlanBundleMacVrfRouteTargetFormat
            vpwsvrfRouteTargetFormat:
              id: vpwsvrfRouteTargetFormat
              name: vrfRouteTargetFormat
              label: VRF Route Target Format
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: ASN:SEQ
                static_options:
                  values:
                    - ASN:SEQ
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vpwsvrfRouteDistinguisherFormat:
              id: vpwsvrfRouteDistinguisherFormat
              name: vrfRouteDistinguisherFormat
              label: VRF Route Distinguisher Format
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Router-ID:SEQ
                static_options:
                  values:
                    - Router-ID:SEQ
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vpwsVrfAttributeFormats:
              id: vpwsVrfAttributeFormats
              name: vpwsVrfAttributeFormats
              label: 'VPWS VRF Attributes '
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vpwsvrfRouteTargetFormat
                    - vpwsvrfRouteDistinguisherFormat
            evpnvrfRouteDistinguisherFormat:
              id: evpnvrfRouteDistinguisherFormat
              name: vrfRouteDistinguisherFormat
              label: VRF Route Distinguisher Format
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Router-ID:VLAN
                static_options:
                  values:
                    - Router-ID:SEQ
                    - Router-ID:VLAN
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnvrfRouteTargetFormat:
              id: evpnvrfRouteTargetFormat
              name: vrfRouteTargetFormat
              label: VRF Route Target Format
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: ASN:VLAN
                static_options:
                  values:
                    - ASN:SEQ
                    - ASN:VLAN
                    - VLAN:VLAN
                    - SEQ:SEQ
                format: null
                length: null
                pattern: null
                dynamic_options: null
            evpnevpnvrfAttributeFormats:
              id: evpnevpnvrfAttributeFormats
              name: evpnvrfAttributeFormats
              label: 'EVPN IP VRF Attributes '
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - evpnvrfRouteDistinguisherFormat
                    - evpnvrfRouteTargetFormat
            root:
              id: root
              name: ''
              label: ''
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - customers
                    - vrfAttributeFormats
                    - vlanBasedMacVrfAttributeFormats
                    - vlanBundleMacVrfAttributeFormats
                    - vpwsVrfAttributeFormats
                    - evpnevpnvrfAttributeFormats
        layout:
          value: '{"vrfs":{"key":"vrfs","type":"INPUT","isPageLayout":true},"customers":{"key":"customers","type":"INPUT","isPageLayout":true},"vlans":{"key":"vlans","type":"INPUT","isPageLayout":true},"vlanBasedVlans":{"key":"vlanBasedVlans","type":"INPUT","order":["vlanId","vlanBasedVlanName","vlanL3OrL2","vlanVrf","vlanSVIIpAddresses","vlanMemberSwitches","vlanOverrideVariables"]},"vrfGroup":{"key":"vrfGroup","type":"INPUT","order":["vrfName","evpnvlans","evpnvni","vlanAwareBundles","evpnoverrideVariables"]},"vlanL3OrL2":{"key":"vlanL3OrL2","valueToLabelMap":{"True":"Routed","False":"Bridged"},"type":"INPUT","dependency":{}},"vlanSviVirtualIpAddress":{"key":"vlanSviVirtualIpAddress","dependency":{"vlanL3OrL2":{"value":[true],"mode":"HIDE"}},"type":"INPUT"},"vlanSviSecondaryIpAddress":{"key":"vlanSviSecondaryIpAddress","dependency":{"vlanL3OrL2":{"value":[true],"mode":"HIDE"}},"type":"INPUT"},"tenantDefinition":{"key":"tenantDefinition","type":"INPUT","order":["customerName","vrfs","l3vrfs","vpws"]},"iBgpDetails":{"key":"iBgpDetails","type":"INPUT","order":["iBgpVlanId","iBgpSubnet","iBgpSubnetMask"]},"vlanDhcpServerVrf":{"key":"vlanDhcpServerVrf","dependency":{"vlanL3OrL2":{"value":[true],"mode":"SHOW"}},"type":"INPUT"},"vlanDhcpServers":{"key":"vlanDhcpServers","dependency":{"vlanL3OrL2":{"value":[true],"mode":"SHOW"}},"type":"INPUT"},"vlanAwareBundleGroup":{"key":"vlanAwareBundleGroup","type":"INPUT","order":["vlanAwareBundleName","vlanAwareBundleVlanRange","vlanAwareBundleOverrideVariables"]},"vlanAwareBundles":{"key":"vlanAwareBundles","type":"INPUT","isPageLayout":true},"vlanMemberSwitches":{"key":"vlanMemberSwitches","isPageLayout":true,"type":"INPUT"},"vlanVrf":{"key":"vlanVrf","dependency":{"vlanL3OrL2":{"value":[true],"mode":"HIDE"}},"type":"INPUT"},"vrfOverrideVariables":{"key":"vrfOverrideVariables","type":"INPUT","order":["vrfOverrideRouteDistinguisher","vrfOverrideRouteTarget"]},"vlanMemberSwitchApply":{"key":"vlanMemberSwitchApply","dependency":{},"type":"INPUT"},"d22b2790-63a0-4115-89cb-cc120d59534f":{"key":"d22b2790-63a0-4115-89cb-cc120d59534f","type":"INPUT","order":["9ce9d23a-f501-4e53-bdf5-d942cc55de81","a6b31149-12b6-4439-8433-9b4a599041c2","1e9e624f-3252-416f-84ea-55d8ea0397fc","19ad9308-46d6-445c-b542-77adb75e2085","525da80e-61dc-4155-b949-bfd9dac0601e","72a172f9-44d4-4caa-8eb9-779934ac9d71"]},"l3vrfs":{"key":"l3vrfs","type":"INPUT","isPageLayout":true},"evpnVrf":{"key":"evpnVrf","dependency":{},"type":"INPUT"},"7ec91859-3711-4f90-a31d-790b73d373df":{"key":"7ec91859-3711-4f90-a31d-790b73d373df","type":"INPUT","order":["44248c47-82ea-4db4-bafd-279fdbeb31cf","db3cfcf5-d4ad-4694-ac27-e7555142f6ba"]},"7a72f3a5-f77a-4471-8868-a729e1dcd281":{"key":"7a72f3a5-f77a-4471-8868-a729e1dcd281","type":"INPUT"},"vlanBundleMacVrfRouteDistinguisherFormat":{"key":"vlanBundleMacVrfRouteDistinguisherFormat","type":"INPUT","dependency":{}},"vlanBundleMacVrfRouteTargetFormat":{"key":"vlanBundleMacVrfRouteTargetFormat","type":"INPUT","dependency":{}},"vlanBasedMacVrfRouteTargetFormat":{"key":"vlanBasedMacVrfRouteTargetFormat","type":"INPUT","dependency":{}},"vlanBasedMacVrfRouteDistinguisherFormat":{"key":"vlanBasedMacVrfRouteDistinguisherFormat","type":"INPUT","dependency":{}},"vrfRouteTargetFormat":{"key":"vrfRouteTargetFormat","type":"INPUT","dependency":{}},"vrfRouteDistinguisherFormat":{"key":"vrfRouteDistinguisherFormat","type":"INPUT","dependency":{}},"evpnvlans":{"key":"evpnvlans","type":"INPUT","isPageLayout":true},"cae78eeb-5a5d-4ade-9e31-356db42f662d":{"key":"cae78eeb-5a5d-4ade-9e31-356db42f662d","type":"INPUT","isPageLayout":true},"evpnvlanBasedVlaNs":{"key":"evpnvlanBasedVlaNs","type":"INPUT","order":["vlanName","evpnvlanId","evpnmultihoming","evpnSwitches","evpnVrf","evpninterface","evpnsviIpAddresses","evpnsecondaryIpAddresses","estaticRoutes","evpneBgpNeighbors","evpnPLprefixList","evpnAPasPathList","mavVrfoverrideVariables"]},"evpnSwitches":{"key":"evpnSwitches","isPageLayout":false,"showDefaultRow":false,"type":"INPUT"},"vlanId":{"key":"vlanId","type":"INPUT","dependency":{}},"vlanBasedVlanName":{"key":"vlanBasedVlanName","type":"INPUT","dependency":{}},"vlanOverrideRouteDistinguisher":{"key":"vlanOverrideRouteDistinguisher","type":"INPUT","dependency":{}},"vlanOverrideRouteTarget":{"key":"vlanOverrideRouteTarget","type":"INPUT","dependency":{}},"34946551-8c59-4dfe-b0a7-86fdc78fdf47":{"key":"34946551-8c59-4dfe-b0a7-86fdc78fdf47","type":"INPUT","dependency":{}},"1e0921df-69a9-4a77-ab47-2efcde442e19":{"key":"1e0921df-69a9-4a77-ab47-2efcde442e19","type":"INPUT","dependency":{}},"bad00a40-57ce-4003-888e-08eac9b4c87f":{"key":"bad00a40-57ce-4003-888e-08eac9b4c87f","type":"INPUT","dependency":{}},"df8f2623-378e-4eb6-8c8b-623172a57ec7":{"key":"df8f2623-378e-4eb6-8c8b-623172a57ec7","type":"INPUT","dependency":{}},"evpnsviVirtualIpAddress":{"key":"evpnsviVirtualIpAddress","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnsecondarySviIpAddress":{"key":"evpnsecondarySviIpAddress","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"af062393-980c-459a-beaa-2469ea652951":{"key":"af062393-980c-459a-beaa-2469ea652951","type":"INPUT","isPageLayout":true},"b8933f38-9594-4542-921e-1ebb09fae63e":{"key":"b8933f38-9594-4542-921e-1ebb09fae63e","type":"INPUT","isPageLayout":true},"d88b98c1-3cbd-44cb-b309-f937c8359165":{"key":"d88b98c1-3cbd-44cb-b309-f937c8359165","type":"INPUT","isPageLayout":true},"l3vrfGroup":{"key":"l3vrfGroup","type":"INPUT","order":["l3vpnname","deviceHostname","l3vpnoverrideVariables"]},"devices":{"key":"devices","type":"INPUT","isPageLayout":true},"l3vlans":{"key":"l3vlans","type":"INPUT","isPageLayout":true},"b465bd6e-7f71-46fc-8f6e-b7d9b3ecb499":{"key":"b465bd6e-7f71-46fc-8f6e-b7d9b3ecb499","type":"INPUT","isPageLayout":true},"deviceHostname":{"key":"deviceHostname","isPageLayout":true,"type":"INPUT","showDefaultRow":false},"vlaNs":{"key":"vlaNs","type":"INPUT","isPageLayout":true},"evpnsviIpAddresses":{"key":"evpnsviIpAddresses","type":"INPUT","order":["evpnipPrefix","evpnsviVirtualIpAddress"]},"ipPrefixes":{"key":"ipPrefixes","type":"INPUT","order":["ipPrefix","virtualIpAddress"]},"sviIpAddresses":{"key":"sviIpAddresses","type":"INPUT","order":["l3ipPrefix","l3sviVirtualIpAddress","l3secondarySviIpAddress"]},"l3vpneBgpNeighbors":{"key":"l3vpneBgpNeighbors","type":"INPUT","isPageLayout":true},"deviceGroup":{"key":"deviceGroup","type":"INPUT","order":["vlaNs","l3staticRoutes","l3vpneBgpNeighbors","l3vpnPLprefixList","l3vpnAPasPathList","overrideVrfAttributes"]},"1151c978-5b2a-48ab-acc8-c24b3deb2f19":{"key":"1151c978-5b2a-48ab-acc8-c24b3deb2f19","isPageLayout":true,"type":"INPUT"},"98a83552-1053-4ac1-a5f2-b16733ac9a29":{"key":"98a83552-1053-4ac1-a5f2-b16733ac9a29","isPageLayout":true,"type":"INPUT"},"280937dd-bc64-4b54-902c-2cdf1f6955d8":{"key":"280937dd-bc64-4b54-902c-2cdf1f6955d8","type":"INPUT","order":["725559c3-da33-4c00-81f0-8f72d20d51be","5e677c39-1ff6-48a0-b951-4c6dd86a0ada"]},"86479ccf-cb7b-45d8-9a3e-c3dba00903c1":{"key":"86479ccf-cb7b-45d8-9a3e-c3dba00903c1","type":"INPUT","isPageLayout":true},"l3vpnRmInrouteMap":{"key":"l3vpnRmInrouteMap","type":"INPUT","order":["l3vpnRmInseqNumber","l3vpnRmInpermitDeny","l3vpnRmInprefixList","l3vpnRmInasPathList","l3vpnRmIncommunity","l3vpnRmInsetCommunity","l3vpnRmInlocalPref","l3vpnRmInweight","l3vpnrmiasPathPrependRepeat"]},"l3vpnNeighbor":{"key":"l3vpnNeighbor","type":"INPUT","order":["l3vpnpeerIp","l3vpnpeerAsn","l3vpndescription","l3vpnasSettings","fc18426c-9d8e-4d66-abc8-9d6e246f90b9","224d139d-c832-4b06-9728-4e21d99f854c","l3vpnRmInrouteMapIn","l3vpnRmOutrouteMapOut","l3vpnnremovePrivate","l3vpnneBgpMultiHopTtl","l3vpnbfd","l3vpnnweight","l3vpnpassword"]},"l3vpnPLprefixList":{"key":"l3vpnPLprefixList","type":"INPUT","isPageLayout":true},"l3vpnPLseqNumbers":{"key":"l3vpnPLseqNumbers","isPageLayout":false,"type":"INPUT"},"l3vpnAPasPathList":{"key":"l3vpnAPasPathList","isPageLayout":false,"type":"INPUT"},"evpneBgpNeighbors":{"key":"evpneBgpNeighbors","type":"INPUT","isPageLayout":true},"evpnipPrefix":{"key":"evpnipPrefix","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnpeerIp":{"key":"evpnpeerIp","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnPLprefixList":{"key":"evpnPLprefixList","isPageLayout":true,"type":"INPUT"},"evpnPLseqNumberGroup":{"key":"evpnPLseqNumberGroup","type":"INPUT","order":["evpnPLseqNumber","evpnPLpermitDeny","evpnPLprefix","evpnPLprefixLength","evpnPLmaskLength"]},"l3vpnPLSqvalue":{"key":"l3vpnPLSqvalue","type":"INPUT","order":["l3vpnPLseqNumber","l3vpnPLpermitDeny","l3vpnPLprefix","l3vpnPLprefixLength","l3vpnPLmaskLength"]},"evpnasSettings":{"key":"evpnasSettings","type":"INPUT","order":["evpnlocalAs","evpnallowAsIn","evpnasPathPrependDisable","evpnasPathRemoteAsReplaceOut"]},"evpnneighbor":{"key":"evpnneighbor","type":"INPUT","order":["evpnpeerIp","evpnpeerAsn","evpndescription","evpnasSettings","7ab76df3-8632-4fd0-a041-289acfb9c5d7","c17a6ae2-12cd-4d95-83da-2fb3ea4c0b1d","evpnRmInrouteMapIn","evpnRmOutrouteMapOut","evpnnremovePrivate","evpnneBgpMultiHopTtl","evpnbfd","evpnnweight","evpnpassword"]},"evpnpeerAsn":{"key":"evpnpeerAsn","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpndescription":{"key":"evpndescription","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnlocalAs":{"key":"evpnlocalAs","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnallowAsIn":{"key":"evpnallowAsIn","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnasPathPrependDisable":{"key":"evpnasPathPrependDisable","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnasPathRemoteAsReplaceOut":{"key":"evpnasPathRemoteAsReplaceOut","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnRmInseqNumber":{"key":"evpnRmInseqNumber","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnRmInpermitDeny":{"key":"evpnRmInpermitDeny","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnRmInprefixList":{"key":"evpnRmInprefixList","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmInlocalPref":{"key":"evpnRmInlocalPref","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmInasPathList":{"key":"evpnRmInasPathList","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmIncommunity":{"key":"evpnRmIncommunity","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmInsetCommunity":{"key":"evpnRmInsetCommunity","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmInweight":{"key":"evpnRmInweight","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmOutseqNumber":{"key":"evpnRmOutseqNumber","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmOutpermitDeny":{"key":"evpnRmOutpermitDeny","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmOutprefixList":{"key":"evpnRmOutprefixList","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmOutasPathPrepend":{"key":"evpnRmOutasPathPrepend","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmOutasPathList":{"key":"evpnRmOutasPathList","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmOutcommunity":{"key":"evpnRmOutcommunity","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmOutsetCommunity":{"key":"evpnRmOutsetCommunity","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnPLprefixListName":{"key":"evpnPLprefixListName","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnPLseqNumbers":{"key":"evpnPLseqNumbers","isPageLayout":false,"type":"INPUT"},"evpnPLseqNumber":{"key":"evpnPLseqNumber","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnPLpermitDeny":{"key":"evpnPLpermitDeny","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnPLprefix":{"key":"evpnPLprefix","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnPLprefixLength":{"key":"evpnPLprefixLength","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnAPasPathList":{"key":"evpnAPasPathList","type":"INPUT","isPageLayout":false},"evpnAPasPathListName":{"key":"evpnAPasPathListName","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnAPpermitDeny":{"key":"evpnAPpermitDeny","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnAPregEx":{"key":"evpnAPregEx","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"defaultRoutingInstance":{"key":"defaultRoutingInstance","type":"INPUT","isPageLayout":true},"dvlaNs":{"key":"dvlaNs","type":"INPUT","isPageLayout":true},"ddeviceHostname":{"key":"ddeviceHostname","type":"INPUT","isPageLayout":true,"showDefaultRow":false},"deBgpNeighbors":{"key":"deBgpNeighbors","type":"INPUT","isPageLayout":true},"dprefixList":{"key":"dprefixList","type":"INPUT","isPageLayout":true},"baa0d0b5-24fb-4bc9-ba12-75d704d32c9b":{"key":"baa0d0b5-24fb-4bc9-ba12-75d704d32c9b","type":"INPUT","isPageLayout":false},"drouteMapIn":{"key":"drouteMapIn","isPageLayout":false,"type":"INPUT"},"dirouteMap":{"key":"dirouteMap","type":"INPUT","order":["drmiseqNumber","drmipermitDeny","drmiprefixList","drmiasPathList","drmimatchCommunity","drmisetCommunity","drmilocalPref","drmiweight","1bacdbb9-0441-4ba6-bedf-b36c37002ca1"]},"e4ac50bd-6669-4607-83d3-209ce8a5eaf5":{"key":"e4ac50bd-6669-4607-83d3-209ce8a5eaf5","type":"INPUT","order":[]},"dorouteMap":{"key":"dorouteMap","type":"INPUT","order":["drmoseqNumber","drmopermitDeny","drmoprefixList","drmoasPathList","drmomatchCommunity","drmosetCommunity","drmoasPathPrepend"]},"l3vpnRmOutrouteMap":{"key":"l3vpnRmOutrouteMap","type":"INPUT","order":["l3vpnRmOutseqNumber","l3vpnRmOutpermitDeny","l3vpnRmOutprefixList","l3vpnRmOutasPathList","l3vpnRmOutcommunity","l3vpnRmOutsetCommunity","l3vpnRmOutasPathPrepend"]},"evpnRmInrouteMap":{"key":"evpnRmInrouteMap","type":"INPUT","order":["evpnRmInseqNumber","evpnrmipermitDeny","evpnRmInprefixList","evpnRmInasPathList","evpnRmIncommunity","evpnRmInsetCommunity","evpnRmInlocalPref","evpnRmInweight","evpnrmiasPathPrependRepeat"]},"evpnRmOutrouteMap":{"key":"evpnRmOutrouteMap","type":"INPUT","order":["evpnRmOutseqNumber","evpnRmOutpermitDeny","evpnRmOutprefixList","evpnRmOutasPathList","evpnRmOutcommunity","evpnRmOutsetCommunity","evpnRmOutasPathPrepend"]},"drouteMapOut":{"key":"drouteMapOut","isPageLayout":false,"type":"INPUT"},"ddeviceGroup":{"key":"ddeviceGroup","type":"INPUT","order":["dvlaNs","dstaticRoutes","drouterBgpAsn","deBgpNeighbors","dpeerGroups","dprefixList","dasPathList"]},"dpeerGroup":{"key":"dpeerGroup","type":"INPUT","order":["dpeerGroupName","dpgpeerAsn","dpgdescription","dpglocalAs","dpgnextHopSelf","dpgmaximumRoutes","dgpmaximumRoutesWarningLimit","dpgmaximumAcceptedRoutes","dpgrouteMapIn","dpgrouteMapOut","dpgremovePrivate","dpgeBgpMultiHopTtl","dpgbfd","dpgweight","dpgpassword"]},"dpeerGroups":{"key":"dpeerGroups","type":"INPUT","isPageLayout":true},"dneighbor":{"key":"dneighbor","type":"INPUT","order":["dpeerIp","dpeerAsn","ddescription","dredistribute","dnpeerGroup","dnnextHopSelf","dasSettings","dnrmirouteMapIn","dnrmorouteMapOut","dnremovePrivate","dneBgpMultiHopTtl","dnbfd","dnweight","dnpassword"]},"dnpeerGroup":{"key":"dnpeerGroup","dependency":{},"type":"INPUT"},"dpgrouteMapIn":{"key":"dpgrouteMapIn","isPageLayout":false,"type":"INPUT"},"dpgrouteMapOut":{"key":"dpgrouteMapOut","isPageLayout":false,"type":"INPUT"},"l3staticRoutes":{"key":"l3staticRoutes","isPageLayout":false,"type":"INPUT"},"estaticRoutes":{"key":"estaticRoutes","isPageLayout":false,"type":"INPUT"},"dstaticRoutes":{"key":"dstaticRoutes","isPageLayout":false,"type":"INPUT"},"dgpmaximumRoutesWarningLimit":{"key":"dgpmaximumRoutesWarningLimit","dependency":{},"type":"INPUT"},"dpgrouteMapInGroup":{"key":"dpgrouteMapInGroup","type":"INPUT","order":["dpgrmiseqNumber","dpgrouteMapInpermitDeny","dpgrmiprefixList","dpgrmiasPathList","dpgrmimatchCommunity","dpgrmisetCommunity","dpgrmilocalPref","dpgrmiweight","dpgrmiprependRepeat"]},"evpnAPasPathListGroup":{"key":"evpnAPasPathListGroup","type":"INPUT","order":["evpnAPasPathListName","evpnAPpermitDeny","evpnAPregEx"]},"l3vpnAPvalue":{"key":"l3vpnAPvalue","type":"INPUT","order":["l3vpnAPname","l3vpnAPpermitDeny","l3vpnAPregEx"]},"dpgrouteMapOutGroup":{"key":"dpgrouteMapOutGroup","type":"INPUT","order":["dpgrmoseqNumber","dpgrmopermitDeny","dpgrmoprefixList","dpgrmoasPathList","dpgrmomatchCommunity","dpgrmosetCommunity","dpgrmoprependRepeat"]},"dplseqNumberGroup":{"key":"dplseqNumberGroup","type":"INPUT","order":["dplseqNumber","dplpermitDeny","dplprefix","dplprefixLength","dplmaskLength"]},"dasPathListGroup":{"key":"dasPathListGroup","type":"INPUT","order":["dasPathListName","dasPathpermitDeny","dapregEx"]},"dnrmirouteMapIn":{"key":"dnrmirouteMapIn","isPageLayout":false,"type":"INPUT"},"dnrmorouteMapOut":{"key":"dnrmorouteMapOut","isPageLayout":false,"type":"INPUT"},"evpnRmOutrouteMapOut":{"key":"evpnRmOutrouteMapOut","isPageLayout":false,"type":"INPUT"},"evpnRmInrouteMapIn":{"key":"evpnRmInrouteMapIn","isPageLayout":false,"type":"INPUT"},"value":{"key":"value","type":"INPUT","order":["vlanId","l3vlanName","l3vpninterface","ipPrefixes","l3vpnsecondaryIpAddresses"]},"dvlaNsGroup":{"key":"dvlaNsGroup","type":"INPUT","order":["dvlanId","dvlanName","dinterface","dipPrefixes","dsecondaryIpAddresses"]},"480362e8-7da0-4f00-bb99-0197e4520fe6":{"key":"480362e8-7da0-4f00-bb99-0197e4520fe6","isPageLayout":true,"type":"INPUT"},"evpnsecondaryIpAddresses":{"key":"evpnsecondaryIpAddresses","isPageLayout":false,"type":"INPUT"},"l3vpnsecondaryIpAddresses":{"key":"l3vpnsecondaryIpAddresses","isPageLayout":false,"type":"INPUT"},"dsecondaryIpAddresses":{"key":"dsecondaryIpAddresses","isPageLayout":false,"type":"INPUT"},"vpwsswitches":{"key":"vpwsswitches","isPageLayout":false,"type":"INPUT","showDefaultRow":false},"patchPanel":{"key":"patchPanel","type":"INPUT","isPageLayout":false},"vpws":{"key":"vpws","type":"INPUT","isPageLayout":true},"vpwsvalue":{"key":"vpwsvalue","type":"INPUT","order":["patchName","pseudowireName"]},"ddefaultRoutingInstance":{"key":"ddefaultRoutingInstance","dependency":{},"type":"INPUT"},"dvlanId":{"key":"dvlanId","dependency":{},"type":"INPUT"},"dvlanName":{"key":"dvlanName","dependency":{},"type":"INPUT"},"dinterface":{"key":"dinterface","dependency":{},"type":"INPUT"},"dipPrefix":{"key":"dipPrefix","dependency":{},"type":"INPUT"},"dvirtualIpPrefix":{"key":"dvirtualIpPrefix","dependency":{},"type":"INPUT"},"dsecondaryIpAddress":{"key":"dsecondaryIpAddress","dependency":{},"type":"INPUT"},"dsecondary":{"key":"dsecondary","dependency":{},"type":"INPUT"},"dprefix":{"key":"dprefix","dependency":{},"type":"INPUT"},"dnextHop":{"key":"dnextHop","dependency":{},"type":"INPUT"},"dsrname":{"key":"dsrname","dependency":{},"type":"INPUT"},"dpeerIp":{"key":"dpeerIp","dependency":{},"type":"INPUT"},"dpeerAsn":{"key":"dpeerAsn","dependency":{},"type":"INPUT"},"ddescription":{"key":"ddescription","dependency":{},"type":"INPUT"},"disis":{"key":"disis","dependency":{},"type":"INPUT"},"dospf":{"key":"dospf","dependency":{},"type":"INPUT"},"dconnected":{"key":"dconnected","dependency":{},"type":"INPUT"},"dnnextHopSelf":{"key":"dnnextHopSelf","dependency":{},"type":"INPUT"},"dlocalAs":{"key":"dlocalAs","dependency":{},"type":"INPUT"},"dallowAsIn":{"key":"dallowAsIn","dependency":{},"type":"INPUT"},"dasPathPrependOut":{"key":"dasPathPrependOut","dependency":{},"type":"INPUT"},"dasPathRemoteAsReplaceOut":{"key":"dasPathRemoteAsReplaceOut","dependency":{},"type":"INPUT"},"dnrmiseqNumber":{"key":"dnrmiseqNumber","dependency":{},"type":"INPUT"},"dnrmipermitDeny":{"key":"dnrmipermitDeny","dependency":{},"type":"INPUT"},"dnrmiprefixList":{"key":"dnrmiprefixList","dependency":{},"type":"INPUT"},"dnrmiasPathList":{"key":"dnrmiasPathList","dependency":{},"type":"INPUT"},"dnrmicommunity":{"key":"dnrmicommunity","dependency":{},"type":"INPUT"},"dnrmisetCommunity":{"key":"dnrmisetCommunity","dependency":{},"type":"INPUT"},"dnrmilocalPref":{"key":"dnrmilocalPref","dependency":{},"type":"INPUT"},"dnrmiweight":{"key":"dnrmiweight","dependency":{},"type":"INPUT"},"dnrmiprependRepeat":{"key":"dnrmiprependRepeat","dependency":{},"type":"INPUT"},"ospftag":{"key":"ospftag","dependency":{},"type":"INPUT"},"dnrmoseqNumber":{"key":"dnrmoseqNumber","dependency":{},"type":"INPUT"},"dnrmopermitDeny":{"key":"dnrmopermitDeny","dependency":{},"type":"INPUT"},"dnrmoprefixList":{"key":"dnrmoprefixList","dependency":{},"type":"INPUT"},"dnrmoasPathList":{"key":"dnrmoasPathList","dependency":{},"type":"INPUT"},"dnrmocommunity":{"key":"dnrmocommunity","dependency":{},"type":"INPUT"},"dnrmosetCommunity":{"key":"dnrmosetCommunity","dependency":{},"type":"INPUT"},"dnrmoprependRepeat":{"key":"dnrmoprependRepeat","dependency":{},"type":"INPUT"},"dnremovePrivate":{"key":"dnremovePrivate","dependency":{},"type":"INPUT"},"dneBgpMultiHopTtl":{"key":"dneBgpMultiHopTtl","dependency":{},"type":"INPUT"},"dnbfd":{"key":"dnbfd","dependency":{},"type":"INPUT"},"dnweight":{"key":"dnweight","dependency":{},"type":"INPUT"},"dnpassword":{"key":"dnpassword","dependency":{},"type":"INPUT"},"dpeerGroupName":{"key":"dpeerGroupName","dependency":{},"type":"INPUT"},"dpgpeerAsn":{"key":"dpgpeerAsn","dependency":{},"type":"INPUT"},"dpgdescription":{"key":"dpgdescription","dependency":{},"type":"INPUT"},"dpglocalAs":{"key":"dpglocalAs","dependency":{},"type":"INPUT"},"dpgnextHopSelf":{"key":"dpgnextHopSelf","dependency":{},"type":"INPUT"},"dpgmaximumRoutes":{"key":"dpgmaximumRoutes","dependency":{},"type":"INPUT"},"dpgmaximumAcceptedRoutes":{"key":"dpgmaximumAcceptedRoutes","dependency":{},"type":"INPUT"},"dpgrmiseqNumber":{"key":"dpgrmiseqNumber","dependency":{},"type":"INPUT"},"dpgrouteMapInpermitDeny":{"key":"dpgrouteMapInpermitDeny","dependency":{},"type":"INPUT"},"dpgrmiprefixList":{"key":"dpgrmiprefixList","dependency":{},"type":"INPUT"},"dpgrmiasPathList":{"key":"dpgrmiasPathList","dependency":{},"type":"INPUT"},"dpgrmimatchCommunity":{"key":"dpgrmimatchCommunity","dependency":{},"type":"INPUT"},"dpgrmisetCommunity":{"key":"dpgrmisetCommunity","dependency":{},"type":"INPUT"},"dpgrmilocalPref":{"key":"dpgrmilocalPref","dependency":{},"type":"INPUT"},"dpgrmiweight":{"key":"dpgrmiweight","dependency":{},"type":"INPUT"},"dpgrmiprependRepeat":{"key":"dpgrmiprependRepeat","dependency":{},"type":"INPUT"},"dpgrmoseqNumber":{"key":"dpgrmoseqNumber","dependency":{},"type":"INPUT"},"dpgrmopermitDeny":{"key":"dpgrmopermitDeny","dependency":{},"type":"INPUT"},"dpgrmoprefixList":{"key":"dpgrmoprefixList","dependency":{},"type":"INPUT"},"dpgrmoasPathList":{"key":"dpgrmoasPathList","dependency":{},"type":"INPUT"},"dpgrmomatchCommunity":{"key":"dpgrmomatchCommunity","dependency":{},"type":"INPUT"},"dpgrmosetCommunity":{"key":"dpgrmosetCommunity","dependency":{},"type":"INPUT"},"dpgrmoprependRepeat":{"key":"dpgrmoprependRepeat","dependency":{},"type":"INPUT"},"dpgremovePrivate":{"key":"dpgremovePrivate","dependency":{},"type":"INPUT"},"dpgpassword":{"key":"dpgpassword","dependency":{},"type":"INPUT"},"dpgweight":{"key":"dpgweight","dependency":{},"type":"INPUT"},"dpgbfd":{"key":"dpgbfd","dependency":{},"type":"INPUT"},"dpgeBgpMultiHopTtl":{"key":"dpgeBgpMultiHopTtl","dependency":{},"type":"INPUT"},"dprefixListName":{"key":"dprefixListName","dependency":{},"type":"INPUT"},"dplseqNumber":{"key":"dplseqNumber","dependency":{},"type":"INPUT"},"dplpermitDeny":{"key":"dplpermitDeny","dependency":{},"type":"INPUT"},"dplprefix":{"key":"dplprefix","dependency":{},"type":"INPUT"},"dplprefixLength":{"key":"dplprefixLength","dependency":{},"type":"INPUT"},"dplmaskLength":{"key":"dplmaskLength","dependency":{},"type":"INPUT"},"dasPathListName":{"key":"dasPathListName","dependency":{},"type":"INPUT"},"dasPathpermitDeny":{"key":"dasPathpermitDeny","dependency":{},"type":"INPUT"},"dapregEx":{"key":"dapregEx","dependency":{},"type":"INPUT"},"23d491fe-d0bb-483a-9469-6a4deabe8b34":{"key":"23d491fe-d0bb-483a-9469-6a4deabe8b34","valueToLabelMap":{"True":"Yes","False":"No"},"type":"INPUT"},"6e5899e6-4e8b-4189-ad61-417ce5206f8c":{"key":"6e5899e6-4e8b-4189-ad61-417ce5206f8c","valueToLabelMap":{"True":"Yes","False":"No"},"type":"INPUT"},"cfc9aa55-4122-44d6-a67b-ec9227b99e5b":{"key":"cfc9aa55-4122-44d6-a67b-ec9227b99e5b","valueToLabelMap":{"True":"Yes","False":"No"},"type":"INPUT"},"a7137bb7-03ba-42e8-b1ab-b1b1a6adf963":{"key":"a7137bb7-03ba-42e8-b1ab-b1b1a6adf963","valueToLabelMap":{"True":"Yes","False":"No"},"type":"INPUT"},"drouterBgpAsn":{"key":"drouterBgpAsn","dependency":{},"type":"INPUT"},"vpwsName":{"key":"vpwsName","dependency":{},"type":"INPUT"},"leftright":{"key":"leftright","dependency":{},"type":"INPUT"},"patchName":{"key":"patchName","dependency":{},"type":"INPUT"},"leftinterface":{"key":"leftinterface","dependency":{},"type":"INPUT"},"rightinterface":{"key":"rightinterface","dependency":{},"type":"INPUT"},"pseudowireName":{"key":"pseudowireName","dependency":{},"type":"INPUT"},"vpwsrouteDistinguisher":{"key":"vpwsrouteDistinguisher","dependency":{},"type":"INPUT"},"vpwsrouteTarget":{"key":"vpwsrouteTarget","dependency":{},"type":"INPUT"},"vpwsVrfAttributeFormats":{"key":"vpwsVrfAttributeFormats","type":"INPUT","order":["vpwsvrfRouteDistinguisherFormat","vpwsvrfRouteTargetFormat"]},"vpwsDefinition":{"key":"vpwsDefinition","type":"INPUT","order":["vpwsName","vpwsmultihoming","vpwsswitches","patchPanel","vpwsoverrideVariables"]},"f7a381a5-335a-4e95-bb41-62c5c502906a":{"key":"f7a381a5-335a-4e95-bb41-62c5c502906a","type":"INPUT","isPageLayout":false},"d63c7b59-1ded-4f63-a0d6-beb71ed81aaa":{"key":"d63c7b59-1ded-4f63-a0d6-beb71ed81aaa","type":"INPUT","order":["e7a63234-6630-48c5-b126-3429ff6bb1a6","e417f26d-6951-4eea-a3de-a628f31d01f5","abd01751-6fdd-4566-a64c-62ebb91b5386","f60ca2da-4f6e-471f-b1d6-5d2f25ddcae3"]},"011b4937-f829-4f02-8672-3b83a584616d":{"key":"011b4937-f829-4f02-8672-3b83a584616d","type":"INPUT","isPageLayout":false},"evpnmultihoming":{"key":"evpnmultihoming","type":"INPUT","isPageLayout":false},"vpwsdeviceGroup":{"key":"vpwsdeviceGroup","type":"INPUT","order":["1e76b63a-f28d-4c9e-a143-9c1c9ce7f732","leftright","9be4b784-5f2e-44c6-81c2-e26910c42312","7cd11257-b9fd-462e-b9d1-05fe7c10f493"]}}'
