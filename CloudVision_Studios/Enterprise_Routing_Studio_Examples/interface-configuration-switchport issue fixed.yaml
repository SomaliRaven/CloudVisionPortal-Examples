- service: arista.studio.v1.StudioConfigService
  method: Set
  body:
    value:
      key:
        studio_id: f54e42a2-89e5-4ff9-8b24-0cb1deff16f0
        workspace_id: e98050e6-5d07-414a-866f-73b86091a91a
      display_name: Interface Configuration (Clone)
      description: Configure device interfaces and interface profiles, and assign administrative state, VLANs, and other attributes
      template:
        type: TEMPLATE_TYPE_MAKO
        body: |
          <%
          debug = False
          class baseInterface:
            def __init__(self):
              self.enabled = None
              self.mode = None
              self.accessVlan = None
              self.desc = None
              self.nativeVlanId = None
              self.allowedVlans = None
              self.phoneVlanId = None
          class interface(baseInterface):
            def __init__(self):
              super().__init__()
              self.speed = None
              self.groupNum = None
          class channelGroup(baseInterface):
            def __init__(self):
              super().__init__()
              self.mlagEnabled = None

          def processInterface(intfName, intfCfg, profileCfg):
            intf = interfaces.get(intfName, interface())
            intf.enabled = intfCfg.get('enabled')
            intf.speed = intfCfg.get('speed')
            intf.groupNum = intfCfg.get('channelGroup')
            accessVlan = intfCfg.get('accessVlan')
            mode = 'access' if accessVlan else None
            desc = intfCfg.get('description')
            group = None
            mlagEnabled = None
            if profileCfg:
                if intf.speed == 'auto':
                    intf.speed = profileCfg.get('speed')
                intf.groupNum = intf.groupNum or profileCfg.get('channelGroup')
                profileMode = profileCfg.get('mode')
                mlagEnabled = profileCfg.get('mlagEnabled')
                if mode == 'access':
                    assert profileMode == 'access', 'Interface %s: Access VLAN cannot be specified along with profile %s' %(intfName, profileMode)
                else:
                    mode = profileMode
                if mode == 'access':
                    accessVlan = accessVlan or profileCfg.get('accessVlanId')
                    assert accessVlan > 0, 'Interface %s: Access Vlan must be specified for access mode' %(intfName)
                profileDesc = profileCfg.get('profileDescription')
                if profileDesc:
                    if '$1' in profileDesc:
                        if not desc:
                            raise Exception('Interface %s is missing a description, '
                                'needed for the profile %r template' % (intfName, profileName))
                        desc = profileDesc.replace('$1', desc)
                    else:
                        desc = profileDesc
            if intf.groupNum != None and intf.groupNum != 0:
                group = groups.get(intf.groupNum, channelGroup())
                group.enabled = True
                group.mode = mode
                group.accessVlan = accessVlan
                group.nativeVlanId = profileCfg.get('nativeVlanId') if profileCfg else None
                group.allowedVlans = profileCfg.get('allowedVlans') if profileCfg else None
                group.phoneVlanId = profileCfg.get('phoneVlanId') if profileCfg else None
                group.desc = desc
                intf.desc = intfCfg.get('description')
                group.mlagEnabled = mlagEnabled or intfCfg.get('mlagEnabled')
            else:
                intf.mode = mode
                intf.accessVlan = accessVlan
                intf.nativeVlanId = profileCfg.get('nativeVlanId') if profileCfg else None
                intf.allowedVlans = profileCfg.get('allowedVlans') if profileCfg else None
                intf.phoneVlanId = profileCfg.get('phoneVlanId') if profileCfg else None
                intf.desc = desc
            interfaces[intfName] = intf
            if group:
              groups[intf.groupNum] = group

          if not profiles:
            return
          my_device = ctx.getDevice()
          groups = {}
          interfaces = {}
          for intf in my_device.getInterfaces():
              intfName = intf.name
              intfVal = devices.resolve().interface.resolve(intfName, strict=True)
              if not intfVal or not intfVal.get('intfConfig'):
                  continue
              intfCfg = intfVal['intfConfig']
              ## Don't output config if nothing interesting is set
              if len(intfCfg) == 0 or not intfCfg.get('enabled'):
                continue
              # Note: we are not using the EOS 'interface profiles' feature for now because of
              # they make config pushes slow in certain releases (519556).
              profileName = intfCfg.get('profile')
              matchedProfile = None
              if profileName:
                  matchedProfile = next((p for p in profiles if profileName == p['name']), None)
                  if not matchedProfile:
                      raise Exception('Found no matching profile "%s" for interface %s' % (profileName, intfName))
              processInterface(intfName, intfCfg, matchedProfile)
          %>\

          <%def name="makeIntfCfg(intfName, intfCfg)">
              <%
                # Interface-specific settings (intfCfg) override profile settings (profileCfg)
                # Speed is always taken from profile if not set at interface level.
                # Description is always taken from profile, and template-substituted with interface description
              %>
          interface ${intfName}
            %if intfCfg.enabled:
              no shutdown
            %endif
            %if intfCfg.mode == 'access':
              switchport
              switchport mode access
              switchport access vlan ${intfCfg.accessVlan}
              spanning-tree portfast
            %elif intfCfg.mode == 'trunk':
              switchport
              switchport mode trunk
              switchport trunk native vlan ${intfCfg.nativeVlanId}
              switchport trunk allowed vlan ${intfCfg.allowedVlans}
            %elif intfCfg.mode == 'routed':
              no switchport
            %elif intfCfg.mode == 'phone':
              switchport
              switchport mode trunk phone
              switchport trunk native vlan ${intfCfg.nativeVlanId}
              switchport phone vlan ${intfCfg.phoneVlanId}
              switchport trunk allowed vlan ${intfCfg.allowedVlans}
              ! switchport phone trunk untagged???
            %endif
            %if intfCfg.speed == "auto":
              speed auto
            %elif intfCfg.speed:
              speed forced ${intfCfg.speed}
            %endif
            %if intfCfg.desc:
              description ${intfCfg.desc}
            %endif
          </%def>\

          <%def name="makeChannelMemberCfg(intfName, intfCfg)">
              <%
                # Simple config for a port channel member interface
              %>
          interface ${intfName}
            %if intfCfg.enabled:
              no shutdown
            %endif
            %if intfCfg.speed == "auto":
              speed auto
            %elif intfCfg.speed:
              speed forced ${intfCfg.speed}
            %endif
            %if intfCfg.desc:
              description ${intfCfg.desc}
            %endif
              channel-group ${intfCfg.groupNum} mode active
          </%def>\

          <%def name="makeChannelGroupCfg(groupNum, groupCfg)">
              <%
                # config for the port channel interfaces
              %>
          interface Port-Channel ${groupNum}
            %if groupCfg.enabled:
              no shutdown
            %endif
            %if groupCfg.mlagEnabled and groupCfg.mode != 'routed':
              mlag ${groupNum}
            %endif
            %if groupCfg.mode == 'access':
              switchport
              switchport mode access
              switchport access vlan ${groupCfg.accessVlan}
              spanning-tree portfast
            %elif groupCfg.mode == 'trunk':
              switchport
              switchport mode trunk
              switchport trunk native vlan ${groupCfg.nativeVlanId}
              switchport trunk allowed vlan ${groupCfg.allowedVlans}
            %elif groupCfg.mode == 'routed':
              no switchport
            %elif groupCfg.mode == 'phone':
              switchport
              switchport mode trunk phone
              switchport trunk native vlan ${groupCfg.nativeVlanId}
              switchport phone vlan ${groupCfg.phoneVlanId}
              switchport trunk allowed vlan ${groupCfg.allowedVlans}
              ! switchport phone trunk untagged???
            %endif
            %if groupCfg.desc:
              description ${groupCfg.desc}
            %endif
          </%def>\

          % for intfName, intfCfg in sorted(interfaces.items()):
          % if intfCfg.groupNum and intfCfg.groupNum > 0:
          ${makeChannelMemberCfg(intfName, intfCfg)}
          % else:
          ${makeIntfCfg(intfName, intfCfg)}
          % endif

          %if debug:
          % for name, intf in interfaces.items():
          intf: ${name}, ${vars(intf).items()}
          % endfor
          % for num, group in groups.items():
          group: ${num}, ${vars(group).items()}
          % endfor
          %endif
          % endfor

          % for groupNum, groupCfg in sorted(groups.items()):
          ${makeChannelGroupCfg(groupNum, groupCfg)}
          % endfor
      input_schema:
        fields:
          values:
            profileName:
              id: profileName
              name: name
              label: Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            profileDescription:
              id: profileDescription
              name: profileDescription
              label: Profile Description
              description: Create a description for this profile. Entering "$1" will add the device interface description when applied to a device.
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            profileSpeed:
              id: profileSpeed
              name: speed
              label: Speed
              description: Set the speed of the interface.
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: auto
                static_options:
                  values:
                    - auto
                    - 10half
                    - 10full
                    - 100full
                    - 1gfull
                    - 10gfull
                    - 25gfull
                    - 40gfull
                    - 100gfull
                format: null
                length: null
                pattern: null
                dynamic_options: null
            mode:
              id: mode
              name: mode
              label: Mode
              description: Set this as a VLAN access interface, as a trunk interface, a routed interface, or as a phone interface for VLAN unaware IP phones.
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: access
                static_options:
                  values:
                    - access
                    - trunk
                    - routed
                    - phone
                format: null
                length: null
                pattern: null
                dynamic_options: null
            accessVlanId:
              id: accessVlanId
              name: accessVlanId
              label: Access VLAN ID
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: '0'
                range: 0..4094
                static_options: null
                dynamic_options: null
            nativeVlanId:
              id: nativeVlanId
              name: nativeVlanId
              label: Native VLAN ID
              description: Assign a VLAN that untagged traffic arriving on this trunk will be tagged with.
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: '0'
                range: 0..4094
                static_options: null
                dynamic_options: null
            phoneVlanId:
              id: phoneVlanId
              name: phoneVlanId
              label: Phone VLAN ID
              description: VoIP VLAN that enables LLDP-based classification of IP phones using the Type 7 System Capabilities TLV.
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: '0'
                range: 0..4094
                static_options: null
                dynamic_options: null
            allowedVlans:
              id: allowedVlans
              name: allowedVlans
              label: Allowed VLANs
              description: List the VLAN IDs that this trunk can carry. Separate values with a comma and including continuous values with a hyphen (e.g. 4, 10-16, 100).
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            profileChannelGroup:
              id: profileChannelGroup
              name: channelGroup
              label: Port Channel Group
              description: Enter a Port Channel ID if the interface is in a Link Aggregation Group (LAG)
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: 0..999999
                static_options: null
                dynamic_options: null
            profileMlagEnabled:
              id: profileMlagEnabled
              name: mlagEnabled
              label: enable MLAG
              description: Enable or disable the MLAG ID if the interface is in a Link Aggregation Group (LAG)
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: false
            profileValue:
              id: profileValue
              name: value
              label: Profiles Group
              description: Group of members for Profiles
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - profileName
                    - profileDescription
                    - profileSpeed
                    - mode
                    - accessVlanId
                    - nativeVlanId
                    - phoneVlanId
                    - allowedVlans
                    - profileChannelGroup
                    - profileMlagEnabled
            profiles:
              id: profiles
              name: profiles
              label: Profile
              description: Create or edit profiles to share interface attributes across devices.
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: profileValue
                key: profileName
            enabled:
              id: enabled
              name: enabled
              label: Enabled
              description: Enable or disable the interface for adminstration
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: false
            description:
              id: description
              name: description
              label: Description
              description: Enter a port description string (max. 30 characters)
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            accessVlan:
              id: accessVlan
              name: accessVlan
              label: Access VLAN ID
              description: Enter the VLAN ID for this port
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: '0'
                range: 0..4094
                static_options: null
                dynamic_options: null
            speed:
              id: speed
              name: speed
              label: Interface Speed
              description: Set the interface speed
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: auto
                static_options:
                  values:
                    - auto
                    - 10half
                    - 10full
                    - 100full
                    - 1gfull
                    - 10gfull
                    - 25gfull
                    - 40gfull
                    - 100gfull
                format: null
                length: null
                pattern: null
                dynamic_options: null
            profile:
              id: profile
              name: profile
              label: Profile
              description: Assign an interface profile that you've created to this device interface
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options:
                  values:
                    - '{"fieldId":"profileName"}'
            channelGroup:
              id: channelGroup
              name: channelGroup
              label: Port Channel Group
              description: Enter a Port Channel ID if this interface is in a Link Aggregation Group (LAG)
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: 0..999999
                static_options: null
                dynamic_options: null
            mlagEnabled:
              id: mlagEnabled
              name: mlagEnabled
              label: enable MLAG
              description: Enable or disable the MLAG ID if this interface is in a Link Aggregation Group (LAG)
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: false
            intfConfig:
              id: intfConfig
              name: intfConfig
              label: Interface specific configuration
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - enabled
                    - description
                    - accessVlan
                    - speed
                    - profile
                    - channelGroup
                    - mlagEnabled
            interface:
              id: interface
              name: interface
              label: Interface
              description: Configure the device's interface attributes.
              required: false
              type: INPUT_FIELD_TYPE_RESOLVER
              resolver_props:
                base_field_id: intfConfig
                display_mode: RESOLVER_FIELD_DISPLAY_MODE_ALL
                input_mode: RESOLVER_FIELD_INPUT_MODE_SINGLE_INTERFACE_TAG
                input_tag_label: interface
                tag_filter_query: null
            devices:
              id: devices
              name: devices
              label: Device
              description: Select a device to configure its interfaces and to assign a profile.
              required: false
              type: INPUT_FIELD_TYPE_RESOLVER
              resolver_props:
                base_field_id: interface
                display_mode: RESOLVER_FIELD_DISPLAY_MODE_ALL
                input_mode: RESOLVER_FIELD_INPUT_MODE_SINGLE_DEVICE_TAG
                input_tag_label: device
                tag_filter_query: null
            root:
              id: root
              name: ''
              label: ''
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - profiles
                    - devices
        layout:
          value: '{"accessVlanId":{"key":"accessVlanId","dependency":{"mode":{"value":["access"],"mode":"SHOW"}},"type":"INPUT"},"nativeVlanId":{"key":"nativeVlanId","dependency":{"mode":{"value":["trunk","phone"],"mode":"SHOW"}},"type":"INPUT"},"allowedVlans":{"key":"allowedVlans","dependency":{"mode":{"value":["trunk","phone"],"mode":"SHOW"}},"type":"INPUT"},"phoneVlanId":{"key":"phoneVlanId","dependency":{"mode":{"value":["phone"],"mode":"SHOW"}},"type":"INPUT"},"profileMlagEnabled":{"key":"profileMlagEnabled","dependency":{"mode":{"value":["access","trunk","phone"],"mode":"SHOW"}},"type":"INPUT"},"intfConfig":{"key":"intfConfig","type":"INPUT","order":["enabled","profile","description","accessVlan","speed","channelGroup","mlagEnabled"]},"profiles":{"key":"profiles","type":"INPUT","isPageLayout":true}}'
