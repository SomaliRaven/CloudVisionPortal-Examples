- service: arista.studio.v1.StudioConfigService
  method: Set
  body:
    value:
      key:
        studio_id: bd845875-2702-41bb-9912-b6c5dd8ce474
        workspace_id: bac9b954-8f28-494b-bd1c-753fadd87dcd
      display_name: VPWS Services v5.2.4
      description: 'Define and configure EVPN VPWS network services for MPLS networks including EVPN, VPWS, and L3VPN. Required tags: router_bgp.as:"number", router_bgp.router_id:"ip address".'
      template:
        type: TEMPLATE_TYPE_MAKO
        body: |
          <%
          import sys, os, json, ipaddress, re
          from collections import OrderedDict
          import tagsearch_python.tagsearch_pb2_grpc as tsgr
          import tagsearch_python.tagsearch_pb2 as tspb
          from arista.tag.v2.tag_pb2 import Tag, TagKey, TagAssignment, TagAssignmentKey, TagAssignmentConfig

          workspace_id = ctx.studio.workspaceId
          my_device = ctx.getDevice()
          my_device_id = my_device.id

          def resolveWithContext(self, device=None):
              '''This function is same as resolve(), but in addition, returns a context object as the
                  second return value, from which additional information can be obtained.
              '''
              if device is None:
                  device = self.device
              for i, inp in enumerate(self.inputs):
                  devs = inp.get("devices")
                  query_str = inp.get("tags", {"query": ""}).get("query", "")
                  if devs is None:
                      continue
                  if device in devs:
                      return inp.get("inputs"), i
              return None, None

          def convert(text):
              return int(text) if text.isdigit() else text.lower()

          def alphanum_key(key):
              return [convert(c) for c in re.split('([0-9]+)', str(key))]

          def natural_sort(iterable):
              if iterable is None:
                  return list()
              return sorted(iterable, key=alphanum_key)

          def string_to_list(string_to_convert):
              numbers = []
              segments = [ segment.strip() for segment in string_to_convert.split(",") ]
              for segment in segments:
                  if "-" in segment:
                      for i in range(int(segment.split("-")[0]), int(segment.split("-")[1]) + 1):
                          numbers.append(i)
                  else:
                      numbers.append(int(segment))
              return numbers

          from itertools import count, groupby
          def list_compress(list_to_compress):
              if not isinstance(list_to_compress, list):
                  raise TypeError('value must be of type list, got %s' % type(list_to_compress))
              G = (list(x) for y, x in groupby(sorted(list_to_compress), lambda x, c=count(): next(c) - x))
              return (",".join("-".join(map(str, (g[0], g[-1])[:len(g)])) for g in G))

          def get_tag_values_applied_to_device(tag_assignment_key):
              label = tag_assignment_key.label.value
              value = tag_assignment_key.value.value
              device_id = tag_assignment_key.device_id.value
              workspace_id = tag_assignment_key.workspace_id.value
              tsclient = ctx.getApiClient(tsgr.TagSearchStub)

              matching_tags = []

              tvsr = tspb.TagValueSearchRequest(label=label, workspace_id=workspace_id, topology_studio_request=True)
              for tag in tsclient.GetTagValueSuggestions(tvsr).tags:
                  if not tag.value:
                      continue
                  query= "{}:\"{}\" AND device:{}".format(tag.label, tag.value, device_id)
                  tagmr = tspb.TagMatchRequestV2(query=query, workspace_id=workspace_id, topology_studio_request=True)
                  tagmresp =  tsclient.GetTagMatchesV2(tagmr)
                  for match in tagmresp.matches:
                      if match.device.device_id == device_id:
                          matching_tags.append(tag)

              return matching_tags

          class SwitchDetails:
              def __init__(self):
                  self.id = None
                  self.model = None #Model tag
                  self.eos_version = None #Eos version tag
                  self.hostname = None #hostname tag
                  self.config = {
                      "vlans": {},
                      "vrfs": {},
                      "patch_panels": {},
                      "vlan_interfaces": {},
                      "router_bgp":{
                          "as": None,
                          "router_id": None,
                          "vrfs": {},
                          "vlans": {}
                      },
                  }

              def set_config_params_via_tags(self):
                  self.config["router_bgp"]["as"] = self.get_bgp_asn()
                  self.config["router_bgp"]["router_id"] = self.get_bgp_router_id()


              def check_config_parameters(self):
                  assert self.config["router_bgp"]["as"] is not None, "{} is not set.  Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                          "BGP ASN", "router_bgp.as", self.hostname
                      )
                  assert self.config["router_bgp"]["router_id"] is not None, "{} is not set.  Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                          "BGP Router ID", "router_bgp.router_id", self.hostname
                      )

              def get_bgp_asn(self):
                  tag_assignment_key = TagAssignmentKey()
                  tag_assignment_key.workspace_id.value = workspace_id
                  tag_assignment_key.element_type = 1
                  tag_assignment_key.label.value = "router_bgp.as"
                  tag_assignment_key.device_id.value = self.id
                  tags = get_tag_values_applied_to_device(tag_assignment_key)
                  for tag in tags:
                      return tag.value
                  assert False, "{} is not set. Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                      "BGP ASN Tag", tag_assignment_key.label.value, self.hostname
                  )

              def get_bgp_router_id(self):
                  tag_assignment_key = TagAssignmentKey()
                  tag_assignment_key.workspace_id.value = workspace_id
                  tag_assignment_key.element_type = 1
                  tag_assignment_key.label.value = "router_bgp.router_id"
                  tag_assignment_key.device_id.value = self.id
                  tags = get_tag_values_applied_to_device(tag_assignment_key)
                  for tag in tags:
                      return tag.value
                  assert False, "{} is not set. Please apply a '{}' tag to {} in the Tags section of Provisioning with the appropriate workspace selected".format(
                      "BGP Router ID Tag", tag_assignment_key.label.value, self.hostname
                  )

              def configure_vpwsvrfs(self, vrfs):
                  vpws_admin_field_key_words = {
                      "SEQ": "vrf_details['rdrt']",
                      "ASN": "self.config['router_bgp']['as']",
                      "Router-ID": "self.config['router_bgp']['router_id']"
                  }
                  for vrf, vrf_details in vrfs.items():
                      self.config["vrfs"][vrf] = {
                          "description": None,
                          "ip_routing": False
                      }
                      switch_rd = []
                      for rd_segment in vrf_details["route_distinguisher"].split(":"):
                          if vpws_admin_field_key_words.get(rd_segment):
                              switch_rd.append(  str(eval(vpws_admin_field_key_words[rd_segment])) )
                          else:
                              switch_rd.append(rd_segment)
                      switch_rd = ":".join(switch_rd)
                      switch_rt = []
                      for rt_segment in vrf_details["route_target"].split(":"):
                          if vpws_admin_field_key_words.get(rt_segment):
                              switch_rt.append(  str(eval(vpws_admin_field_key_words[rt_segment])) )
                          else:
                              switch_rt.append(rt_segment)
                      switch_rt = ":".join(switch_rt)
                      self.config["router_bgp"]["vrfs"][vrf] = {
                          "rd": switch_rd,
                          "route_targets": {
                              "import": {
                                  "evpn": [switch_rt]
                              },
                              "export": {
                                  "evpn": [switch_rt]
                              }
                          },
                          "router_id": self.config["router_bgp"]["router_id"]
                      }

              def configure_vpwspp(self, pps):
                  for pp, pp_details in pps.items():
                      self.config["patch_panels"][pp] = {}
                      self.config["patch_panels"][pp] = pp_details

          class LeafDetails(SwitchDetails):
              def __init__(self):
                  super().__init__()
                  self.leaf_number = None
                  self.leaf_domain = None


          def get_switch_details(device_id):
              labels_to_fields = {
                  "hostname": "hostname",
                  "model": "model",
                  "DC": "dc",
                  "Network": "dc_pod",
                  "PE-Number": "leaf_number",
                  "PE-Domain": "leaf_domain",
              }
              switch = None
              tsclient = ctx.getApiClient(tsgr.TagSearchStub)
              found_switch = False

              query= "{}:\"{}\" AND device:{}".format("Role", "Leaf", device_id)
              tagmr = tspb.TagMatchRequestV2(query=query, workspace_id=workspace_id, topology_studio_request=True)
              tagmresp =  tsclient.GetTagMatchesV2(tagmr)
              for match in tagmresp.matches:
                  if match.device.device_id == device_id:
                      switch = LeafDetails()
                      found_switch = True
                      break

              if found_switch == False:
                  switch = SwitchDetails()

              for label in labels_to_fields.keys():
                  if label == "hostname":
                      for dev in ctx.topology.getDevices(deviceIds=[device_id]):
                          if dev.hostName:
                              setattr(switch, labels_to_fields[ label ], dev.hostName)
                      continue
                  if label == "model":
                      for dev in ctx.topology.getDevices(deviceIds=[device_id]):
                          if dev.modelName:
                              setattr(switch, labels_to_fields[ label ], dev.modelName)
                      continue
                  tvsr = tspb.TagValueSearchRequest(label=label, workspace_id=workspace_id, topology_studio_request=True)
                  for tag in tsclient.GetTagValueSuggestions(tvsr).tags:
                      try:
                          query= "{}:\"{}\" AND device:{}".format(tag.label, tag.value, device_id)
                          tagmr = tspb.TagMatchRequestV2(query=query, workspace_id=workspace_id, topology_studio_request=True)
                          tagmresp =  tsclient.GetTagMatchesV2(tagmr)
                      except:
                          continue
                      else:
                          for match in tagmresp.matches:
                              if match.device.device_id == device_id:
                                  setattr(switch, labels_to_fields[ tag.label ], tag.value)
                                  break

              switch.id = device_id
              return switch

          switch = get_switch_details(my_device_id)
          vpws_attribute_formats = vpwsVrfAttributeFormats
          vrfs = {}
          vlans = {}
          vpwsvrfs = {}
          vpwspp = {}
          evpnrdindex = 1
          l3rdindex = 1000
          vpwsrdindex = 2000
          if not customers:
              return
          for customer in customers:
              for vrf in customer["vpws"]:
                  if  vrf["switches"].resolve()["switch"]:
                      vpwsvrfs[vrf["vpwsName"]] = {
                          "rdrt": vpwsrdindex,
                          "route_distinguisher": vpws_attribute_formats["vrfRouteDistinguisherFormat"],
                          "route_target": vpws_attribute_formats["vrfRouteTargetFormat"]
                      }
                      if vrf["overrideVariables"]["routeDistinguisher"] is not None and vrf["overrideVariables"]["routeDistinguisher"].strip() != "":
                          vpwsvrfs[vrf["vpwsName"]]["route_distinguisher"] = vrf["overrideVariables"]["routeDistinguisher"]
                      if vrf["overrideVariables"]["routeTarget"] is not None and vrf["overrideVariables"]["routeTarget"].strip() != "":
                          vpwsvrfs[vrf["vpwsName"]]["route_target"] = vrf["overrideVariables"]["routeTarget"]
                      vpwspp[vrf["vpwsName"]] = {
                          "customer_name": customer["name"],
                          "vrf": vrf["vpwsName"],
                          "interfaces": vrf["switches"].resolve()["switch"]["interfaces"],
                          "portChannel": vrf["switches"].resolve()["switch"]["portChannel"],
                          "member_switches": vrf["switches"]
                          }

                  vpwsrdindex = vpwsrdindex + 1

          switch_vpwsvrfs = {}
          switch_vpwspp = {}
          for pp, pp_details in vpwspp.items():
              if pp_details["member_switches"].resolve(my_device_id)["switch"]["settings"]["circuit"] == "Enabled" or pp_details["member_switches"].resolve(my_device_id)["switch"]["settings"]["circuit"] == "Shutdown":
                  switch_vpwspp[pp] = pp_details
                  if pp_details.get("vrf") is not None and pp_details["vrf"].strip() not in ["", "None"]:
                      switch_vpwsvrfs[ pp_details["vrf"] ] = vpwsvrfs[ pp_details["vrf"] ]

          if len(switch_vpwspp) > 0:
              switch.set_config_params_via_tags()
              switch.configure_vpwsvrfs(switch_vpwsvrfs)
              switch.configure_vpwspp(switch_vpwspp)
              config = switch.config
          else:
              config = {}

          %>



          ## ---- GEN CONFIG -----##

          % if config:
          %   if config.get("patch_panels") is not None:
          %     for vrf in config.get("patch_panels"):
          <%thisSwitch = config["patch_panels"][vrf]["member_switches"].resolve(my_device_id)["switch"]%>
          %       for intf in my_device.getInterfaces():
          <%          
                      isPortChannel = None
                      if  thisSwitch["settings"]["portChannelOrEthernet"]:
                          isPortChannel = portChannelDetails = thisSwitch["portChannel"]
                      else:
                          intfName = intf.name
                          intfVal = thisSwitch["interfaces"].resolve(intfName, strict=True)
                          if not intfVal:
                              continue
                      multiHoming = False
                      if thisSwitch["settings"]["multihomingYesOrNo"]:
                          multiHoming = True
                          esi = thisSwitch["settings"]["esi"]
                          rt = thisSwitch["settings"]["rt"]
                          lacpSysId = thisSwitch["settings"]["lacpSysId"]
                      ms = config["patch_panels"][vrf]["member_switches"]
                      deviceIndex = resolveWithContext(ms, device=my_device_id)[1]
          %>
          ##${deviceIndex}
          ## PATCH PANEL PATCH
          patch panel
          %         if vpwsVrfAttributeFormats["remoteFailureErrdisable"] == "Enabled":
              connector interface patch bgp vpws remote-failure errdisable
          %         endif
          %         if not thisSwitch["settings"]["vlanTagNormalization"]:
              patch ${config["patch_panels"][vrf]["customer_name"]}_${vrf}
          %           if thisSwitch["settings"]["circuit"] == "Shutdown":
                  shutdown
          %           endif
          %           if thisSwitch["settings"]["portChannelOrEthernet"]:
          %             if thisSwitch["portChannel"]["subInterfaceNumber"]:
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]}.${portChannelDetails["subInterfaceNumber"]}
          %             else:
          %               if vpwsVrfAttributeFormats["remoteFailureErrdisable"] == "Enabled" and thisSwitch["settings"]["remoteErrorDisableOverride"] == "Yes":
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]}.${portChannelDetails["subInterfaceNumber"]} no-errdisable
          %               else:
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]}
          %               endif
          %             endif
          %           else:
          %             if thisSwitch["ethernetInterfaceProperties"]["subInterfaceNumber"]:
                  connector 1 interface ${intfName}.${thisSwitch["ethernetInterfaceProperties"]["subInterfaceNumber"]}
          %             else:
          %               if vpwsVrfAttributeFormats["remoteFailureErrdisable"] == "Enabled" and thisSwitch["settings"]["remoteErrorDisableOverride"] == "Yes":
                  connector 1 interface ${intfName} no-errdisable
          %               else:
                  connector 1 interface ${intfName}
          %               endif



          %             endif
          %           endif
                  connector 2 pseudowire bgp vpws ${config["patch_panels"][vrf]["customer_name"]}-${ vrf } pseudowire ${config["patch_panels"][vrf]["customer_name"]}_${vrf}_PW

                  exit
              exit
          !
          ## PATCH PANEL FLEX CROSS CONNECT
          %         else:
              flexible-cross-connect ${config["patch_panels"][vrf]["customer_name"]}_${vrf}
          %           if thisSwitch["settings"]["circuit"] == "Shutdown":
                  shutdown
          %           endif
          %           if thisSwitch["settings"]["vlanTagNormalization"] == "Single-Tag-Normalization":
                  vlan tag normalization single
          %           elif thisSwitch["settings"]["vlanTagNormalization"] == "Double-Tag-Normalization":
                  vlan tag normalization double
          %           endif
          %           if thisSwitch["settings"]["portChannelOrEthernet"]:
          %             if portChannelDetails["subInterfaceNumber"]:
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]}.${portChannelDetails["subInterfaceNumber"]}
          %             else:
                  connector 1 interface port-channel ${portChannelDetails["portChannelId"]}
          %             endif
          %           else:
          %             if thisSwitch["ethernetInterfaceProperties"]["subInterfaceNumber"]:
                  connector 1 interface ${intfName}.${thisSwitch["ethernetInterfaceProperties"]["subInterfaceNumber"]}
          %             else:
                  connector 1 interface ${intfName}
          %             endif
          %           endif
                  connector 2 pseudowire bgp vpws ${config["patch_panels"][vrf]["customer_name"]}-${ vrf } pseudowire ${config["patch_panels"][vrf]["customer_name"]}_${vrf}_PW
                  exit
              exit
          !
          %         endif
          ## CONFIG PORT CHANNEL
          %         if thisSwitch["settings"]["portChannelOrEthernet"]:
          %           if portChannelDetails["subInterfaceNumber"]:
          interface port-channel ${portChannelDetails["portChannelId"]}
              no switchport
              no switchport mode
          %             if multiHoming:
              evpn ethernet-segment
                  redundancy all-active
                  identifier ${esi}
                  route-target import ${rt}
              lacp system-id ${lacpSysId}
              exit
          !
          %             endif
          ## IF PORT CHANNEL IS SUBINTERFACE
          interface  port-channel ${portChannelDetails["portChannelId"]}.${portChannelDetails["subInterfaceNumber"]}
          ${flexible_encap(vrf)}
          ## IF PORT CHANNEL IS WHOLE PORT
          %           else:
          interface port-channel ${portChannelDetails["portChannelId"]}
              description pw ${config["patch_panels"][vrf]["customer_name"]} ${vrf}-PW
              no switchport
              no switchport mode
          %             if multiHoming:
              evpn ethernet-segment
                  redundancy all-active
                  identifier ${esi}
                  route-target import ${rt}
              lacp system-id ${lacpSysId}
              exit
          !
          %             endif
          %           endif
          ## ETHERNET PORT
          %         else:
          %           if thisSwitch["ethernetInterfaceProperties"]["subInterfaceNumber"]:
          interface ${intfName}
              no switchport
              no switchport mode
          %             if multiHoming:
              evpn ethernet-segment
                  redundancy all-active
                  identifier ${esi}
                  route-target import ${rt}
                  exit
          !
          %             endif
          ## ETHERNET SUBINTERFACE
          interface  ${intfName}.${thisSwitch["ethernetInterfaceProperties"]["subInterfaceNumber"]}
          ${flexible_encap(vrf)}
          %           else:
          ## ETHERNET WHOLE PORT
          interface ${intfName}
              description pw ${config["patch_panels"][vrf]["customer_name"]} ${vrf}-PW
              no switchport
              no switchport mode
          %             if multiHoming:
              evpn ethernet-segment
                  redundancy all-active
                  identifier ${esi}
                  route-target import ${rt}
          %             endif
              exit
          %           endif
          %         endif
          !
          ## ---- ROUTER BGP --------##
          %         if config["router_bgp"].get("as") is not None:
          router bgp ${ config["router_bgp"]["as"] }

          %           if config["router_bgp"].get("router_id") is not None:
              router-id ${ config["router_bgp"]["router_id"] }
          %           endif
          %           if config["router_bgp"].get("bgp_defaults") is not None:
          %             for bgp_default in config["router_bgp"]["bgp_defaults"]:
          ${ bgp_default }
          %             endfor
          %           endif
          ## ----- VPWS ------##
          %              if config["router_bgp"].get("vrfs") is not None:

              vpws ${config["patch_panels"][vrf]["customer_name"]}-${ vrf }
          %               if config["router_bgp"]["vrfs"][vrf].get("rd") is not None:
                  rd ${ config["router_bgp"]["vrfs"][vrf]["rd"] }
          %               endif
          %               if config["router_bgp"]["vrfs"][vrf].get("route_targets") is not None and config["router_bgp"]["vrfs"][vrf]["route_targets"].get("import") is not None:
          %                 for address_family in config["router_bgp"]["vrfs"][vrf]["route_targets"]["import"].keys():
          %                   for route_target in config["router_bgp"]["vrfs"][vrf]["route_targets"]["import"][address_family]:
                  route-target import ${ address_family } ${ route_target }
          %                   endfor
          %                 endfor
          %               endif
          %               if config["router_bgp"]["vrfs"][vrf].get("route_targets") is not None and config["router_bgp"]["vrfs"][vrf]["route_targets"].get("export") is not None:
          %                 for address_family in config["router_bgp"]["vrfs"][vrf]["route_targets"]["export"].keys():
          %                   for route_target in config["router_bgp"]["vrfs"][vrf]["route_targets"]["export"][address_family]:
                  route-target export ${ address_family } ${ route_target }
          %                   endfor
          %                 endfor
          %               endif
                  mpls control-word
          %               if config.get("patch_panels") is not None:
          <%rrd =  config["router_bgp"]["vrfs"][vrf]["rd"].split(":")%>
          <%intrrd = int(rrd[1]) %>
          %                     if deviceIndex == 0:
          <%index =  0 %>
                  pseudowire ${config["patch_panels"][vrf]["customer_name"]}_${vrf}_PW
                      evpn vpws id local ${intrrd + index} remote ${intrrd + 1000 + index}
                      exit
          <%index = index + 1 %>
          %                     elif deviceIndex == 1:
          <%index =  0 %>
                  pseudowire ${config["patch_panels"][vrf]["customer_name"]}_${vrf}_PW
                      evpn vpws id local ${intrrd + 1000 + index} remote ${intrrd + index}
                      exit
          <%index = index + 1 %>
          %                     endif
                  exit
              exit
          !
          %             endif
          %           endif
          %         endif
          <%       if isPortChannel:
                     break
          %>
          %       endfor
          %     endfor
          %   endif
          % endif
          ## FLEXIBLE ENCAP
          <%def name="flexible_encap(vrf)">
              description pw ${config["patch_panels"][vrf]["customer_name"]}_${vrf}_PW
          %               if thisSwitch["vlanTagSettings"]["encap"] == "match-1-and-pop":
              encapsulation vlan
                  client dot1q ${thisSwitch["vlanTagSettings"]["vlanTag"]}
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "match-1-and-preserve":
              encapsulation vlan
                  client dot1q ${thisSwitch["vlanTagSettings"]["vlanTag"]} network client
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "unmatched":
              encapsulation vlan
                  client unmatched
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "match-2-and-preserve":
              encapsulation vlan
                  client dot1q outer ${thisSwitch["vlanTagSettings"]["vlanTag"]} inner ${thisSwitch["vlanTagSettings"]["innerVlanTag"]} network client
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "match-2-and-pop-both":
              encapsulation vlan
                  client dot1q outer ${thisSwitch["vlanTagSettings"]["vlanTag"]} inner ${thisSwitch["vlanTagSettings"]["innerVlanTag"]}
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "untagged-subinterface":
              encapsulation vlan
                  client untagged network untagged
                  exit
          %               elif thisSwitch["vlanTagSettings"]["encap"] == "untagged-and-push":
              vlan id ${thisSwitch["vlanTagSettings"]["vlanTag"]}
              encapsulation vlan
                  client untagged
                  exit
          %               else:
          %                 if thisSwitch["vlanTagSettings"]["innerVlanTag"]:
              encapsulation dot1q vlan ${thisSwitch["vlanTagSettings"]["vlanTag"]} inner ${thisSwitch["vlanTagSettings"]["innerVlanTag"]}
          %                 else:
              encapsulation dot1q vlan ${thisSwitch["vlanTagSettings"]["vlanTag"]}
          %                 endif
          %               endif
              exit
          </%def>
      input_schema:
        fields:
          values:
            customerName:
              id: customerName
              name: name
              label: Customer Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vpwsName:
              id: vpwsName
              name: vpwsName
              label: VPWS Name
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            c17a0b8d-621e-4962-9eb1-6326aa6dc7e1:
              id: c17a0b8d-621e-4962-9eb1-6326aa6dc7e1
              name: description
              label: Description
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            a580c976-a603-40c6-923c-5f808f072c29:
              id: a580c976-a603-40c6-923c-5f808f072c29
              name: interfaceGroup
              label: Interface Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - c17a0b8d-621e-4962-9eb1-6326aa6dc7e1
            7a761d92-101e-4dab-af6b-e92b1bf3c888:
              id: 7a761d92-101e-4dab-af6b-e92b1bf3c888
              name: interfaces
              label: Ethernet
              description: Interfaces
              required: false
              type: INPUT_FIELD_TYPE_RESOLVER
              resolver_props:
                base_field_id: a580c976-a603-40c6-923c-5f808f072c29
                display_mode: RESOLVER_FIELD_DISPLAY_MODE_SPARSE
                input_mode: RESOLVER_FIELD_INPUT_MODE_SINGLE_INTERFACE_TAG
                input_tag_label: ''
                tag_filter_query: null
            e51e8763-2858-4637-8bc2-e4f70043a542:
              id: e51e8763-2858-4637-8bc2-e4f70043a542
              name: circuit
              label: Circuit State
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Unprovisioned
                static_options:
                  values:
                    - Enabled
                    - Shutdown
                    - Unprovisioned
                format: null
                length: null
                pattern: null
                dynamic_options: null
            afe44799-f630-4ad3-9b40-f3934b8771d5:
              id: afe44799-f630-4ad3-9b40-f3934b8771d5
              name: description
              label: Notes
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            91926f52-04a2-4303-b9e2-c4117a90a5b9:
              id: 91926f52-04a2-4303-b9e2-c4117a90a5b9
              name: vlanTagNormalization
              label: Flexible Cross Connect Service
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - Double-Tag-Normalization
                    - Single-Tag-Normalization
                format: null
                length: null
                pattern: null
                dynamic_options: null
            93d16aa8-316a-4294-a303-5336401afb5e:
              id: 93d16aa8-316a-4294-a303-5336401afb5e
              name: multihomingYesOrNo
              label: Multihoming Required?
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: false
            f9110e78-e4d3-4679-a606-95eeb3b48bcb:
              id: f9110e78-e4d3-4679-a606-95eeb3b48bcb
              name: portChannelOrEthernet
              label: Port Channel or Ethernet?
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_BOOLEAN
              boolean_props:
                default_value: false
            3faf0be8-4eb0-4f05-b118-9894495feb63:
              id: 3faf0be8-4eb0-4f05-b118-9894495feb63
              name: esi
              label: ESI
              description: Format 0033:3333:3333:3333:3333
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: '0033:3333:3333:3333:3333'
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            2vpwsmultihomingrt:
              id: 2vpwsmultihomingrt
              name: rt
              label: Multihoming RT
              description: Format 00:03:00:03:00:03
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: '00:03:00:03:00:03'
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vpwsmultihominglacpSysId:
              id: vpwsmultihominglacpSysId
              name: lacpSysId
              label: LACP Sys ID
              description: Format 1234.5678.0123
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: 1234.5678.0123
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            885a09ff-43ad-4739-8863-7c4ecb11314a:
              id: 885a09ff-43ad-4739-8863-7c4ecb11314a
              name: remoteErrorDisableOverride
              label: Remote Error Disable Override
              description: Enables override for the port when when Remote Error Disable is globally configured. Not supported for Flexible Cross Connect Service. Only the local ethernet and port-channel Interfaces can be error disabled.
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - 'Yes'
                format: null
                length: null
                pattern: null
                dynamic_options: null
            0d2b3ba3-ba40-414c-9928-744a4ead851e:
              id: 0d2b3ba3-ba40-414c-9928-744a4ead851e
              name: settings
              label: Settings
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - e51e8763-2858-4637-8bc2-e4f70043a542
                    - afe44799-f630-4ad3-9b40-f3934b8771d5
                    - 91926f52-04a2-4303-b9e2-c4117a90a5b9
                    - 93d16aa8-316a-4294-a303-5336401afb5e
                    - f9110e78-e4d3-4679-a606-95eeb3b48bcb
                    - 3faf0be8-4eb0-4f05-b118-9894495feb63
                    - 2vpwsmultihomingrt
                    - vpwsmultihominglacpSysId
                    - 885a09ff-43ad-4739-8863-7c4ecb11314a
            1cd4e6ed-848a-42c7-bdf5-f029fe98198e:
              id: 1cd4e6ed-848a-42c7-bdf5-f029fe98198e
              name: portChannelId
              label: Port Channel Id
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            d8cdb6b6-384e-4b46-b6cf-610998758af9:
              id: d8cdb6b6-384e-4b46-b6cf-610998758af9
              name: subInterfaceNumber
              label: Sub Interface Number
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            dbad1c68-5608-41fc-b9f3-4109cf1eea4f:
              id: dbad1c68-5608-41fc-b9f3-4109cf1eea4f
              name: description
              label: Description
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            fdc85f87-22ea-43d2-8805-0a553a4343cb:
              id: fdc85f87-22ea-43d2-8805-0a553a4343cb
              name: portChannel
              label: Port Channel
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - 1cd4e6ed-848a-42c7-bdf5-f029fe98198e
                    - d8cdb6b6-384e-4b46-b6cf-610998758af9
                    - dbad1c68-5608-41fc-b9f3-4109cf1eea4f
            3a46aba3-bfc9-4a4a-aac0-293c0aef5a9e:
              id: 3a46aba3-bfc9-4a4a-aac0-293c0aef5a9e
              name: innerVlanTag
              label: innerVlanTag
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            78265b9d-8284-4632-bac3-8af5853ee1c1:
              id: 78265b9d-8284-4632-bac3-8af5853ee1c1
              name: vlanTag
              label: vlanTag
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            196bf4e8-c63b-4b13-ba8a-83a2d193cfe4:
              id: 196bf4e8-c63b-4b13-ba8a-83a2d193cfe4
              name: encap
              label: Flexible Encap
              description: Leave blank for dot1q encap
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options:
                  values:
                    - match-1-and-pop
                    - match-1-and-preserve
                    - unmatched
                    - match-2-and-pop-both
                    - match-2-and-preserve
                    - untagged-subinterface
                    - untagged-and-push
                format: null
                length: null
                pattern: null
                dynamic_options: null
            fa87dfe6-e5b2-4460-b453-4402b3bb1567:
              id: fa87dfe6-e5b2-4460-b453-4402b3bb1567
              name: vlanTagSettings
              label: VLAN Tag Settings
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - 3a46aba3-bfc9-4a4a-aac0-293c0aef5a9e
                    - 78265b9d-8284-4632-bac3-8af5853ee1c1
                    - 196bf4e8-c63b-4b13-ba8a-83a2d193cfe4
            0ea4823b-e1e8-41c7-86e3-abbe06d1342a:
              id: 0ea4823b-e1e8-41c7-86e3-abbe06d1342a
              name: subInterfaceNumber
              label: Sub Interface Number
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_INTEGER
              integer_props:
                default_value: null
                range: null
                static_options: null
                dynamic_options: null
            4a4ba2a4-a26e-4e3c-bc69-77d35bbfff6c:
              id: 4a4ba2a4-a26e-4e3c-bc69-77d35bbfff6c
              name: description
              label: Description
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            73e7e110-9da1-4d2e-b065-6fef4fa56f73:
              id: 73e7e110-9da1-4d2e-b065-6fef4fa56f73
              name: ethernetInterfaceProperties
              label: Ethernet Interface Properties
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - 0ea4823b-e1e8-41c7-86e3-abbe06d1342a
                    - 4a4ba2a4-a26e-4e3c-bc69-77d35bbfff6c
            vpwsdeviceGroup:
              id: vpwsdeviceGroup
              name: switch
              label: Device Group
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - 7a761d92-101e-4dab-af6b-e92b1bf3c888
                    - 0d2b3ba3-ba40-414c-9928-744a4ead851e
                    - fdc85f87-22ea-43d2-8805-0a553a4343cb
                    - fa87dfe6-e5b2-4460-b453-4402b3bb1567
                    - 73e7e110-9da1-4d2e-b065-6fef4fa56f73
            vpwsswitches:
              id: vpwsswitches
              name: switches
              label: Endpoints
              description: Line 1 Endpoint A Line 2 for Endpoint B
              required: false
              type: INPUT_FIELD_TYPE_RESOLVER
              resolver_props:
                base_field_id: vpwsdeviceGroup
                display_mode: RESOLVER_FIELD_DISPLAY_MODE_SPARSE
                input_mode: RESOLVER_FIELD_INPUT_MODE_MULTI_DEVICE_TAG
                input_tag_label: null
                tag_filter_query: 'device:* '
            vpwsrouteDistinguisher:
              id: vpwsrouteDistinguisher
              name: routeDistinguisher
              label: Route Distinguisher
              description: Format Router-ID:(x)
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vpwsrouteTarget:
              id: vpwsrouteTarget
              name: routeTarget
              label: Route Target
              description: Format (x):(x)
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: null
                static_options: null
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vpwsoverrideVariables:
              id: vpwsoverrideVariables
              name: overrideVariables
              label: Override Global VRF Format
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vpwsrouteDistinguisher
                    - vpwsrouteTarget
            vpwsDefinition:
              id: vpwsDefinition
              name: vpwsDefinition
              label: VPWS Definition
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vpwsName
                    - vpwsswitches
                    - vpwsoverrideVariables
            vpws:
              id: vpws
              name: vpws
              label: VPWS
              description: Circuit ID
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: vpwsDefinition
                key: vpwsName
            tenantDefinition:
              id: tenantDefinition
              name: tenantDefinition
              label: Customer Definition
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - customerName
                    - vpws
            customers:
              id: customers
              name: customers
              label: Customers
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_COLLECTION
              collection_props:
                base_field_id: tenantDefinition
                key: customerName
            vpwsvrfRouteTargetFormat:
              id: vpwsvrfRouteTargetFormat
              name: vrfRouteTargetFormat
              label: VRF Route Target Format
              description: AS Numbers or Sequence Numbers
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: ASN:SEQ
                static_options:
                  values:
                    - ASN:SEQ
                    - SEQ:SEQ
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vpwsvrfRouteDistinguisherFormat:
              id: vpwsvrfRouteDistinguisherFormat
              name: vrfRouteDistinguisherFormat
              label: VRF Route Distinguisher Format
              description: Routers ID and Sequence Numbers
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Router-ID:SEQ
                static_options:
                  values:
                    - Router-ID:SEQ
                format: null
                length: null
                pattern: null
                dynamic_options: null
            58ab0fac-657f-4f8c-971d-835fd4affd0c:
              id: 58ab0fac-657f-4f8c-971d-835fd4affd0c
              name: remoteFailureErrdisable
              label: Remote Failure Errdisable
              description: Error disable local interfaces in a BGP VPWS pseudowire when the remote interface is shutdown or whenever we do not receive a response from BGP.
              required: false
              type: INPUT_FIELD_TYPE_STRING
              string_props:
                default_value: Disabled
                static_options:
                  values:
                    - Enabled
                    - Disabled
                format: null
                length: null
                pattern: null
                dynamic_options: null
            vpwsVrfAttributeFormats:
              id: vpwsVrfAttributeFormats
              name: vpwsVrfAttributeFormats
              label: 'VPWS VRF Attributes '
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - vpwsvrfRouteTargetFormat
                    - vpwsvrfRouteDistinguisherFormat
                    - 58ab0fac-657f-4f8c-971d-835fd4affd0c
            root:
              id: root
              name: ''
              label: ''
              description: ''
              required: false
              type: INPUT_FIELD_TYPE_GROUP
              group_props:
                members:
                  values:
                    - customers
                    - vpwsVrfAttributeFormats
        layout:
          value: '{"vrfs":{"key":"vrfs","type":"INPUT","isPageLayout":true},"customers":{"key":"customers","type":"INPUT","isPageLayout":true},"vlans":{"key":"vlans","type":"INPUT","isPageLayout":true},"vlanBasedVlans":{"key":"vlanBasedVlans","type":"INPUT","order":["vlanId","vlanBasedVlanName","vlanL3OrL2","vlanVrf","vlanSVIIpAddresses","vlanMemberSwitches","vlanOverrideVariables"]},"vrfGroup":{"key":"vrfGroup","type":"INPUT","order":["vrfName","evpnvlans","evpnvni","vlanAwareBundles","evpnoverrideVariables"]},"vlanL3OrL2":{"key":"vlanL3OrL2","valueToLabelMap":{"True":"Routed","False":"Bridged"},"type":"INPUT","dependency":{}},"vlanSviVirtualIpAddress":{"key":"vlanSviVirtualIpAddress","dependency":{"vlanL3OrL2":{"value":[true],"mode":"HIDE"}},"type":"INPUT"},"vlanSviSecondaryIpAddress":{"key":"vlanSviSecondaryIpAddress","dependency":{"vlanL3OrL2":{"value":[true],"mode":"HIDE"}},"type":"INPUT"},"tenantDefinition":{"key":"tenantDefinition","type":"INPUT","order":["customerName","vpws"]},"iBgpDetails":{"key":"iBgpDetails","type":"INPUT","order":["iBgpVlanId","iBgpSubnet","iBgpSubnetMask"]},"vlanDhcpServerVrf":{"key":"vlanDhcpServerVrf","dependency":{"vlanL3OrL2":{"value":[true],"mode":"SHOW"}},"type":"INPUT"},"vlanDhcpServers":{"key":"vlanDhcpServers","dependency":{"vlanL3OrL2":{"value":[true],"mode":"SHOW"}},"type":"INPUT"},"vlanAwareBundleGroup":{"key":"vlanAwareBundleGroup","type":"INPUT","order":["vlanAwareBundleName","vlanAwareBundleVlanRange","vlanAwareBundleOverrideVariables"]},"vlanAwareBundles":{"key":"vlanAwareBundles","type":"INPUT","isPageLayout":true},"vlanMemberSwitches":{"key":"vlanMemberSwitches","isPageLayout":true,"type":"INPUT"},"vlanVrf":{"key":"vlanVrf","dependency":{"vlanL3OrL2":{"value":[true],"mode":"HIDE"}},"type":"INPUT"},"vrfOverrideVariables":{"key":"vrfOverrideVariables","type":"INPUT","order":["vrfOverrideRouteDistinguisher","vrfOverrideRouteTarget"]},"vlanMemberSwitchApply":{"key":"vlanMemberSwitchApply","dependency":{},"type":"INPUT"},"d22b2790-63a0-4115-89cb-cc120d59534f":{"key":"d22b2790-63a0-4115-89cb-cc120d59534f","type":"INPUT","order":["9ce9d23a-f501-4e53-bdf5-d942cc55de81","a6b31149-12b6-4439-8433-9b4a599041c2","1e9e624f-3252-416f-84ea-55d8ea0397fc","19ad9308-46d6-445c-b542-77adb75e2085","525da80e-61dc-4155-b949-bfd9dac0601e","72a172f9-44d4-4caa-8eb9-779934ac9d71"]},"l3vrfs":{"key":"l3vrfs","type":"INPUT","isPageLayout":true},"evpnVrf":{"key":"evpnVrf","dependency":{},"type":"INPUT"},"7ec91859-3711-4f90-a31d-790b73d373df":{"key":"7ec91859-3711-4f90-a31d-790b73d373df","type":"INPUT","order":["44248c47-82ea-4db4-bafd-279fdbeb31cf","db3cfcf5-d4ad-4694-ac27-e7555142f6ba"]},"7a72f3a5-f77a-4471-8868-a729e1dcd281":{"key":"7a72f3a5-f77a-4471-8868-a729e1dcd281","type":"INPUT"},"vlanBundleMacVrfRouteDistinguisherFormat":{"key":"vlanBundleMacVrfRouteDistinguisherFormat","type":"INPUT","dependency":{}},"vlanBundleMacVrfRouteTargetFormat":{"key":"vlanBundleMacVrfRouteTargetFormat","type":"INPUT","dependency":{}},"vlanBasedMacVrfRouteTargetFormat":{"key":"vlanBasedMacVrfRouteTargetFormat","type":"INPUT","dependency":{}},"vlanBasedMacVrfRouteDistinguisherFormat":{"key":"vlanBasedMacVrfRouteDistinguisherFormat","type":"INPUT","dependency":{}},"vrfRouteTargetFormat":{"key":"vrfRouteTargetFormat","type":"INPUT","dependency":{}},"vrfRouteDistinguisherFormat":{"key":"vrfRouteDistinguisherFormat","type":"INPUT","dependency":{}},"evpnvlans":{"key":"evpnvlans","type":"INPUT","isPageLayout":true},"cae78eeb-5a5d-4ade-9e31-356db42f662d":{"key":"cae78eeb-5a5d-4ade-9e31-356db42f662d","type":"INPUT","isPageLayout":true},"evpnvlanBasedVlaNs":{"key":"evpnvlanBasedVlaNs","type":"INPUT","order":["vlanName","evpnvlanId","evpnmultihoming","evpnSwitches","evpnVrf","evpninterface","evpnsviIpAddresses","evpnsecondaryIpAddresses","estaticRoutes","evpneBgpNeighbors","evpnPLprefixList","evpnAPasPathList","mavVrfoverrideVariables"]},"evpnSwitches":{"key":"evpnSwitches","isPageLayout":false,"showDefaultRow":false,"type":"INPUT"},"vlanId":{"key":"vlanId","type":"INPUT","dependency":{}},"vlanBasedVlanName":{"key":"vlanBasedVlanName","type":"INPUT","dependency":{}},"vlanOverrideRouteDistinguisher":{"key":"vlanOverrideRouteDistinguisher","type":"INPUT","dependency":{}},"vlanOverrideRouteTarget":{"key":"vlanOverrideRouteTarget","type":"INPUT","dependency":{}},"34946551-8c59-4dfe-b0a7-86fdc78fdf47":{"key":"34946551-8c59-4dfe-b0a7-86fdc78fdf47","type":"INPUT","dependency":{}},"1e0921df-69a9-4a77-ab47-2efcde442e19":{"key":"1e0921df-69a9-4a77-ab47-2efcde442e19","type":"INPUT","dependency":{}},"bad00a40-57ce-4003-888e-08eac9b4c87f":{"key":"bad00a40-57ce-4003-888e-08eac9b4c87f","type":"INPUT","dependency":{}},"df8f2623-378e-4eb6-8c8b-623172a57ec7":{"key":"df8f2623-378e-4eb6-8c8b-623172a57ec7","type":"INPUT","dependency":{}},"evpnsviVirtualIpAddress":{"key":"evpnsviVirtualIpAddress","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnsecondarySviIpAddress":{"key":"evpnsecondarySviIpAddress","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"af062393-980c-459a-beaa-2469ea652951":{"key":"af062393-980c-459a-beaa-2469ea652951","type":"INPUT","isPageLayout":true},"b8933f38-9594-4542-921e-1ebb09fae63e":{"key":"b8933f38-9594-4542-921e-1ebb09fae63e","type":"INPUT","isPageLayout":true},"d88b98c1-3cbd-44cb-b309-f937c8359165":{"key":"d88b98c1-3cbd-44cb-b309-f937c8359165","type":"INPUT","isPageLayout":true},"l3vrfGroup":{"key":"l3vrfGroup","type":"INPUT","order":["l3vpnname","deviceHostname","l3vpnoverrideVariables"]},"devices":{"key":"devices","type":"INPUT","isPageLayout":true},"l3vlans":{"key":"l3vlans","type":"INPUT","isPageLayout":true},"b465bd6e-7f71-46fc-8f6e-b7d9b3ecb499":{"key":"b465bd6e-7f71-46fc-8f6e-b7d9b3ecb499","type":"INPUT","isPageLayout":true},"deviceHostname":{"key":"deviceHostname","isPageLayout":true,"type":"INPUT","showDefaultRow":false},"vlaNs":{"key":"vlaNs","type":"INPUT","isPageLayout":true},"evpnsviIpAddresses":{"key":"evpnsviIpAddresses","type":"INPUT","order":["evpnipPrefix","evpnsviVirtualIpAddress"]},"ipPrefixes":{"key":"ipPrefixes","type":"INPUT","order":["ipPrefix","virtualIpAddress"]},"sviIpAddresses":{"key":"sviIpAddresses","type":"INPUT","order":["l3ipPrefix","l3sviVirtualIpAddress","l3secondarySviIpAddress"]},"l3vpneBgpNeighbors":{"key":"l3vpneBgpNeighbors","type":"INPUT","isPageLayout":true},"deviceGroup":{"key":"deviceGroup","type":"INPUT","order":["vlaNs","l3staticRoutes","l3vpneBgpNeighbors","l3vpnPLprefixList","l3vpnAPasPathList","overrideVrfAttributes"]},"1151c978-5b2a-48ab-acc8-c24b3deb2f19":{"key":"1151c978-5b2a-48ab-acc8-c24b3deb2f19","isPageLayout":true,"type":"INPUT"},"98a83552-1053-4ac1-a5f2-b16733ac9a29":{"key":"98a83552-1053-4ac1-a5f2-b16733ac9a29","isPageLayout":true,"type":"INPUT"},"280937dd-bc64-4b54-902c-2cdf1f6955d8":{"key":"280937dd-bc64-4b54-902c-2cdf1f6955d8","type":"INPUT","order":["725559c3-da33-4c00-81f0-8f72d20d51be","5e677c39-1ff6-48a0-b951-4c6dd86a0ada"]},"86479ccf-cb7b-45d8-9a3e-c3dba00903c1":{"key":"86479ccf-cb7b-45d8-9a3e-c3dba00903c1","type":"INPUT","isPageLayout":true},"l3vpnRmInrouteMap":{"key":"l3vpnRmInrouteMap","type":"INPUT","order":["l3vpnRmInseqNumber","l3vpnRmInpermitDeny","l3vpnRmInprefixList","l3vpnRmInasPathList","l3vpnRmIncommunity","l3vpnRmInsetCommunity","l3vpnRmInlocalPref","l3vpnRmInweight","l3vpnrmiasPathPrependRepeat"]},"l3vpnNeighbor":{"key":"l3vpnNeighbor","type":"INPUT","order":["l3vpnpeerIp","l3vpnpeerAsn","l3vpndescription","l3vpnasSettings","fc18426c-9d8e-4d66-abc8-9d6e246f90b9","224d139d-c832-4b06-9728-4e21d99f854c","l3vpnRmInrouteMapIn","l3vpnRmOutrouteMapOut","l3vpnnremovePrivate","l3vpnneBgpMultiHopTtl","l3vpnbfd","l3vpnnweight","l3vpnpassword"]},"l3vpnPLprefixList":{"key":"l3vpnPLprefixList","type":"INPUT","isPageLayout":true},"l3vpnPLseqNumbers":{"key":"l3vpnPLseqNumbers","isPageLayout":false,"type":"INPUT"},"l3vpnAPasPathList":{"key":"l3vpnAPasPathList","isPageLayout":false,"type":"INPUT"},"evpneBgpNeighbors":{"key":"evpneBgpNeighbors","type":"INPUT","isPageLayout":true},"evpnipPrefix":{"key":"evpnipPrefix","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnpeerIp":{"key":"evpnpeerIp","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnPLprefixList":{"key":"evpnPLprefixList","isPageLayout":true,"type":"INPUT"},"evpnPLseqNumberGroup":{"key":"evpnPLseqNumberGroup","type":"INPUT","order":["evpnPLseqNumber","evpnPLpermitDeny","evpnPLprefix","evpnPLprefixLength","evpnPLmaskLength"]},"l3vpnPLSqvalue":{"key":"l3vpnPLSqvalue","type":"INPUT","order":["l3vpnPLseqNumber","l3vpnPLpermitDeny","l3vpnPLprefix","l3vpnPLprefixLength","l3vpnPLmaskLength"]},"evpnasSettings":{"key":"evpnasSettings","type":"INPUT","order":["evpnlocalAs","evpnallowAsIn","evpnasPathPrependDisable","evpnasPathRemoteAsReplaceOut"]},"evpnneighbor":{"key":"evpnneighbor","type":"INPUT","order":["evpnpeerIp","evpnpeerAsn","evpndescription","evpnasSettings","7ab76df3-8632-4fd0-a041-289acfb9c5d7","c17a6ae2-12cd-4d95-83da-2fb3ea4c0b1d","evpnRmInrouteMapIn","evpnRmOutrouteMapOut","evpnnremovePrivate","evpnneBgpMultiHopTtl","evpnbfd","evpnnweight","evpnpassword"]},"evpnpeerAsn":{"key":"evpnpeerAsn","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpndescription":{"key":"evpndescription","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnlocalAs":{"key":"evpnlocalAs","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnallowAsIn":{"key":"evpnallowAsIn","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnasPathPrependDisable":{"key":"evpnasPathPrependDisable","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnasPathRemoteAsReplaceOut":{"key":"evpnasPathRemoteAsReplaceOut","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnRmInseqNumber":{"key":"evpnRmInseqNumber","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnRmInpermitDeny":{"key":"evpnRmInpermitDeny","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}},"type":"INPUT"},"evpnRmInprefixList":{"key":"evpnRmInprefixList","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmInlocalPref":{"key":"evpnRmInlocalPref","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmInasPathList":{"key":"evpnRmInasPathList","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmIncommunity":{"key":"evpnRmIncommunity","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmInsetCommunity":{"key":"evpnRmInsetCommunity","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmInweight":{"key":"evpnRmInweight","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmOutseqNumber":{"key":"evpnRmOutseqNumber","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmOutpermitDeny":{"key":"evpnRmOutpermitDeny","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmOutprefixList":{"key":"evpnRmOutprefixList","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmOutasPathPrepend":{"key":"evpnRmOutasPathPrepend","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmOutasPathList":{"key":"evpnRmOutasPathList","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmOutcommunity":{"key":"evpnRmOutcommunity","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnRmOutsetCommunity":{"key":"evpnRmOutsetCommunity","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnPLprefixListName":{"key":"evpnPLprefixListName","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnPLseqNumbers":{"key":"evpnPLseqNumbers","isPageLayout":false,"type":"INPUT"},"evpnPLseqNumber":{"key":"evpnPLseqNumber","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnPLpermitDeny":{"key":"evpnPLpermitDeny","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnPLprefix":{"key":"evpnPLprefix","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnPLprefixLength":{"key":"evpnPLprefixLength","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnAPasPathList":{"key":"evpnAPasPathList","type":"INPUT","isPageLayout":false},"evpnAPasPathListName":{"key":"evpnAPasPathListName","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnAPpermitDeny":{"key":"evpnAPpermitDeny","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"evpnAPregEx":{"key":"evpnAPregEx","type":"INPUT","dependency":{"evpnVrf":{"value":[],"mode":"HIDE"}}},"defaultRoutingInstance":{"key":"defaultRoutingInstance","type":"INPUT","isPageLayout":true},"dvlaNs":{"key":"dvlaNs","type":"INPUT","isPageLayout":true},"ddeviceHostname":{"key":"ddeviceHostname","type":"INPUT","isPageLayout":true,"showDefaultRow":false},"deBgpNeighbors":{"key":"deBgpNeighbors","type":"INPUT","isPageLayout":true},"dprefixList":{"key":"dprefixList","type":"INPUT","isPageLayout":true},"baa0d0b5-24fb-4bc9-ba12-75d704d32c9b":{"key":"baa0d0b5-24fb-4bc9-ba12-75d704d32c9b","type":"INPUT","isPageLayout":false},"drouteMapIn":{"key":"drouteMapIn","isPageLayout":false,"type":"INPUT"},"dirouteMap":{"key":"dirouteMap","type":"INPUT","order":["drmiseqNumber","drmipermitDeny","drmiprefixList","drmiasPathList","drmimatchCommunity","drmisetCommunity","drmilocalPref","drmiweight","1bacdbb9-0441-4ba6-bedf-b36c37002ca1"]},"e4ac50bd-6669-4607-83d3-209ce8a5eaf5":{"key":"e4ac50bd-6669-4607-83d3-209ce8a5eaf5","type":"INPUT","order":[]},"dorouteMap":{"key":"dorouteMap","type":"INPUT","order":["drmoseqNumber","drmopermitDeny","drmoprefixList","drmoasPathList","drmomatchCommunity","drmosetCommunity","drmoasPathPrepend"]},"l3vpnRmOutrouteMap":{"key":"l3vpnRmOutrouteMap","type":"INPUT","order":["l3vpnRmOutseqNumber","l3vpnRmOutpermitDeny","l3vpnRmOutprefixList","l3vpnRmOutasPathList","l3vpnRmOutcommunity","l3vpnRmOutsetCommunity","l3vpnRmOutasPathPrepend"]},"evpnRmInrouteMap":{"key":"evpnRmInrouteMap","type":"INPUT","order":["evpnRmInseqNumber","evpnrmipermitDeny","evpnRmInprefixList","evpnRmInasPathList","evpnRmIncommunity","evpnRmInsetCommunity","evpnRmInlocalPref","evpnRmInweight","evpnrmiasPathPrependRepeat"]},"evpnRmOutrouteMap":{"key":"evpnRmOutrouteMap","type":"INPUT","order":["evpnRmOutseqNumber","evpnRmOutpermitDeny","evpnRmOutprefixList","evpnRmOutasPathList","evpnRmOutcommunity","evpnRmOutsetCommunity","evpnRmOutasPathPrepend"]},"drouteMapOut":{"key":"drouteMapOut","isPageLayout":false,"type":"INPUT"},"ddeviceGroup":{"key":"ddeviceGroup","type":"INPUT","order":["dvlaNs","dstaticRoutes","drouterBgpAsn","deBgpNeighbors","dpeerGroups","dprefixList","dasPathList"]},"dpeerGroup":{"key":"dpeerGroup","type":"INPUT","order":["dpeerGroupName","dpgpeerAsn","dpgdescription","dpglocalAs","dpgnextHopSelf","dpgmaximumRoutes","dgpmaximumRoutesWarningLimit","dpgmaximumAcceptedRoutes","dpgrouteMapIn","dpgrouteMapOut","dpgremovePrivate","dpgeBgpMultiHopTtl","dpgbfd","dpgweight","dpgpassword"]},"dpeerGroups":{"key":"dpeerGroups","type":"INPUT","isPageLayout":true},"dneighbor":{"key":"dneighbor","type":"INPUT","order":["dpeerIp","dpeerAsn","ddescription","dredistribute","dnpeerGroup","dnnextHopSelf","dasSettings","dnrmirouteMapIn","dnrmorouteMapOut","dnremovePrivate","dneBgpMultiHopTtl","dnbfd","dnweight","dnpassword"]},"dnpeerGroup":{"key":"dnpeerGroup","dependency":{},"type":"INPUT"},"dpgrouteMapIn":{"key":"dpgrouteMapIn","isPageLayout":false,"type":"INPUT"},"dpgrouteMapOut":{"key":"dpgrouteMapOut","isPageLayout":false,"type":"INPUT"},"l3staticRoutes":{"key":"l3staticRoutes","isPageLayout":false,"type":"INPUT"},"estaticRoutes":{"key":"estaticRoutes","isPageLayout":false,"type":"INPUT"},"dstaticRoutes":{"key":"dstaticRoutes","isPageLayout":false,"type":"INPUT"},"dgpmaximumRoutesWarningLimit":{"key":"dgpmaximumRoutesWarningLimit","dependency":{},"type":"INPUT"},"dpgrouteMapInGroup":{"key":"dpgrouteMapInGroup","type":"INPUT","order":["dpgrmiseqNumber","dpgrouteMapInpermitDeny","dpgrmiprefixList","dpgrmiasPathList","dpgrmimatchCommunity","dpgrmisetCommunity","dpgrmilocalPref","dpgrmiweight","dpgrmiprependRepeat"]},"evpnAPasPathListGroup":{"key":"evpnAPasPathListGroup","type":"INPUT","order":["evpnAPasPathListName","evpnAPpermitDeny","evpnAPregEx"]},"l3vpnAPvalue":{"key":"l3vpnAPvalue","type":"INPUT","order":["l3vpnAPname","l3vpnAPpermitDeny","l3vpnAPregEx"]},"dpgrouteMapOutGroup":{"key":"dpgrouteMapOutGroup","type":"INPUT","order":["dpgrmoseqNumber","dpgrmopermitDeny","dpgrmoprefixList","dpgrmoasPathList","dpgrmomatchCommunity","dpgrmosetCommunity","dpgrmoprependRepeat"]},"dplseqNumberGroup":{"key":"dplseqNumberGroup","type":"INPUT","order":["dplseqNumber","dplpermitDeny","dplprefix","dplprefixLength","dplmaskLength"]},"dasPathListGroup":{"key":"dasPathListGroup","type":"INPUT","order":["dasPathListName","dasPathpermitDeny","dapregEx"]},"dnrmirouteMapIn":{"key":"dnrmirouteMapIn","isPageLayout":false,"type":"INPUT"},"dnrmorouteMapOut":{"key":"dnrmorouteMapOut","isPageLayout":false,"type":"INPUT"},"evpnRmOutrouteMapOut":{"key":"evpnRmOutrouteMapOut","isPageLayout":false,"type":"INPUT"},"evpnRmInrouteMapIn":{"key":"evpnRmInrouteMapIn","isPageLayout":false,"type":"INPUT"},"value":{"key":"value","type":"INPUT","order":["vlanId","l3vlanName","l3vpninterface","ipPrefixes","l3vpnsecondaryIpAddresses"]},"dvlaNsGroup":{"key":"dvlaNsGroup","type":"INPUT","order":["dvlanId","dvlanName","dinterface","dipPrefixes","dsecondaryIpAddresses"]},"480362e8-7da0-4f00-bb99-0197e4520fe6":{"key":"480362e8-7da0-4f00-bb99-0197e4520fe6","isPageLayout":true,"type":"INPUT"},"evpnsecondaryIpAddresses":{"key":"evpnsecondaryIpAddresses","isPageLayout":false,"type":"INPUT"},"l3vpnsecondaryIpAddresses":{"key":"l3vpnsecondaryIpAddresses","isPageLayout":false,"type":"INPUT"},"dsecondaryIpAddresses":{"key":"dsecondaryIpAddresses","isPageLayout":false,"type":"INPUT"},"vpwsswitches":{"key":"vpwsswitches","isPageLayout":true,"showDefaultRow":false,"type":"INPUT"},"patchPanel":{"key":"patchPanel","type":"INPUT","isPageLayout":false},"vpws":{"key":"vpws","type":"INPUT","isPageLayout":true},"vpwsvalue":{"key":"vpwsvalue","type":"INPUT","order":["patchName","pseudowireName"]},"ddefaultRoutingInstance":{"key":"ddefaultRoutingInstance","dependency":{},"type":"INPUT"},"dvlanId":{"key":"dvlanId","dependency":{},"type":"INPUT"},"dvlanName":{"key":"dvlanName","dependency":{},"type":"INPUT"},"dinterface":{"key":"dinterface","dependency":{},"type":"INPUT"},"dipPrefix":{"key":"dipPrefix","dependency":{},"type":"INPUT"},"dvirtualIpPrefix":{"key":"dvirtualIpPrefix","dependency":{},"type":"INPUT"},"dsecondaryIpAddress":{"key":"dsecondaryIpAddress","dependency":{},"type":"INPUT"},"dsecondary":{"key":"dsecondary","dependency":{},"type":"INPUT"},"dprefix":{"key":"dprefix","dependency":{},"type":"INPUT"},"dnextHop":{"key":"dnextHop","dependency":{},"type":"INPUT"},"dsrname":{"key":"dsrname","dependency":{},"type":"INPUT"},"dpeerIp":{"key":"dpeerIp","dependency":{},"type":"INPUT"},"dpeerAsn":{"key":"dpeerAsn","dependency":{},"type":"INPUT"},"ddescription":{"key":"ddescription","dependency":{},"type":"INPUT"},"disis":{"key":"disis","dependency":{},"type":"INPUT"},"dospf":{"key":"dospf","dependency":{},"type":"INPUT"},"dconnected":{"key":"dconnected","dependency":{},"type":"INPUT"},"dnnextHopSelf":{"key":"dnnextHopSelf","dependency":{},"type":"INPUT"},"dlocalAs":{"key":"dlocalAs","dependency":{},"type":"INPUT"},"dallowAsIn":{"key":"dallowAsIn","dependency":{},"type":"INPUT"},"dasPathPrependOut":{"key":"dasPathPrependOut","dependency":{},"type":"INPUT"},"dasPathRemoteAsReplaceOut":{"key":"dasPathRemoteAsReplaceOut","dependency":{},"type":"INPUT"},"dnrmiseqNumber":{"key":"dnrmiseqNumber","dependency":{},"type":"INPUT"},"dnrmipermitDeny":{"key":"dnrmipermitDeny","dependency":{},"type":"INPUT"},"dnrmiprefixList":{"key":"dnrmiprefixList","dependency":{},"type":"INPUT"},"dnrmiasPathList":{"key":"dnrmiasPathList","dependency":{},"type":"INPUT"},"dnrmicommunity":{"key":"dnrmicommunity","dependency":{},"type":"INPUT"},"dnrmisetCommunity":{"key":"dnrmisetCommunity","dependency":{},"type":"INPUT"},"dnrmilocalPref":{"key":"dnrmilocalPref","dependency":{},"type":"INPUT"},"dnrmiweight":{"key":"dnrmiweight","dependency":{},"type":"INPUT"},"dnrmiprependRepeat":{"key":"dnrmiprependRepeat","dependency":{},"type":"INPUT"},"ospftag":{"key":"ospftag","dependency":{},"type":"INPUT"},"dnrmoseqNumber":{"key":"dnrmoseqNumber","dependency":{},"type":"INPUT"},"dnrmopermitDeny":{"key":"dnrmopermitDeny","dependency":{},"type":"INPUT"},"dnrmoprefixList":{"key":"dnrmoprefixList","dependency":{},"type":"INPUT"},"dnrmoasPathList":{"key":"dnrmoasPathList","dependency":{},"type":"INPUT"},"dnrmocommunity":{"key":"dnrmocommunity","dependency":{},"type":"INPUT"},"dnrmosetCommunity":{"key":"dnrmosetCommunity","dependency":{},"type":"INPUT"},"dnrmoprependRepeat":{"key":"dnrmoprependRepeat","dependency":{},"type":"INPUT"},"dnremovePrivate":{"key":"dnremovePrivate","dependency":{},"type":"INPUT"},"dneBgpMultiHopTtl":{"key":"dneBgpMultiHopTtl","dependency":{},"type":"INPUT"},"dnbfd":{"key":"dnbfd","dependency":{},"type":"INPUT"},"dnweight":{"key":"dnweight","dependency":{},"type":"INPUT"},"dnpassword":{"key":"dnpassword","dependency":{},"type":"INPUT"},"dpeerGroupName":{"key":"dpeerGroupName","dependency":{},"type":"INPUT"},"dpgpeerAsn":{"key":"dpgpeerAsn","dependency":{},"type":"INPUT"},"dpgdescription":{"key":"dpgdescription","dependency":{},"type":"INPUT"},"dpglocalAs":{"key":"dpglocalAs","dependency":{},"type":"INPUT"},"dpgnextHopSelf":{"key":"dpgnextHopSelf","dependency":{},"type":"INPUT"},"dpgmaximumRoutes":{"key":"dpgmaximumRoutes","dependency":{},"type":"INPUT"},"dpgmaximumAcceptedRoutes":{"key":"dpgmaximumAcceptedRoutes","dependency":{},"type":"INPUT"},"dpgrmiseqNumber":{"key":"dpgrmiseqNumber","dependency":{},"type":"INPUT"},"dpgrouteMapInpermitDeny":{"key":"dpgrouteMapInpermitDeny","dependency":{},"type":"INPUT"},"dpgrmiprefixList":{"key":"dpgrmiprefixList","dependency":{},"type":"INPUT"},"dpgrmiasPathList":{"key":"dpgrmiasPathList","dependency":{},"type":"INPUT"},"dpgrmimatchCommunity":{"key":"dpgrmimatchCommunity","dependency":{},"type":"INPUT"},"dpgrmisetCommunity":{"key":"dpgrmisetCommunity","dependency":{},"type":"INPUT"},"dpgrmilocalPref":{"key":"dpgrmilocalPref","dependency":{},"type":"INPUT"},"dpgrmiweight":{"key":"dpgrmiweight","dependency":{},"type":"INPUT"},"dpgrmiprependRepeat":{"key":"dpgrmiprependRepeat","dependency":{},"type":"INPUT"},"dpgrmoseqNumber":{"key":"dpgrmoseqNumber","dependency":{},"type":"INPUT"},"dpgrmopermitDeny":{"key":"dpgrmopermitDeny","dependency":{},"type":"INPUT"},"dpgrmoprefixList":{"key":"dpgrmoprefixList","dependency":{},"type":"INPUT"},"dpgrmoasPathList":{"key":"dpgrmoasPathList","dependency":{},"type":"INPUT"},"dpgrmomatchCommunity":{"key":"dpgrmomatchCommunity","dependency":{},"type":"INPUT"},"dpgrmosetCommunity":{"key":"dpgrmosetCommunity","dependency":{},"type":"INPUT"},"dpgrmoprependRepeat":{"key":"dpgrmoprependRepeat","dependency":{},"type":"INPUT"},"dpgremovePrivate":{"key":"dpgremovePrivate","dependency":{},"type":"INPUT"},"dpgpassword":{"key":"dpgpassword","dependency":{},"type":"INPUT"},"dpgweight":{"key":"dpgweight","dependency":{},"type":"INPUT"},"dpgbfd":{"key":"dpgbfd","dependency":{},"type":"INPUT"},"dpgeBgpMultiHopTtl":{"key":"dpgeBgpMultiHopTtl","dependency":{},"type":"INPUT"},"dprefixListName":{"key":"dprefixListName","dependency":{},"type":"INPUT"},"dplseqNumber":{"key":"dplseqNumber","dependency":{},"type":"INPUT"},"dplpermitDeny":{"key":"dplpermitDeny","dependency":{},"type":"INPUT"},"dplprefix":{"key":"dplprefix","dependency":{},"type":"INPUT"},"dplprefixLength":{"key":"dplprefixLength","dependency":{},"type":"INPUT"},"dplmaskLength":{"key":"dplmaskLength","dependency":{},"type":"INPUT"},"dasPathListName":{"key":"dasPathListName","dependency":{},"type":"INPUT"},"dasPathpermitDeny":{"key":"dasPathpermitDeny","dependency":{},"type":"INPUT"},"dapregEx":{"key":"dapregEx","dependency":{},"type":"INPUT"},"23d491fe-d0bb-483a-9469-6a4deabe8b34":{"key":"23d491fe-d0bb-483a-9469-6a4deabe8b34","valueToLabelMap":{"True":"Yes","False":"No"},"type":"INPUT"},"6e5899e6-4e8b-4189-ad61-417ce5206f8c":{"key":"6e5899e6-4e8b-4189-ad61-417ce5206f8c","valueToLabelMap":{"True":"Yes","False":"No"},"type":"INPUT"},"cfc9aa55-4122-44d6-a67b-ec9227b99e5b":{"key":"cfc9aa55-4122-44d6-a67b-ec9227b99e5b","valueToLabelMap":{"True":"Yes","False":"No"},"type":"INPUT"},"a7137bb7-03ba-42e8-b1ab-b1b1a6adf963":{"key":"a7137bb7-03ba-42e8-b1ab-b1b1a6adf963","valueToLabelMap":{"True":"Yes","False":"No"},"type":"INPUT"},"drouterBgpAsn":{"key":"drouterBgpAsn","dependency":{},"type":"INPUT"},"vpwsName":{"key":"vpwsName","dependency":{},"type":"INPUT"},"leftright":{"key":"leftright","dependency":{"vpwsmultihomingname":{"value":["__ANY__"],"mode":"SHOW"}},"type":"INPUT"},"patchName":{"key":"patchName","dependency":{},"type":"INPUT"},"leftinterface":{"key":"leftinterface","dependency":{},"type":"INPUT"},"rightinterface":{"key":"rightinterface","dependency":{},"type":"INPUT"},"pseudowireName":{"key":"pseudowireName","dependency":{},"type":"INPUT"},"vpwsrouteDistinguisher":{"key":"vpwsrouteDistinguisher","dependency":{},"type":"INPUT"},"vpwsrouteTarget":{"key":"vpwsrouteTarget","dependency":{},"type":"INPUT"},"vpwsVrfAttributeFormats":{"key":"vpwsVrfAttributeFormats","type":"INPUT","order":["vpwsvrfRouteDistinguisherFormat","vpwsvrfRouteTargetFormat","58ab0fac-657f-4f8c-971d-835fd4affd0c"]},"vpwsDefinition":{"key":"vpwsDefinition","type":"INPUT","order":["vpwsName","vpwsswitches","vpwsoverrideVariables"]},"f7a381a5-335a-4e95-bb41-62c5c502906a":{"key":"f7a381a5-335a-4e95-bb41-62c5c502906a","type":"INPUT","isPageLayout":false},"d63c7b59-1ded-4f63-a0d6-beb71ed81aaa":{"key":"d63c7b59-1ded-4f63-a0d6-beb71ed81aaa","type":"INPUT","order":["e7a63234-6630-48c5-b126-3429ff6bb1a6","e417f26d-6951-4eea-a3de-a628f31d01f5","abd01751-6fdd-4566-a64c-62ebb91b5386","f60ca2da-4f6e-471f-b1d6-5d2f25ddcae3"]},"011b4937-f829-4f02-8672-3b83a584616d":{"key":"011b4937-f829-4f02-8672-3b83a584616d","type":"INPUT","isPageLayout":false},"evpnmultihoming":{"key":"evpnmultihoming","type":"INPUT","isPageLayout":false},"vpwsdeviceGroup":{"key":"vpwsdeviceGroup","type":"INPUT","order":["0d2b3ba3-ba40-414c-9928-744a4ead851e","fa87dfe6-e5b2-4460-b453-4402b3bb1567","fdc85f87-22ea-43d2-8805-0a553a4343cb","73e7e110-9da1-4d2e-b065-6fef4fa56f73","7a761d92-101e-4dab-af6b-e92b1bf3c888","0d15e95e-ecd9-49e4-a7fe-579435f3f09d"]},"1e76b63a-f28d-4c9e-a143-9c1c9ce7f732":{"key":"1e76b63a-f28d-4c9e-a143-9c1c9ce7f732","type":"INPUT","dependency":{"vpwsName":{"value":["__ANY__"],"mode":"HIDE"}}},"vpwsmultihominglacpSysId":{"key":"vpwsmultihominglacpSysId","dependency":{"vpwsName":{"value":["__ANY__"],"mode":"HIDE"}},"type":"INPUT"},"vpwsmultihomingname":{"key":"vpwsmultihomingname","type":"INPUT","dependency":{"3d72d7a5-fddf-4f25-86ca-a9b7f54b212c":{"value":[true],"mode":"SHOW"}}},"vpwsmultihomingesi":{"key":"vpwsmultihomingesi","type":"INPUT","dependency":{"3d72d7a5-fddf-4f25-86ca-a9b7f54b212c":{"value":[true],"mode":"SHOW"}}},"2vpwsmultihomingrt":{"key":"2vpwsmultihomingrt","dependency":{"93d16aa8-316a-4294-a303-5336401afb5e":{"value":[true],"mode":"SHOW"}},"type":"INPUT"},"b44088d2-dcba-4655-b68c-4b58c89862f7":{"key":"b44088d2-dcba-4655-b68c-4b58c89862f7","type":"INPUT","dependency":{"e948a1be-3a86-4e3e-afd2-ed89a373d2ad":{"value":[true],"mode":"SHOW"}}},"81188a6d-4c3b-42af-b869-8a16b0d31c95":{"key":"81188a6d-4c3b-42af-b869-8a16b0d31c95","type":"INPUT","dependency":{"e948a1be-3a86-4e3e-afd2-ed89a373d2ad":{"value":[true],"mode":"SHOW"}}},"9be4b784-5f2e-44c6-81c2-e26910c42312":{"key":"9be4b784-5f2e-44c6-81c2-e26910c42312","dependency":{},"type":"INPUT"},"d786d49d-1c47-4f15-be1a-129e93f9efad":{"key":"d786d49d-1c47-4f15-be1a-129e93f9efad","type":"INPUT","dependency":{"e948a1be-3a86-4e3e-afd2-ed89a373d2ad":{"value":[true],"mode":"SHOW"}}},"fd51aaab-9c43-47e6-96cc-9c48f5a01b43":{"key":"fd51aaab-9c43-47e6-96cc-9c48f5a01b43","type":"INPUT","dependency":{"e948a1be-3a86-4e3e-afd2-ed89a373d2ad":{"value":[true],"mode":"SHOW"}}},"e7378a53-4cf7-4800-a3f0-539e0493994e":{"key":"e7378a53-4cf7-4800-a3f0-539e0493994e","type":"INPUT","dependency":{"e948a1be-3a86-4e3e-afd2-ed89a373d2ad":{"value":[false],"mode":"SHOW"}}},"7a761d92-101e-4dab-af6b-e92b1bf3c888":{"key":"7a761d92-101e-4dab-af6b-e92b1bf3c888","type":"INPUT","showDefaultRow":false},"a580c976-a603-40c6-923c-5f808f072c29":{"key":"a580c976-a603-40c6-923c-5f808f072c29","type":"INPUT","order":["c17a0b8d-621e-4962-9eb1-6326aa6dc7e1"]},"fbed5ae2-49c6-48c1-a14c-f9d8dc9eca75":{"key":"fbed5ae2-49c6-48c1-a14c-f9d8dc9eca75","type":"INPUT","dependency":{"vpwsName":{"value":["__ANY__"],"mode":"HIDE"}}},"0d15e95e-ecd9-49e4-a7fe-579435f3f09d":{"type":"TAGGER","parentKey":"vpwsdeviceGroup","key":"0d15e95e-ecd9-49e4-a7fe-579435f3f09d","name":"BGP ASN and Router ID Tags","assignmentType":"SINGLE","prepopulate":true,"tagType":"DEVICE","description":"Mandatory Fields","columns":[{"tagLabel":"router_bgp.as","suggestedValues":[]},{"tagLabel":"router_bgp.router_id","suggestedValues":[]}]},"00c3ebdf-97d6-4776-ae12-b9cb89d37e4b":{"key":"00c3ebdf-97d6-4776-ae12-b9cb89d37e4b","type":"INPUT","showDefaultRow":false},"3faf0be8-4eb0-4f05-b118-9894495feb63":{"key":"3faf0be8-4eb0-4f05-b118-9894495feb63","type":"INPUT","dependency":{"93d16aa8-316a-4294-a303-5336401afb5e":{"value":[true],"mode":"SHOW"}}},"ec583001-a6e2-4744-a711-b734023c2f87":{"key":"ec583001-a6e2-4744-a711-b734023c2f87","type":"INPUT","dependency":{"3d72d7a5-fddf-4f25-86ca-a9b7f54b212c":{"value":[true],"mode":"SHOW"}}},"9659ec72-c454-449f-ab30-a838f894dd2f":{"key":"9659ec72-c454-449f-ab30-a838f894dd2f","type":"INPUT","dependency":{"3d72d7a5-fddf-4f25-86ca-a9b7f54b212c":{"value":[true],"mode":"SHOW"}}},"bb1895ec-e20a-4bd6-8edc-cd181172afd0":{"key":"bb1895ec-e20a-4bd6-8edc-cd181172afd0","dependency":{"vpwsName":{"value":["__ANY__"],"mode":"HIDE"}},"type":"INPUT"},"f9110e78-e4d3-4679-a606-95eeb3b48bcb":{"key":"f9110e78-e4d3-4679-a606-95eeb3b48bcb","type":"INPUT","valueToLabelMap":{"True":"Port-Channel","False":"Ethernet"}},"5e2a6358-8119-4266-8df5-0ed99ff483b2":{"key":"5e2a6358-8119-4266-8df5-0ed99ff483b2","type":"INPUT","valueToLabelMap":{"True":"Port-Channel","False":"Ethernet"}},"a3edb456-0cf9-41c8-925d-efd2e179aabf":{"key":"a3edb456-0cf9-41c8-925d-efd2e179aabf","type":"INPUT","dependency":{"5e2a6358-8119-4266-8df5-0ed99ff483b2":{"value":[false],"mode":"SHOW"}}},"b0dc59b8-355c-4b5e-a391-6ebe1f6c577c":{"key":"b0dc59b8-355c-4b5e-a391-6ebe1f6c577c","type":"INPUT","dependency":{"5e2a6358-8119-4266-8df5-0ed99ff483b2":{"value":[false],"mode":"SHOW"}}},"1122499c-677b-4b50-b256-ed234d88966e":{"key":"1122499c-677b-4b50-b256-ed234d88966e","type":"INPUT","dependency":{"5e2a6358-8119-4266-8df5-0ed99ff483b2":{"value":[false],"mode":"SHOW"}}},"cb596644-c581-4baa-b056-a2f132a5f5a7":{"key":"cb596644-c581-4baa-b056-a2f132a5f5a7","type":"INPUT","dependency":{"5e2a6358-8119-4266-8df5-0ed99ff483b2":{"value":[false],"mode":"SHOW"}}},"cd29a48e-9ca9-49b9-91d0-467fc08169af":{"key":"cd29a48e-9ca9-49b9-91d0-467fc08169af","type":"INPUT","dependency":{"5e2a6358-8119-4266-8df5-0ed99ff483b2":{"value":[false],"mode":"SHOW"}}},"0ea4823b-e1e8-41c7-86e3-abbe06d1342a":{"key":"0ea4823b-e1e8-41c7-86e3-abbe06d1342a","type":"INPUT","dependency":{"f9110e78-e4d3-4679-a606-95eeb3b48bcb":{"value":[false],"mode":"SHOW"}}},"8e24ea3b-adef-4125-887d-ba0bab7b001c":{"key":"8e24ea3b-adef-4125-887d-ba0bab7b001c","type":"INPUT","dependency":{"f9110e78-e4d3-4679-a606-95eeb3b48bcb":{"value":[false],"mode":"SHOW"}}},"f854b072-ab17-4dca-b7ac-71982cccf8eb":{"key":"f854b072-ab17-4dca-b7ac-71982cccf8eb","type":"INPUT","dependency":{"f9110e78-e4d3-4679-a606-95eeb3b48bcb":{"value":[false],"mode":"SHOW"}}},"196bf4e8-c63b-4b13-ba8a-83a2d193cfe4":{"key":"196bf4e8-c63b-4b13-ba8a-83a2d193cfe4","dependency":{},"type":"INPUT"},"885a09ff-43ad-4739-8863-7c4ecb11314a":{"key":"885a09ff-43ad-4739-8863-7c4ecb11314a","dependency":{},"type":"INPUT"},"1cd4e6ed-848a-42c7-bdf5-f029fe98198e":{"key":"1cd4e6ed-848a-42c7-bdf5-f029fe98198e","type":"INPUT","dependency":{"f9110e78-e4d3-4679-a606-95eeb3b48bcb":{"value":[true],"mode":"SHOW"}}},"d8cdb6b6-384e-4b46-b6cf-610998758af9":{"key":"d8cdb6b6-384e-4b46-b6cf-610998758af9","type":"INPUT","dependency":{"f9110e78-e4d3-4679-a606-95eeb3b48bcb":{"value":[true],"mode":"SHOW"}}},"78265b9d-8284-4632-bac3-8af5853ee1c1":{"key":"78265b9d-8284-4632-bac3-8af5853ee1c1","dependency":{},"type":"INPUT"},"3a46aba3-bfc9-4a4a-aac0-293c0aef5a9e":{"key":"3a46aba3-bfc9-4a4a-aac0-293c0aef5a9e","dependency":{},"type":"INPUT"},"9bb2a34d-99bb-4e52-8728-f0e59bc8ff89":{"key":"9bb2a34d-99bb-4e52-8728-f0e59bc8ff89","type":"INPUT","dependency":{"f9110e78-e4d3-4679-a606-95eeb3b48bcb":{"value":[true],"mode":"SHOW"}}},"cec3ee2f-2afc-42ad-b70d-408cc8757054":{"key":"cec3ee2f-2afc-42ad-b70d-408cc8757054","type":"INPUT","dependency":{"f9110e78-e4d3-4679-a606-95eeb3b48bcb":{"value":[true],"mode":"SHOW"}}},"c886dc38-d05e-4094-ba20-e7a90ddbede1":{"key":"c886dc38-d05e-4094-ba20-e7a90ddbede1","type":"INPUT","dependency":{"5e2a6358-8119-4266-8df5-0ed99ff483b2":{"value":[true],"mode":"SHOW"}}},"9b19b00e-53ce-4190-ade1-1ae3e04aff55":{"key":"9b19b00e-53ce-4190-ade1-1ae3e04aff55","type":"INPUT","dependency":{"5e2a6358-8119-4266-8df5-0ed99ff483b2":{"value":[true],"mode":"SHOW"}}},"92039667-ca63-4c52-8473-acfbdc13fca7":{"key":"92039667-ca63-4c52-8473-acfbdc13fca7","type":"INPUT","dependency":{"5e2a6358-8119-4266-8df5-0ed99ff483b2":{"value":[true],"mode":"SHOW"}}},"fb77b1b9-f3da-4b02-a1e9-a525bbf2b114":{"key":"fb77b1b9-f3da-4b02-a1e9-a525bbf2b114","type":"INPUT","dependency":{"5e2a6358-8119-4266-8df5-0ed99ff483b2":{"value":[],"mode":"SHOW"}}},"36feff15-9d46-4962-85b2-6f5c6e7e720b":{"key":"36feff15-9d46-4962-85b2-6f5c6e7e720b","type":"INPUT","dependency":{"5e2a6358-8119-4266-8df5-0ed99ff483b2":{"value":[true],"mode":"SHOW"}}},"ebff65aa-1e19-41ab-bdce-83ebba871350":{"key":"ebff65aa-1e19-41ab-bdce-83ebba871350","type":"INPUT","dependency":{"5e2a6358-8119-4266-8df5-0ed99ff483b2":{"value":[true],"mode":"SHOW"}}},"f1556b81-ddcc-4e93-9686-e51fb91c32ac":{"key":"f1556b81-ddcc-4e93-9686-e51fb91c32ac","type":"INPUT","dependency":{"f9110e78-e4d3-4679-a606-95eeb3b48bcb":{"value":[true],"mode":"SHOW"}}},"cb450730-6277-4433-b9ab-c4893fa5559b":{"key":"cb450730-6277-4433-b9ab-c4893fa5559b","type":"INPUT","dependency":{"5e2a6358-8119-4266-8df5-0ed99ff483b2":{"value":[true],"mode":"SHOW"}}},"04eb0cde-ffae-4ec9-b066-b9059858c873":{"key":"04eb0cde-ffae-4ec9-b066-b9059858c873","type":"INPUT","order":[]},"56955d23-4940-44aa-8f0a-fd30a93a3446":{"key":"56955d23-4940-44aa-8f0a-fd30a93a3446","type":"INPUT","order":["5e2a6358-8119-4266-8df5-0ed99ff483b2","3d72d7a5-fddf-4f25-86ca-a9b7f54b212c","ec583001-a6e2-4744-a711-b734023c2f87","9659ec72-c454-449f-ab30-a838f894dd2f","bb1895ec-e20a-4bd6-8edc-cd181172afd0"]},"fa87dfe6-e5b2-4460-b453-4402b3bb1567":{"key":"fa87dfe6-e5b2-4460-b453-4402b3bb1567","type":"INPUT","order":["78265b9d-8284-4632-bac3-8af5853ee1c1","3a46aba3-bfc9-4a4a-aac0-293c0aef5a9e","196bf4e8-c63b-4b13-ba8a-83a2d193cfe4"]},"c17a0b8d-621e-4962-9eb1-6326aa6dc7e1":{"key":"c17a0b8d-621e-4962-9eb1-6326aa6dc7e1","type":"INPUT","dependency":{"f9110e78-e4d3-4679-a606-95eeb3b48bcb":{"value":[false],"mode":"SHOW"}}},"93d16aa8-316a-4294-a303-5336401afb5e":{"key":"93d16aa8-316a-4294-a303-5336401afb5e","dependency":{"f9110e78-e4d3-4679-a606-95eeb3b48bcb":{"value":[false,true],"mode":"HIDE"}},"type":"INPUT"},"dbad1c68-5608-41fc-b9f3-4109cf1eea4f":{"key":"dbad1c68-5608-41fc-b9f3-4109cf1eea4f","type":"INPUT","dependency":{"f9110e78-e4d3-4679-a606-95eeb3b48bcb":{"value":[true],"mode":"SHOW"}}},"4a4ba2a4-a26e-4e3c-bc69-77d35bbfff6c":{"key":"4a4ba2a4-a26e-4e3c-bc69-77d35bbfff6c","type":"INPUT","dependency":{"f9110e78-e4d3-4679-a606-95eeb3b48bcb":{"value":[false],"mode":"SHOW"}}}}'
